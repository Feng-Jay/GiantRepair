Repair : closure_53
Current failed test : com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545 | 2019.09.05 AD at 15:24:22 CDT
Location : com.google.javascript.rhino.Node.toString:[1026, 1027, 1028, 1029, 1031]#1.0
Compute Candidate : 2019.09.05 AD at 15:26:23 CDT - 2019.09.05 AD at 15:39:06 CDT , PNumber : 11330, CandNumber : 110 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
-StringBuilder sb=new StringBuilder();
+ StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:39:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
-StringBuilder sb=new StringBuilder();
+StringBuilder sb=new StringBuilder(null);
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/104/pattern-ver1-serial/cps.hu.bme.mit.inf.cps.patterns.src-gen.hu.bme.mit.inf.cps.patterns.AllApplicationInstanceIsRunningMatch.java-newEmptyMatch.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:39:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+if(printSource){
 toString(sb,printSource,printAnnotations,printType);
+}
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/3119/pattern-ver1-serial/X3-InteractiveMap_GUI.src.main.java.de.ncm.x3.iam.gui.component.universe.JSector.java-setHighlighted.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:39:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+if(printAnnotations){
 toString(sb,printSource,printAnnotations,printType);
+}
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/3119/pattern-ver1-serial/X3-InteractiveMap_GUI.src.main.java.de.ncm.x3.iam.gui.component.universe.JSector.java-setHighlighted.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:39:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+if(printType){
 toString(sb,printSource,printAnnotations,printType);
+}
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/3119/pattern-ver1-serial/X3-InteractiveMap_GUI.src.main.java.de.ncm.x3.iam.gui.component.universe.JSector.java-setHighlighted.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:39:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
-StringBuilder sb=new StringBuilder();
+StringBuilder sb=new StringBuilder(1);
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3262/pattern-ver1-serial/app.src.main.java.com.playing.lokasee.activites.MainActivity.java-onClose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:39:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
+import java.io.UnsupportedEncodingException;
+
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
-StringBuilder sb=new StringBuilder();
+StringBuilder sb=new StringBuilder("UTF-8");
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V37/5909/pattern-ver1-serial/platform.security.handler.security-handler-api.src.main.java.org.codice.ddf.security.handler.api.PKIAuthenticationToken.java-PKIAuthenticationToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:39:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
-StringBuilder sb=new StringBuilder();
+StringBuilder sb=new StringBuilder(2);
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5794/pattern-ver1-serial/app.src.main.java.io.github.louistsaitszho.erg2.gui.HistoryAdapter.java-startDateTimeToString.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:40:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return null;
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:40:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
-if(Token.shouldPrintTrees()){
+if(!Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:40:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return "";
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:40:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
+this.toString();
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:40:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
+this.toString();
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:40:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return sb.toString().trim();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:40:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
-if(Token.shouldPrintTrees()){
+if(true){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:40:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return new String(sb.toString());
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:40:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return (String)sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:41:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return sb.toString().toLowerCase();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:41:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+synchronized(this){
 toString(sb,printSource,printAnnotations,printType);
+}
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:41:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return (String)(sb.toString());
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:41:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
-return String.valueOf(type);
+return String.format("%04d",type);
 }

PATTERN : /home/jiajun/GithubData/2015/V20/350/pattern-ver1-serial/src.main.java.jp.co.tabocom.teratermstation.model.TargetNode.java-sortChildren.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:41:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
+synchronized(this){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
+}
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:41:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
-return String.valueOf(type);
+return this.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6962/pattern-ver1-serial/CodenameOne.src.com.codename1.ui.Toolbar.java-constructSideNavigationComponent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:41:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
-return String.valueOf(type);
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:41:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
-return String.valueOf(type);
+return "";
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:42:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+sb.append("]");
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:42:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+sb.append("            scope.apply();\n");
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V37/4602/pattern-ver1-serial/layout.src.main.java.com.flarestar.drones.layout.directives.Click.java-afterViewCreated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:42:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+sb=sb;
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:42:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
-return String.valueOf(type);
+return String.valueOf(type).trim();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:42:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
-if(Token.shouldPrintTrees()){
+if(Token.shouldPrintTrees()&&printSource){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2749/pattern-ver1-serial/Stuyablo.java-combat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:42:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
-if(Token.shouldPrintTrees()){
+if(Token.shouldPrintTrees()&&printAnnotations){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2749/pattern-ver1-serial/Stuyablo.java-combat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:42:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
-if(Token.shouldPrintTrees()){
+if(Token.shouldPrintTrees()&&printType){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2749/pattern-ver1-serial/Stuyablo.java-combat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:42:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
-if(Token.shouldPrintTrees()){
+if(Token.shouldPrintTrees()==false){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:43:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
-return String.valueOf(type);
+return new String(String.valueOf(type));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:43:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
-return String.valueOf(type);
+return (String)String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:43:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
+int a=0;
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:43:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
+int a=0;
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:43:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
+String OUTSTRING="";
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:43:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
+String OUTSTRING="";
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:43:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
-return String.valueOf(type);
+return String.valueOf(type).toLowerCase();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:43:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
-if(Token.shouldPrintTrees()){
+if(Token.shouldPrintTrees()==true){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:44:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+if(equals(printSource)){
+return null;
+}
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:44:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+if(equals(printAnnotations)){
+return null;
+}
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:44:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+if(equals(printType)){
+return null;
+}
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:44:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+if(equals(sb)){
+return null;
+}
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:44:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
+if(equals(sb)){
+return null;
+}
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:44:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
+if(equals(printSource)){
+return null;
+}
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:44:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
+if(equals(printAnnotations)){
+return null;
+}
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:44:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
-return String.valueOf(type);
+return (String)(String.valueOf(type));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:45:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+sb.append(" & ");
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:45:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return "FolderPersister for '"+this;
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V10/1833/pattern-ver1-serial/src.main.de.dal33t.powerfolder.disk.Folder.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:45:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
-return String.valueOf(type);
+return "FolderPersister for '"+this;
 }

PATTERN : /home/jiajun/GithubData/2016/V10/1833/pattern-ver1-serial/src.main.de.dal33t.powerfolder.disk.Folder.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:45:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+sb.append("    }\n");
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:45:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
+int a=1;
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:45:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
+int a=1;
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:45:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+sb.append(printSource);
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:46:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+sb.append(printAnnotations);
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:46:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+sb.append(printType);
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:46:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
+String String="%#.&f";
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:46:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
+boolean b=true;
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:46:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
+boolean b=true;
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:46:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return sb.toString()+".*";
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6165/pattern-ver1-serial/src.main.java.com.oneandone.network.snmpman.configuration.type.WildcardOID.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:46:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
-return String.valueOf(type);
+return String.valueOf(type)+".*";
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6165/pattern-ver1-serial/src.main.java.com.oneandone.network.snmpman.configuration.type.WildcardOID.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:46:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
-return String.valueOf(type);
+return String.valueOf(Math.abs(type));
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:47:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+if(sb==null){
+return "";
+}
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:47:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+if(sb==null){
+return null;
+}
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:47:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
+if(sb==null){
+return null;
+}
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:47:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+if("&null".equals(printSource)){
+return null;
+}
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:47:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+if("&null".equals(printAnnotations)){
+return null;
+}
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:47:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+if("&null".equals(printType)){
+return null;
+}
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:47:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+if("&null".equals(sb)){
+return null;
+}
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:47:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
+}
+if("&null".equals(printSource)){
+return null;
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:48:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
+}
+if("&null".equals(printAnnotations)){
+return null;
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:48:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
+}
+if("&null".equals(printType)){
+return null;
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:48:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+if(sb.equals("")){
+return "";
+}
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:48:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+if(sb.equals("-1")){
+return null;
+}
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:48:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
-if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+if(Token.shouldPrintTrees()){
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:48:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
-return String.valueOf(type);
+String vis=new String();
+return vis.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/6385/pattern-ver1-serial/app.src.main.java.commdgriest.httpsgithub.wimk.Inventory.java-searchByName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:48:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+assert (sb!=null);
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:48:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return sb.toString().replaceAll("\r","");
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:49:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
-return String.valueOf(type);
+return String.valueOf(type).replaceAll("\r","");
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:49:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return String.format("%s",sb.toString());
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:49:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
-return String.valueOf(type);
+return String.format("%s",String.valueOf(type));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:49:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+assert (sb!=new StringBuilder());
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:49:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+if(sb.equals(null)){
+return null;
+}
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:49:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
+if(sb.equals(null)){
+return null;
+}
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:49:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
-StringBuilder sb=new StringBuilder();
+String indexClassList="com.servinglynk.hmis.warehouse.model.v2014.Client";
+StringBuilder sb=new StringBuilder(indexClassList);
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/910/pattern-ver1-serial/hmis-service-v2014.src.main.java.com.servinglynk.hmis.warehouse.service.impl.SearchServiceImpl.java-indexing.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:49:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
+String indexClassList="com.servinglynk.hmis.warehouse.model.v2014.Client";
 if(Token.shouldPrintTrees()){
-StringBuilder sb=new StringBuilder();
+StringBuilder sb=new StringBuilder(indexClassList);
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/910/pattern-ver1-serial/hmis-service-v2014.src.main.java.com.servinglynk.hmis.warehouse.service.impl.SearchServiceImpl.java-indexing.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:50:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
+if(sb.equals("655")){
+System.out.println();
+}
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:50:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+if(sb.equals("655")){
+System.out.println();
+}
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:50:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return sb.toString()==null?"":sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:50:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
-return String.valueOf(type);
+return String.valueOf(type)==null?"":String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:50:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return sb.toString()!=null?sb.toString():new String();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:50:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
-return String.valueOf(type);
+return String.valueOf(type)!=null?String.valueOf(type):new String();
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:50:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:50:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return sb==null?null:sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4320/pattern-ver1-serial/src.main.java.org.jenkinsci.plugins.githubissues.GitHubIssueNotifier.java-getRepoForJob.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:51:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return sb.toString()==null?new String():sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:51:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
-return String.valueOf(type);
+return String.valueOf(type)==null?new String():String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:51:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
+if(sb!=null){
 return sb.toString();
+}else {
+return null;
+}
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V35/3589/pattern-ver1-serial/HermesBucarBala.app.src.main.java.com.laboratoriodesoftware2015.hermesbucarbala.presenter.DashboardPresenter.java-getListTabsById.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:51:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return sb!=null?sb.toString():null;
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/997/pattern-ver1-serial/src.main.java.bammerbom.ultimatecore.bukkit.r.java-getPermission.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:51:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+assert (sb!=null):"Appointments day is not allowed to be null!";
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:51:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return sb!=null?sb.toString():"";
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3020/pattern-ver1-serial/src.main.java.com.karumi.reddo.task.GitHubRepositoryTask.java-execute.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:51:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
+if(sb==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:51:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+toString(sb,printSource,printAnnotations,printType);
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:52:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+sb.append(" (");
+sb.append(") ");
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:52:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+sb.append("\"category\" : [");
+sb.append("]");
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/1798/pattern-ver1-serial/src.main.java.com.github.jerdeb.daqvalidator.Validator.java-listCompliantCDM.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:52:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
-return String.valueOf(type);
+return String.valueOf(type)+"\n\n"+String.valueOf("distance.desc");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/3128/pattern-ver1-serial/src.alg.embed3d.r.Sammon3DEmbedder.java-getDescription.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:52:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+sb.append("<table style=\"text-align: center;\" width=\"100%\" "+"height=\"100%\" border=\"0\" bordercolor=\"#000000\">");
+sb.append("</table>");
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5923/pattern-ver1-serial/photoweb.src.com.utils.web.GenerateHTML.java-genDayNavigate.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:52:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
+synchronized(this){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
+}
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:52:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1022,1032]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.shouldPrintTrees()){
 StringBuilder sb=new StringBuilder();
+if(sb.toString().contains("E")&&sb.toString().charAt(sb.indexOf("E")+1)!='-'&&Integer.parseInt(sb.toString().substring(sb.indexOf("E")+1,sb.length()))<=15){
+return String.format("%.0f",Double.parseDouble(sb.toString().replace(' ','\0')));
+}
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/476/pattern-ver1-serial/app.src.main.java.com.davidsgk.microcalc.MainActivity.java-Interpreter.pattern
MATCHLEVEL : ALL
ALL : 40, UPD : 0, INS : 40, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 15:52:43 CDT
--------------- END -----------------
Location : com.google.javascript.rhino.Node.toString:[1040, 1041, 1044, 1045, 1049, 1052, 1054, 1076, 1084, 1137, 1147, 1042, 1043, 1050, 1055, 1056, 1057, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1077, 1078, 1079, 1080, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1093, 1095, 1096, 1098, 1099, 1101, 1103, 1104, 1106, 1107, 1109, 1110, 1112, 1116, 1118, 1119, 1121, 1122, 1125, 1129, 1132, 1133, 1138, 1139, 1140, 1141, 1142]#1.0
Compute Candidate : 2019.09.05 AD at 15:54:09 CDT - 2019.09.05 AD at 17:51:38 CDT , PNumber : 11402, CandNumber : 966 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+return ;
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:51:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+return ;
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:51:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+return ;
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:52:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+return ;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:52:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+return ;
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:52:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
+return ;
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:52:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:52:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:52:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+return ;
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:52:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
+return ;
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:52:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
+return ;
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/3473/pattern-ver1-serial/src.main.java.com.fabegabe.cmd.CCCommand.java-onCommand.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:53:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
+return ;
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/3473/pattern-ver1-serial/src.main.java.com.fabegabe.cmd.CCCommand.java-onCommand.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:53:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+return ;
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+return ;
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:53:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+return ;
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:53:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+return ;
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+return ;
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:53:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+return ;
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+return ;
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:53:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+return ;
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+return ;
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:53:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+return ;
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
+return ;
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:53:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+return ;
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:54:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+return ;
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:54:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+return ;
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:54:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:54:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:54:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:54:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:54:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
+ FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:54:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:55:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+ int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:55:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type==0){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:55:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type==0){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:55:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString==null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:55:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+long lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:55:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0;i<=keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:55:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
+if(first==null&&first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V7/7763/pattern-ver1-serial/app.src.main.java.cheaphone.gui.Offerta.java-setOffert.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:55:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0;i>keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:56:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno==-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6722/pattern-ver1-serial/collections.queue.IntArrayQueue.java-peek.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:56:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
+if(first==null||first.getType()==Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6722/pattern-ver1-serial/collections.queue.IntArrayQueue.java-peek.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:56:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type<=Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:56:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type<=Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:56:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+float lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6860/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.map.impl.eviction.MaxSizeChecker.java-isEvictablePerPartition.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:56:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0;i<keys.length;i--){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:56:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString!=""){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V29/276/pattern-ver1-serial/src.edu.cpp.cs.cs141.final_project.User_Interface.TextUI.TextUserInterface.java-drawAlertText.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:56:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type>=Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:57:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type>=Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:57:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+int type=keys[1];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:57:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type!=Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:57:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type!=Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:57:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+Integer type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:57:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+Integer lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:57:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
-if(printAnnotations){
+if(true){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:58:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
-if(printSource){
+if(true){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:58:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
-if(printType){
+if(true){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:58:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
-if(printSource){
+if(true){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:58:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
+}
 }
 }
+if(printSource){
+int lineno=getLineno();
+if(lineno!=-1){
+sb.append(' ');
+sb.append(lineno);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:58:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
+case 203 :
+
+return ;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/4533/pattern-ver1-serial/src.com.orange.network.game.protocol.constants.GameConstantsProtos.java-valueOf.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:58:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+int type=keys[0];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:58:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno<-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/1616/pattern-ver1-serial/src.PileRPL.java-sub.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:58:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
+if(first==null||first.getType()<Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/1616/pattern-ver1-serial/src.PileRPL.java-sub.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:59:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+int type=keys[2];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:59:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type>Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:59:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type>Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:59:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
+if(first==null||first.getType()>Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3765/pattern-ver1-serial/app.src.main.java.com.xlythe.sms.MessageActivity.java-onGlobalLayout.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:59:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno>-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3765/pattern-ver1-serial/app.src.main.java.com.xlythe.sms.MessageActivity.java-onGlobalLayout.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:59:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
+case 10 :
+
+return ;
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/2044/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.item.ItemRelocatorModule.java-getRelocatorModule.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:59:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
+case 10 :
+
+return ;
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/2044/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.item.ItemRelocatorModule.java-getRelocatorModule.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 17:59:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
+case 10 :
+
+return ;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/2044/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.item.ItemRelocatorModule.java-getRelocatorModule.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:00:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
-sb.append(']');
+sb.append('[');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5726/pattern-ver1-serial/org.osate.results.ui.src-gen.org.osate.results.ui.contentassist.antlr.internal.InternalResultsLexer.java-mT__43.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:00:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
-sb.append(']');
+sb.append('[');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5726/pattern-ver1-serial/org.osate.results.ui.src-gen.org.osate.results.ui.contentassist.antlr.internal.InternalResultsLexer.java-mT__43.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:00:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
+sb.append('[');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5726/pattern-ver1-serial/org.osate.results.ui.src-gen.org.osate.results.ui.contentassist.antlr.internal.InternalResultsLexer.java-mT__43.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:00:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
-sb.append(' ');
+sb.append('[');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5726/pattern-ver1-serial/org.osate.results.ui.src-gen.org.osate.results.ui.contentassist.antlr.internal.InternalResultsLexer.java-mT__43.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:00:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
+sb.append('[');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5726/pattern-ver1-serial/org.osate.results.ui.src-gen.org.osate.results.ui.contentassist.antlr.internal.InternalResultsLexer.java-mT__43.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:00:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
-sb.append(' ');
+sb.append('[');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5726/pattern-ver1-serial/org.osate.results.ui.src-gen.org.osate.results.ui.contentassist.antlr.internal.InternalResultsLexer.java-mT__43.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:00:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
-sb.append(' ');
+sb.append('[');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5726/pattern-ver1-serial/org.osate.results.ui.src-gen.org.osate.results.ui.contentassist.antlr.internal.InternalResultsLexer.java-mT__43.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:00:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
+case 13 :
+
+return ;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/5275/pattern-ver1-serial/src.edu.uiuc.groupmessage.GroupMessageProtos.java-valueOf.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:01:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
+case 0 :
+
+return ;
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/13/pattern-ver1-serial/src.main.java.org.apache.airavata.services.FileResource.java-findByThriftId.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:01:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
-value="target block property";
+value="";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6756/pattern-ver1-serial/src.main.java.org.silvertunnel_ng.netlib.adapter.url.impl.net.http.MessageHeader.java-mergeHeader.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:01:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
-value="last local block";
+value="";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6756/pattern-ver1-serial/src.main.java.org.silvertunnel_ng.netlib.adapter.url.impl.net.http.MessageHeader.java-mergeHeader.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:01:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
-value="both";
+value="";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6756/pattern-ver1-serial/src.main.java.org.silvertunnel_ng.netlib.adapter.url.impl.net.http.MessageHeader.java-mergeHeader.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:01:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
-value="right";
+value="";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6756/pattern-ver1-serial/src.main.java.org.silvertunnel_ng.netlib.adapter.url.impl.net.http.MessageHeader.java-mergeHeader.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:01:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
-value="left";
+value="";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6756/pattern-ver1-serial/src.main.java.org.silvertunnel_ng.netlib.adapter.url.impl.net.http.MessageHeader.java-mergeHeader.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:01:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
-value="eval";
+value="";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6756/pattern-ver1-serial/src.main.java.org.silvertunnel_ng.netlib.adapter.url.impl.net.http.MessageHeader.java-mergeHeader.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:01:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
-value="with";
+value="";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6756/pattern-ver1-serial/src.main.java.org.silvertunnel_ng.netlib.adapter.url.impl.net.http.MessageHeader.java-mergeHeader.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:01:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
-value="target block property";
+value=null;
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:02:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
-value="last local block";
+value=null;
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:02:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
-value="both";
+value=null;
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:02:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
-value="right";
+value=null;
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:02:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
-value="left";
+value=null;
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:02:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
-value="eval";
+value=null;
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:02:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
-value="with";
+value=null;
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:02:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno!=-2){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:02:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
+case 401 :
+
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1693/pattern-ver1-serial/src.main.java.uk.ac.ic.wlgitbridge.snapshot.getdoc.GetDocResult.java-fromJSON.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:03:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
+case 401 :
+
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1693/pattern-ver1-serial/src.main.java.uk.ac.ic.wlgitbridge.snapshot.getdoc.GetDocResult.java-fromJSON.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:03:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
+case 401 :
+
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1693/pattern-ver1-serial/src.main.java.uk.ac.ic.wlgitbridge.snapshot.getdoc.GetDocResult.java-fromJSON.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:03:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0;i<keys.length;type++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:03:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append(first.toString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/7441/pattern-ver1-serial/HelloWorld.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:03:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append(toString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/7441/pattern-ver1-serial/HelloWorld.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:03:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
+
+case 4 :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/2088/pattern-ver1-serial/core.src.com.finalstand.game.Screens.PlayScreen.java-findCreepStartingPos.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:03:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append(toString());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/1640/pattern-ver1-serial/spring-social-vkontakte.src.main.java.org.springframework.social.vkontakte.api.impl.WallTemplate.java-getPost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:03:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
+if(sb!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:04:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(sb!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:04:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
+i++;
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6189/pattern-ver1-serial/src.Connection.java-discoverIP.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:04:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.util.Iterator;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
+case 5 :
+
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V13/1378/pattern-ver1-serial/src.haven.OptWnd.java-changed.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:04:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.util.Iterator;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
+case 5 :
+
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V13/1378/pattern-ver1-serial/src.haven.OptWnd.java-changed.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:04:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:04:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
+ final FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:04:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+ final int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:05:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+ final int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:05:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
+ final FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+ final int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:05:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:05:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
+ final FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:05:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.examples.ResourceListExample.java-printRecordings.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:05:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.examples.ResourceListExample.java-printRecordings.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:05:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:05:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:06:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:06:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:06:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:06:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
+ FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:06:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:06:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
+if(first==null||this.first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:06:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append(this.first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:06:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+this.toString();
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:07:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+this.toString();
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:07:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+this.toString();
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:07:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+this.toString();
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:07:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+this.toString();
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:07:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+this.toString();
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:07:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+this.toString();
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:07:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
+this.toString();
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:07:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
+this.toString();
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:08:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+this.toString();
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:08:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append(first.getString().trim());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append(getString().trim());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:08:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
+sb.append("<invalid>".trim());
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:08:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
-sb.append(" [source name: ");
+sb.append(" [source name: ".trim());
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:08:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
+sb.append("] [encoded source length: ".trim());
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:08:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
+sb.append("] [base line: ".trim());
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:08:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
+sb.append("] [end line: ".trim());
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:09:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
-sb.append(" [");
+sb.append(" [".trim());
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:09:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append(propToString(type).trim());
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:09:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
+if(first==null||getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append(getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/7184/pattern-ver1-serial/src.Board.java-rotate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:09:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.util.Iterator;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type==-1){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:09:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.util.Iterator;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type==-1){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:09:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+lineno++;
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:09:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
+type++;
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:09:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+lineno++;
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:10:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+type++;
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:10:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
-if(printSource){
+if(!printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:10:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
-if(printType){
+if(!printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:10:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
-if(printSource){
+if(!printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:10:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
-if(printAnnotations){
+if(!printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:10:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
-if(this instanceof StringNode){
+if(true){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:10:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
-if(this instanceof ScriptOrFnNode){
+if(true){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:10:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
+if(true){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:11:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+lineno--;
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:11:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append(sof.getEncodedSourceEnd()-2);
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:11:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
-String jsTypeString=jsType.toString();
+if(first!=null){
+String jsTypeString=first.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/2709/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.expressions.Point2DExpression.java-getTablesInvolved.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:11:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
-value=x.toString();
+value=x.toString().trim();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/973/pattern-ver1-serial/src.com.pindroid.authenticator.AuthenticatorActivity.java-handleLogin.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:11:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append(sof.getEncodedSourceEnd()-type);
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:11:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+synchronized(sb){
 sb.append(' ');
+}
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:11:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+synchronized(sb){
 sb.append(getString());
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:11:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append((int)(getDouble()));
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:12:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append(Token.name((int)(type)));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:12:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
+sb.append((int)(sof.getBaseLineno()));
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:12:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
+sb.append((int)(sof.getEndLineno()));
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:12:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
+sb.append((int)(' '));
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:12:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
-sb.append(' ');
+sb.append((int)(' '));
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:12:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
-throw Kit.codeBug();
+throw new UnsupportedOperationException();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/56/pattern-ver1-serial/core.src.main.java.lupos.datastructures.paged_dbbptree.DBBPTree.java-lastKey.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:12:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
-throw Kit.codeBug();
+throw new UnsupportedOperationException();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/56/pattern-ver1-serial/core.src.main.java.lupos.datastructures.paged_dbbptree.DBBPTree.java-lastKey.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:12:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
-value=x.toString();
+value="";
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6756/pattern-ver1-serial/src.main.java.org.silvertunnel_ng.netlib.adapter.url.impl.net.http.MessageHeader.java-mergeHeader.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:12:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
-value=x.toString();
+value=null;
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:13:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append((first.getString()).toLowerCase());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:13:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append((getString()).toLowerCase());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:13:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append((propToString(type)).toLowerCase());
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:13:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
+sb.append(("<invalid>").toLowerCase());
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:13:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
-sb.append(" [source name: ");
+sb.append((" [source name: ").toLowerCase());
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:13:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
+sb.append(("] [encoded source length: ").toLowerCase());
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:13:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
-sb.append(jsTypeString);
+sb.append((jsTypeString).toLowerCase());
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:13:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
+sb.append(("] [base line: ").toLowerCase());
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:14:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
+sb.append(("] [end line: ").toLowerCase());
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:14:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
-private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean broadcast){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
-if(printType){
+if(broadcast){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/4539/pattern-ver1-serial/src.main.java.io.minimum.minecraft.superbvote.votes.rewards.VoteReward.java-broadcastVote.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:14:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
-private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+private void toString(StringBuilder sb,boolean printSource,boolean broadcast,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
-if(printAnnotations){
+if(broadcast){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/4539/pattern-ver1-serial/src.main.java.io.minimum.minecraft.superbvote.votes.rewards.VoteReward.java-broadcastVote.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:14:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+synchronized(this){
 sb.append(' ');
+}
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:14:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+synchronized(this){
 sb.append(getString());
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:14:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
 }
 }
+if(equals(printSource)){
+return ;
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:14:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+if(equals(printSource)){
+return ;
+}
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:14:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+}
 }
+if(equals(printAnnotations)){
+return ;
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:14:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+if(equals(printAnnotations)){
+return ;
+}
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:15:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
+}
 }
+if(equals(printType)){
+return ;
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:15:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+if(equals(printType)){
+return ;
+}
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:15:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
+if(equals(type)){
+return ;
+}
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:15:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
+if(equals(keys)){
+return ;
+}
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:15:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if(first.getString().isEmpty()){
+return ;
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7204/pattern-ver1-serial/src.main.java.sg.edu.nus.cs2103t.omnitask.logic.DataImpl.java-addTask.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:15:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
 }
+while(true){
+
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:17:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
+while(true){
+
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:19:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+while(true){
+
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:19:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+}
+while(true){
+
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:21:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
+}
+while(true){
+
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:21:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
+while(true){
+
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:23:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+while(true){
+
+}
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:25:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
+}
+while(true){
+
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:26:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+}
+while(true){
+
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:26:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
+if(Token.name(type).isEmpty()){
+return ;
+}
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3182/pattern-ver1-serial/canal-client.src.main.java.com.tqmall.search.canal.handle.TableSectionHandle.java-runRowChangeAction.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:26:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+if(Token.name(type).isEmpty()){
+return ;
+}
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3182/pattern-ver1-serial/canal-client.src.main.java.com.tqmall.search.canal.handle.TableSectionHandle.java-runRowChangeAction.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:26:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type>0){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2696/pattern-ver1-serial/src.main.java.br.com.provaServer.infrastructure.deserialization.gson.GsonDeserialization.java-isWithoutRoot.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:26:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type>0){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2696/pattern-ver1-serial/src.main.java.br.com.provaServer.infrastructure.deserialization.gson.GsonDeserialization.java-isWithoutRoot.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:26:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+i--;
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/2847/pattern-ver1-serial/core.src.com.mygdx.game.GameScreen.java-updateBossBullet.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:26:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
+synchronized(this){
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:26:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+synchronized(this){
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:27:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+synchronized(this){
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:27:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
+synchronized(this){
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:27:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+synchronized(this){
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:27:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
 }
+if(sb==null){
+return ;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:27:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+if(sb==null){
+return ;
+}
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:27:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
+if(sb==null){
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:27:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+if(sb==null){
+return ;
+}
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:27:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(sb==null){
+return ;
+}
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:28:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
+if(sb==null){
+return ;
+}
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:28:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(sb==null){
+return ;
+}
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:28:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if(sb==null){
+return ;
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:28:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+if(sb==null){
+return ;
+}
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:28:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if(sb==null){
+return ;
+}
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:28:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+if(sb==null){
+return ;
+}
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:28:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+if(sb==null){
+return ;
+}
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:29:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+if(sb==null){
+return ;
+}
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:29:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
+if(sb==null){
+return ;
+}
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:29:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
+if(sb==null){
+return ;
+}
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:29:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
+if(sb==null){
+return ;
+}
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:29:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
+if(keys==null){
+return ;
+}
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:29:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(sof==null){
+return ;
+}
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:29:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+if(getString()!=null){
 sb.append(getString());
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:30:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+if(first.getString()!=null){
 sb.append(first.getString());
+}
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:30:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+if(sb!=null){
 sb.append(getString());
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/3708/pattern-ver1-serial/mifosng-android.src.main.java.com.mifos.mifosxdroid.online.ClientListFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:30:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(sb!=null){
 sb.append(' ');
+}
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/6565/pattern-ver1-serial/MarioAI.src.ch.idsia.agents.controllers.AdvancedMarioAIAgent.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:30:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.util.Collection;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(x==null){
+return ;
+}
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3593/pattern-ver1-serial/velvetdb-mapdb.src.main.java.com.zakgof.db.velvet.mapdb.MapDbVelvet.java-isBelow.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:30:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+first=this;
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4878/pattern-ver1-serial/app.src.main.java.com.trukr.shipper.activity.Notification.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:30:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
+if(sb==null){
+return ;
+}
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:30:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+if(sb==null){
+return ;
+}
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:30:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if(first==null){
+return ;
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:31:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+if(first==null){
+return ;
+}
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:31:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+synchronized(this){
 sb.append("<invalid>");
+}
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:31:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(' '>0){
 sb.append(' ');
+}
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/1583/pattern-ver1-serial/core.src.main.java.tachyon.client.CountingWritableBlockChannel.java-write.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:31:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if("index".equals(sb)){
+return ;
+}
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:31:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if("index".equals(sb)){
+return ;
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:31:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if("index".equals(sb)){
+return ;
+}
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:31:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+if("index".equals(sb)){
+return ;
+}
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:32:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+if("index".equals(sb)){
+return ;
+}
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:32:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if("index".equals(printSource)){
+return ;
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:32:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+if("index".equals(sb)){
+return ;
+}
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:32:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+if("index".equals(sb)){
+return ;
+}
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:32:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
+if("index".equals(sb)){
+return ;
+}
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:32:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+if("index".equals(printSource)){
+return ;
+}
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:32:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(sb.equals("TIME")){
+return ;
+}
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:32:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if(sb.equals("TIME")){
+return ;
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:33:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if(sb.equals("TIME")){
+return ;
+}
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:33:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+if(sb.equals("TIME")){
+return ;
+}
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:33:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+if(sb.equals("TIME")){
+return ;
+}
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:33:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+if(sb.equals("TIME")){
+return ;
+}
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:33:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
+if(sb.equals("TIME")){
+return ;
+}
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:33:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
+if(sb.equals("TIME")){
+return ;
+}
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:33:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
 }
+if("&null".equals(sb)){
+return ;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:33:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+if("&null".equals(sb)){
+return ;
+}
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:34:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
+if("&null".equals(sb)){
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:34:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
 }
+if("&null".equals(printSource)){
+return ;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:34:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+if("&null".equals(sb)){
+return ;
+}
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:34:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
+if("&null".equals(printSource)){
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:34:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if("&null".equals(sb)){
+return ;
+}
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:34:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
+if("&null".equals(sb)){
+return ;
+}
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:34:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+if(sb.equals("DATETIME")){
+return ;
+}
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:35:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
 }
+if(sb.equals("DATETIME")){
+return ;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:35:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+if(sb.equals("DATETIME")){
+return ;
+}
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:35:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
+if(sb.equals("DATETIME")){
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:35:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+if(sb.equals("DATETIME")){
+return ;
+}
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:35:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+if(sb.equals("DATETIME")){
+return ;
+}
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:35:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
+if(sb.equals("DATETIME")){
+return ;
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:35:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+if(sb.equals("DATETIME")){
+return ;
+}
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:35:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:36:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:36:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:36:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
+ final FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:36:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:36:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:36:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:36:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:37:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:37:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:37:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:37:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString.isEmpty()){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7829/pattern-ver1-serial/app.src.main.java.de.tum.in.tumcampusapp.activities.TransportationDetailsActivity.java-onLoadInBackground.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:37:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:37:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:37:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
+ final FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:37:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:38:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append(Token.name(type).trim());
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:38:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+sb.append("]");
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:38:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append("]");
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:38:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+sb.append("]");
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:38:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append("]");
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:38:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ @SuppressWarnings("UnusedAssignment") int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ @SuppressWarnings("UnusedAssignment") PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ @SuppressWarnings("UnusedAssignment") ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ @SuppressWarnings("UnusedAssignment") int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:38:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
+ @SuppressWarnings("UnusedAssignment") FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ @SuppressWarnings("UnusedAssignment") int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:39:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ @SuppressWarnings("UnusedAssignment") int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ @SuppressWarnings("UnusedAssignment") String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:39:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ @SuppressWarnings("UnusedAssignment") ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ @SuppressWarnings("UnusedAssignment") PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:39:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ @SuppressWarnings("UnusedAssignment") int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ @SuppressWarnings("UnusedAssignment") String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:39:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ @SuppressWarnings("UnusedAssignment") PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ @SuppressWarnings("UnusedAssignment") String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:39:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ @SuppressWarnings("UnusedAssignment") ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ @SuppressWarnings("UnusedAssignment") String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:39:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type+type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:39:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+ final int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:40:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
+if(keys.equals("")){
+return ;
+}
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:40:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(sof.equals("")){
+return ;
+}
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:40:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+if(i==4){
+continue;
+}
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:40:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(true){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:40:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
+if(true){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:40:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(true){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:40:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append("Error, "+getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4103/pattern-ver1-serial/src.recommendations.nodes.Product.java-Product.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:41:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append("Error, "+first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4103/pattern-ver1-serial/src.recommendations.nodes.Product.java-Product.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:41:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
+if(type<0){
+return ;
+}
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:41:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append("https://myschool.ru.is/myschool/"+Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:41:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append("https://myschool.ru.is/myschool/"+first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:41:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append("https://myschool.ru.is/myschool/"+getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:41:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append("https://myschool.ru.is/myschool/"+getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:41:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
-sb.append(fn.getFunctionName());
+sb.append("https://myschool.ru.is/myschool/"+fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:41:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
-sb.append(sof.getSourceName());
+sb.append("https://myschool.ru.is/myschool/"+sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:42:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
+sb.append("https://myschool.ru.is/myschool/"+sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:42:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
+sb.append("https://myschool.ru.is/myschool/"+sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:42:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append("https://myschool.ru.is/myschool/"+propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:42:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
+Arrays.sort(keys);
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/5055/pattern-ver1-serial/cli.src.main.java.com.vmware.bdd.cli.commands.ClusterCommands.java-getCluster.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:42:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+Arrays.sort(keys);
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/5055/pattern-ver1-serial/cli.src.main.java.com.vmware.bdd.cli.commands.ClusterCommands.java-getCluster.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:42:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
+if(keys.equals("-1")){
+return ;
+}
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:42:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append(Token.name(type)+" votes");
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2342/pattern-ver1-serial/app.src.main.java.com.example.abhishek.bookshareapp.ui.adapter.BooksAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:43:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append(first.getString()+" votes");
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2342/pattern-ver1-serial/app.src.main.java.com.example.abhishek.bookshareapp.ui.adapter.BooksAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:43:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append(getString()+" votes");
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2342/pattern-ver1-serial/app.src.main.java.com.example.abhishek.bookshareapp.ui.adapter.BooksAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:43:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append(getDouble()+" votes");
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2342/pattern-ver1-serial/app.src.main.java.com.example.abhishek.bookshareapp.ui.adapter.BooksAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:43:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
-sb.append(fn.getFunctionName());
+sb.append(fn.getFunctionName()+" votes");
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2342/pattern-ver1-serial/app.src.main.java.com.example.abhishek.bookshareapp.ui.adapter.BooksAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:43:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
-sb.append(sof.getSourceName());
+sb.append(sof.getSourceName()+" votes");
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2342/pattern-ver1-serial/app.src.main.java.com.example.abhishek.bookshareapp.ui.adapter.BooksAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:43:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
+sb.append(sof.getBaseLineno()+" votes");
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2342/pattern-ver1-serial/app.src.main.java.com.example.abhishek.bookshareapp.ui.adapter.BooksAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:43:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
+sb.append(sof.getEndLineno()+" votes");
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2342/pattern-ver1-serial/app.src.main.java.com.example.abhishek.bookshareapp.ui.adapter.BooksAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:43:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append(propToString(type)+" votes");
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2342/pattern-ver1-serial/app.src.main.java.com.example.abhishek.bookshareapp.ui.adapter.BooksAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:44:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append(getDouble()-1);
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/4594/pattern-ver1-serial/EzSignin.app.src.main.java.signin.ez.ezsignin.MainActivity.java-populateFieldsWithRecord.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:44:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
+sb.append(sof.getBaseLineno()-1);
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/4594/pattern-ver1-serial/EzSignin.app.src.main.java.signin.ez.ezsignin.MainActivity.java-populateFieldsWithRecord.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:44:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
+sb.append(sof.getEndLineno()-1);
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/4594/pattern-ver1-serial/EzSignin.app.src.main.java.signin.ez.ezsignin.MainActivity.java-populateFieldsWithRecord.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:44:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+int a=0;
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:44:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+int a=0;
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:44:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+int a=0;
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:44:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+int a=0;
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:44:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+int a=0;
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:45:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+int a=0;
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:45:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+int a=0;
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:45:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
+int a=0;
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:45:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+int a=0;
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:45:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
+int a=0;
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:45:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append("There was a problem with the call to ManyWho: "+Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1227/pattern-ver1-serial/sdk-core.src.main.java.com.manywho.sdk.RunService.java-executePost.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:45:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append("There was a problem with the call to ManyWho: "+first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1227/pattern-ver1-serial/sdk-core.src.main.java.com.manywho.sdk.RunService.java-executePost.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:46:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append("There was a problem with the call to ManyWho: "+getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1227/pattern-ver1-serial/sdk-core.src.main.java.com.manywho.sdk.RunService.java-executePost.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:46:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append("There was a problem with the call to ManyWho: "+getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1227/pattern-ver1-serial/sdk-core.src.main.java.com.manywho.sdk.RunService.java-executePost.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:46:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
-sb.append(fn.getFunctionName());
+sb.append("There was a problem with the call to ManyWho: "+fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1227/pattern-ver1-serial/sdk-core.src.main.java.com.manywho.sdk.RunService.java-executePost.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:46:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
-sb.append(sof.getSourceName());
+sb.append("There was a problem with the call to ManyWho: "+sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1227/pattern-ver1-serial/sdk-core.src.main.java.com.manywho.sdk.RunService.java-executePost.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:46:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
+sb.append("There was a problem with the call to ManyWho: "+sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1227/pattern-ver1-serial/sdk-core.src.main.java.com.manywho.sdk.RunService.java-executePost.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:46:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
+sb.append("There was a problem with the call to ManyWho: "+sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1227/pattern-ver1-serial/sdk-core.src.main.java.com.manywho.sdk.RunService.java-executePost.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:46:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append("There was a problem with the call to ManyWho: "+propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1227/pattern-ver1-serial/sdk-core.src.main.java.com.manywho.sdk.RunService.java-executePost.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:46:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
-private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean readOnly){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
-if(printType){
+if(!readOnly){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/5595/pattern-ver1-serial/chrl-parent.chrl-vaadin-utils.src.main.java.at.chrl.vaadin.component.generator.GeneratedAbstractField.java-GeneratedAbstractField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:47:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
-private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+private void toString(StringBuilder sb,boolean printSource,boolean readOnly,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
-if(printAnnotations){
+if(!readOnly){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/5595/pattern-ver1-serial/chrl-parent.chrl-vaadin-utils.src.main.java.at.chrl.vaadin.component.generator.GeneratedAbstractField.java-GeneratedAbstractField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:47:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if(sb.equals(printSource)){
+return ;
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:47:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+if(sb.equals(printSource)){
+return ;
+}
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:47:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+String OUTSTRING="";
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:47:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+String OUTSTRING="";
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:47:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+String OUTSTRING="";
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:47:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+String OUTSTRING="";
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:48:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
+String OUTSTRING="";
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:48:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
+String OUTSTRING="";
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:48:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+String OUTSTRING="";
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:48:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+String OUTSTRING="";
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:48:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
+String OUTSTRING="";
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:48:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+String OUTSTRING="";
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:48:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append(getDouble()*1000);
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/3175/pattern-ver1-serial/src.de.fuberlin.wiwiss.d2rq.server.D2RServer.java-describe.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:49:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
+sb.append(sof.getBaseLineno()*1000);
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/3175/pattern-ver1-serial/src.de.fuberlin.wiwiss.d2rq.server.D2RServer.java-describe.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:49:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
+sb.append(sof.getEndLineno()*1000);
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/3175/pattern-ver1-serial/src.de.fuberlin.wiwiss.d2rq.server.D2RServer.java-describe.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:49:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0;i<keys.length;){
+i++;
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:49:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
+}
+if(sof==null){
+return ;
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:49:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
+if(fn==null){
+return ;
+}
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:49:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
+if(sof==null){
+return ;
+}
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:49:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append(Strings.nullToEmpty(Token.name(type)));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:49:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append(Strings.nullToEmpty(first.getString()));
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:50:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append(Strings.nullToEmpty(getString()));
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:50:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
-sb.append(fn.getFunctionName());
+sb.append(Strings.nullToEmpty(fn.getFunctionName()));
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:50:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
-sb.append(sof.getSourceName());
+sb.append(Strings.nullToEmpty(sof.getSourceName()));
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:50:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+int type=5;
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:50:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+int Token=5;
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:50:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+int FUNCTION=5;
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:50:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+int first=5;
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:50:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+int NAME=5;
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:51:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append((Token.name(type)).toLowerCase());
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:51:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(Double.isNaN(type)){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:51:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(Double.isNaN(type)){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:51:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:51:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:51:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:51:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:52:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:52:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:52:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:52:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:52:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:52:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:52:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append(Token.name(Math.abs(type)));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:52:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append(Math.abs(getDouble()));
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:53:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
+sb.append(Math.abs(' '));
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:53:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
+sb.append(Math.abs(sof.getBaseLineno()));
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:53:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
+sb.append(Math.abs(sof.getEndLineno()));
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:53:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
-sb.append(' ');
+sb.append(Math.abs(' '));
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:53:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+int indexSelection=0;
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:53:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+int indexSelection=0;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:53:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+int indexSelection=0;
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:53:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+int indexSelection=0;
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:54:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
+int indexSelection=0;
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:54:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
+int indexSelection=0;
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:54:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+int indexSelection=0;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:54:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+int indexSelection=0;
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:54:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+int indexSelection=0;
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:54:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
+int indexSelection=0;
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:54:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.util.Arrays;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+int type=keys[i-1];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:54:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
 }
+if(sb.equals("setPackMode")){
+return ;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:55:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append("PATH: \n"+Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/1966/pattern-ver1-serial/obdEnergy.src.main.java.com.example.obdenergy.obdenergy.MainActivity.java-onStop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:55:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append("PATH: \n"+first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/1966/pattern-ver1-serial/obdEnergy.src.main.java.com.example.obdenergy.obdenergy.MainActivity.java-onStop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:55:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append("PATH: \n"+getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/1966/pattern-ver1-serial/obdEnergy.src.main.java.com.example.obdenergy.obdenergy.MainActivity.java-onStop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:55:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
-sb.append(fn.getFunctionName());
+sb.append("PATH: \n"+fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/1966/pattern-ver1-serial/obdEnergy.src.main.java.com.example.obdenergy.obdenergy.MainActivity.java-onStop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:55:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
-sb.append(sof.getSourceName());
+sb.append("PATH: \n"+sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/1966/pattern-ver1-serial/obdEnergy.src.main.java.com.example.obdenergy.obdenergy.MainActivity.java-onStop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:55:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append("PATH: \n"+getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/1966/pattern-ver1-serial/obdEnergy.src.main.java.com.example.obdenergy.obdenergy.MainActivity.java-onStop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:55:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
+sb.append("PATH: \n"+sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/1966/pattern-ver1-serial/obdEnergy.src.main.java.com.example.obdenergy.obdenergy.MainActivity.java-onStop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:56:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
+sb.append("PATH: \n"+sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/1966/pattern-ver1-serial/obdEnergy.src.main.java.com.example.obdenergy.obdenergy.MainActivity.java-onStop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:56:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append("PATH: \n"+propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/1966/pattern-ver1-serial/obdEnergy.src.main.java.com.example.obdenergy.obdenergy.MainActivity.java-onStop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:56:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+sb.append(" & ");
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:56:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append(" & ");
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:56:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+sb.append(" & ");
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:56:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append(" & ");
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:56:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+sb.append(" & ");
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:56:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+sb.append(" & ");
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:57:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
+sb.append(" & ");
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:57:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
+sb.append(" & ");
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:57:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
+sb.append(" & ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:57:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append("    }\n");
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:57:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+sb.append("    }\n");
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:57:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append("    }\n");
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:57:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+sb.append("    }\n");
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:58:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
+sb.append("    }\n");
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:58:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
+sb.append("    }\n");
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:58:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("    }\n");
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:58:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append(String.valueOf(Token.name(type)));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/4379/pattern-ver1-serial/src.main.java.st.alr.mqttitude.preferences.PreferencesBroker.java-onBindDialogView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:58:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append(String.valueOf(first.getString()));
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/4379/pattern-ver1-serial/src.main.java.st.alr.mqttitude.preferences.PreferencesBroker.java-onBindDialogView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:58:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append(String.valueOf(getString()));
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/4379/pattern-ver1-serial/src.main.java.st.alr.mqttitude.preferences.PreferencesBroker.java-onBindDialogView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:58:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append(String.valueOf(getDouble()));
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/4379/pattern-ver1-serial/src.main.java.st.alr.mqttitude.preferences.PreferencesBroker.java-onBindDialogView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:58:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
-sb.append(fn.getFunctionName());
+sb.append(String.valueOf(fn.getFunctionName()));
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/4379/pattern-ver1-serial/src.main.java.st.alr.mqttitude.preferences.PreferencesBroker.java-onBindDialogView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:59:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
-sb.append(sof.getSourceName());
+sb.append(String.valueOf(sof.getSourceName()));
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/4379/pattern-ver1-serial/src.main.java.st.alr.mqttitude.preferences.PreferencesBroker.java-onBindDialogView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:59:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
+sb.append(String.valueOf(sof.getBaseLineno()));
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/4379/pattern-ver1-serial/src.main.java.st.alr.mqttitude.preferences.PreferencesBroker.java-onBindDialogView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:59:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
+sb.append(String.valueOf(sof.getEndLineno()));
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/4379/pattern-ver1-serial/src.main.java.st.alr.mqttitude.preferences.PreferencesBroker.java-onBindDialogView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:59:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append(String.valueOf(propToString(type)));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/4379/pattern-ver1-serial/src.main.java.st.alr.mqttitude.preferences.PreferencesBroker.java-onBindDialogView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:59:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
-private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+private void toString(StringBuilder sb,boolean getStorageVolumeAtts,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
-if(printSource){
+if(getStorageVolumeAtts){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
-if(printSource){
+if(getStorageVolumeAtts){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/4721/pattern-ver1-serial/exportLibraries.vplex.src.main.java.com.emc.storageos.vplex.api.VPlexApiDiscoveryManager.java-getStorageVolumeInfoForCluster.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:59:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
+if("Chrome".equals(first)||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/4219/pattern-ver1-serial/src.browsermator.com.STAppController.java-itemStateChanged.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 18:59:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+int a=1;
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:00:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+int a=1;
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:00:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+int a=1;
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:00:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+int a=1;
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:00:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+int a=1;
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:00:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+int a=1;
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:00:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+int a=1;
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:00:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
+int a=1;
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:00:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+int a=1;
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:01:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+int a=1;
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:01:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append(Token.name(type)+"/logout");
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/2012/pattern-ver1-serial/HTTPBank.src.ibm.controller.UserInfoChanger.java-doGet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:01:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append(first.getString()+"/logout");
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/2012/pattern-ver1-serial/HTTPBank.src.ibm.controller.UserInfoChanger.java-doGet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:01:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append(getString()+"/logout");
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/2012/pattern-ver1-serial/HTTPBank.src.ibm.controller.UserInfoChanger.java-doGet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:01:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append(getDouble()+"/logout");
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/2012/pattern-ver1-serial/HTTPBank.src.ibm.controller.UserInfoChanger.java-doGet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:01:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
-sb.append(fn.getFunctionName());
+sb.append(fn.getFunctionName()+"/logout");
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/2012/pattern-ver1-serial/HTTPBank.src.ibm.controller.UserInfoChanger.java-doGet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:01:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
-sb.append(sof.getSourceName());
+sb.append(sof.getSourceName()+"/logout");
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/2012/pattern-ver1-serial/HTTPBank.src.ibm.controller.UserInfoChanger.java-doGet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:01:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
+sb.append(sof.getBaseLineno()+"/logout");
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/2012/pattern-ver1-serial/HTTPBank.src.ibm.controller.UserInfoChanger.java-doGet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:01:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
+sb.append(sof.getEndLineno()+"/logout");
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/2012/pattern-ver1-serial/HTTPBank.src.ibm.controller.UserInfoChanger.java-doGet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:02:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append(propToString(type)+"/logout");
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/2012/pattern-ver1-serial/HTTPBank.src.ibm.controller.UserInfoChanger.java-doGet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:02:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append("\nDealer has: \n"+Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4064/pattern-ver1-serial/src.run.java-dealerScore.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:02:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append("\nDealer has: \n"+first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4064/pattern-ver1-serial/src.run.java-dealerScore.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:02:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append("\nDealer has: \n"+getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4064/pattern-ver1-serial/src.run.java-dealerScore.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:02:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
-sb.append(fn.getFunctionName());
+sb.append("\nDealer has: \n"+fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4064/pattern-ver1-serial/src.run.java-dealerScore.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:02:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
-sb.append(sof.getSourceName());
+sb.append("\nDealer has: \n"+sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4064/pattern-ver1-serial/src.run.java-dealerScore.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:02:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append("\nDealer has: \n"+getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4064/pattern-ver1-serial/src.run.java-dealerScore.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:02:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
+sb.append("\nDealer has: \n"+sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4064/pattern-ver1-serial/src.run.java-dealerScore.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:03:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
+sb.append("\nDealer has: \n"+sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4064/pattern-ver1-serial/src.run.java-dealerScore.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:03:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append("\nDealer has: \n"+propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4064/pattern-ver1-serial/src.run.java-dealerScore.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:03:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+String FUNCTION="%#.&f";
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:03:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+String NAME="%#.&f";
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+boolean NUMBER=true;
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:03:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+boolean NAME=true;
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:03:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+boolean FUNCTION=true;
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:03:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+boolean Token=true;
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:04:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+String value;
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/7341/pattern-ver1-serial/src.datamanagement.UnitManager.java-createUnit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:04:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+String value;
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/7341/pattern-ver1-serial/src.datamanagement.UnitManager.java-createUnit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:04:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+String value;
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/7341/pattern-ver1-serial/src.datamanagement.UnitManager.java-createUnit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:04:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+String value;
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/7341/pattern-ver1-serial/src.datamanagement.UnitManager.java-createUnit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:04:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+String value;
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/7341/pattern-ver1-serial/src.datamanagement.UnitManager.java-createUnit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:04:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+String value;
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/7341/pattern-ver1-serial/src.datamanagement.UnitManager.java-createUnit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:04:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
+String value;
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/7341/pattern-ver1-serial/src.datamanagement.UnitManager.java-createUnit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:05:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+String value;
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/7341/pattern-ver1-serial/src.datamanagement.UnitManager.java-createUnit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:05:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
+String value;
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/7341/pattern-ver1-serial/src.datamanagement.UnitManager.java-createUnit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:05:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append(sof.getEncodedSourceEnd()/2-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/384/pattern-ver1-serial/src.com.gmail.zhou1992228.building.BuildingEntity.java-getMidPos.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:05:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+boolean b=true;
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:05:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+boolean b=true;
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:05:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+boolean b=true;
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:05:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+boolean b=true;
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:06:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+boolean b=true;
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:06:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
+boolean b=true;
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:06:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+boolean b=true;
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:06:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+boolean b=true;
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:06:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
+boolean b=true;
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:06:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
+boolean b=true;
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:06:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
-value=x.toString();
+value=x.toString()+1;
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5032/pattern-ver1-serial/mapreduce.src.contrib.streaming.src.java.org.wikimedia.wikihadoop.StreamWikiDumpInputFormat.java-MyRecordReader.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:06:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString!=null||jsTypeString.isEmpty()){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/354/pattern-ver1-serial/hapi-fhir-base.src.main.java.ca.uhn.fhir.parser.XmlParser.java-encodeCompositeElementChildrenToStreamWriter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:07:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+sb.append(' ');
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:07:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+sb.append("<invalid>");
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:07:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+sb.append(" [source name: ");
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:07:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+sb.append("] [encoded source length: ");
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:07:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+sb.append("] [base line: ");
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:07:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+sb.append("] [end line: ");
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:07:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+sb.append(']');
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:07:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+sb.append(getDouble());
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:08:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+sb.append(' ');
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:08:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+sb.append(' ');
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:08:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+sb.append(' ');
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:08:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:08:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+sb.append(' ');
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:08:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
+sb.append(' ');
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:08:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+sb.append(' ');
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:08:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+sb.append(' ');
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:09:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+sb.append(' ');
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:09:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+sb.append(' ');
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:09:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append(' ');
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:09:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append("<invalid>");
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:09:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append(" [source name: ");
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:09:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append("] [encoded source length: ");
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:09:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append("] [base line: ");
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:09:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append("] [end line: ");
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:10:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append(']');
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:10:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append(getDouble());
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:10:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+sb.append(' ');
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:10:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+sb.append("<invalid>");
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:10:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+sb.append(" [source name: ");
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:10:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+sb.append("] [encoded source length: ");
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:10:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+sb.append("] [base line: ");
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:10:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+sb.append("] [end line: ");
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:11:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+sb.append(lineno);
 if(lineno!=-1){
 sb.append(' ');
-sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:11:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append(' ');
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:11:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
+sb.append(' ');
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:11:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
+sb.append(' ');
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:11:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
+sb.append(' ');
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:11:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
+sb.append(' ');
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:11:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
 sb.append(' ');
+if(type==Token.FUNCTION){
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:11:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
+sb.append(' ');
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:12:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+sb.append(' ');
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:12:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+sb.append("<invalid>");
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:12:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+sb.append(" [source name: ");
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:12:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+sb.append("] [encoded source length: ");
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:12:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+sb.append("] [base line: ");
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:12:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+sb.append("] [end line: ");
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:12:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+sb.append(']');
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:12:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+if(!getString().equals("")){
 sb.append(getString());
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:13:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+if(!first.getString().equals("")){
 sb.append(first.getString());
+}
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:13:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+sb.append(' ');
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:13:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+sb.append(' ');
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:13:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
+sb.append(' ');
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:13:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+sb.append(' ');
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:13:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
+sb.append(' ');
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:13:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type==Token.FUNCTION||type==Long.MIN_VALUE){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:14:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno!=-1||lineno==Long.MIN_VALUE){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:14:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append("<invalid>");
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:14:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
-if(this instanceof StringNode){
 sb.append(' ');
+if(this instanceof StringNode){
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:14:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
-sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
+sb.append(' ');
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:14:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
+sb.append(getString());
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:14:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
+sb.append(getString());
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:14:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+sb.append(' ');
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:14:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+sb.append("<invalid>");
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:15:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+sb.append(" [source name: ");
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:15:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+sb.append("] [encoded source length: ");
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:15:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+sb.append("] [base line: ");
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:15:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+sb.append("] [end line: ");
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:15:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+sb.append(']');
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:15:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
-value=x.toString();
+value=x.toString().replaceAll("\n","");
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:15:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
-value="target block property";
+value="target block property".replaceAll("\n","");
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:16:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
-value="last local block";
+value="last local block".replaceAll("\n","");
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:16:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
-value="both";
+value="both".replaceAll("\n","");
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:16:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
-value="right";
+value="right".replaceAll("\n","");
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:16:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
-value="left";
+value="left".replaceAll("\n","");
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:16:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
-value="eval";
+value="eval".replaceAll("\n","");
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:16:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
-value="with";
+value="with".replaceAll("\n","");
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:16:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
-value=x.toString();
+value=(x.toString()).replace("\\","\\\\");
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:17:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
-value="target block property";
+value=("target block property").replace("\\","\\\\");
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:17:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
-value="last local block";
+value=("last local block").replace("\\","\\\\");
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:17:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
-value="both";
+value=("both").replace("\\","\\\\");
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:17:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
-value="right";
+value=("right").replace("\\","\\\\");
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:17:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
-value="left";
+value=("left").replace("\\","\\\\");
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:17:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
-value="eval";
+value=("eval").replace("\\","\\\\");
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:17:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
-value="with";
+value=("with").replace("\\","\\\\");
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:18:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append(getDouble()*-1);
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1084/pattern-ver1-serial/Bank.src.entities.Account.java-returnLoan.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:18:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
+sb.append(sof.getBaseLineno()*-1);
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1084/pattern-ver1-serial/Bank.src.entities.Account.java-returnLoan.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:18:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
+sb.append(sof.getEndLineno()*-1);
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1084/pattern-ver1-serial/Bank.src.entities.Account.java-returnLoan.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:18:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.text.ParseException;
+
+import java.math.BigDecimal;
+
+import java.text.NumberFormat;
+
+import java.math.RoundingMode;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append(new BigDecimal(Token.name(type)).setScale(2,RoundingMode.HALF_UP));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/120/pattern-ver1-serial/src.main.java.sk.janobono.habox.sql.util.ItemsHelper.java-getItems.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:18:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.text.ParseException;
+
+import java.math.BigDecimal;
+
+import java.text.NumberFormat;
+
+import java.math.RoundingMode;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append(new BigDecimal(getDouble()).setScale(2,RoundingMode.HALF_UP));
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/120/pattern-ver1-serial/src.main.java.sk.janobono.habox.sql.util.ItemsHelper.java-getItems.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:18:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.text.ParseException;
+
+import java.math.BigDecimal;
+
+import java.text.NumberFormat;
+
+import java.math.RoundingMode;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append(new BigDecimal(first.getString()).setScale(2,RoundingMode.HALF_UP));
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/120/pattern-ver1-serial/src.main.java.sk.janobono.habox.sql.util.ItemsHelper.java-getItems.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:18:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.text.ParseException;
+
+import java.math.BigDecimal;
+
+import java.text.NumberFormat;
+
+import java.math.RoundingMode;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append(new BigDecimal(getString()).setScale(2,RoundingMode.HALF_UP));
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/120/pattern-ver1-serial/src.main.java.sk.janobono.habox.sql.util.ItemsHelper.java-getItems.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:18:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.text.ParseException;
+
+import java.math.BigDecimal;
+
+import java.text.NumberFormat;
+
+import java.math.RoundingMode;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
-sb.append(fn.getFunctionName());
+sb.append(new BigDecimal(fn.getFunctionName()).setScale(2,RoundingMode.HALF_UP));
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/120/pattern-ver1-serial/src.main.java.sk.janobono.habox.sql.util.ItemsHelper.java-getItems.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:19:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.text.ParseException;
+
+import java.math.BigDecimal;
+
+import java.text.NumberFormat;
+
+import java.math.RoundingMode;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
-sb.append(sof.getSourceName());
+sb.append(new BigDecimal(sof.getSourceName()).setScale(2,RoundingMode.HALF_UP));
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/120/pattern-ver1-serial/src.main.java.sk.janobono.habox.sql.util.ItemsHelper.java-getItems.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:19:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.text.ParseException;
+
+import java.math.BigDecimal;
+
+import java.text.NumberFormat;
+
+import java.math.RoundingMode;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
+sb.append(new BigDecimal(sof.getBaseLineno()).setScale(2,RoundingMode.HALF_UP));
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/120/pattern-ver1-serial/src.main.java.sk.janobono.habox.sql.util.ItemsHelper.java-getItems.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:19:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.text.ParseException;
+
+import java.math.BigDecimal;
+
+import java.text.NumberFormat;
+
+import java.math.RoundingMode;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
+sb.append(new BigDecimal(sof.getEndLineno()).setScale(2,RoundingMode.HALF_UP));
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/120/pattern-ver1-serial/src.main.java.sk.janobono.habox.sql.util.ItemsHelper.java-getItems.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:19:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.text.ParseException;
+
+import java.math.BigDecimal;
+
+import java.text.NumberFormat;
+
+import java.math.RoundingMode;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append(new BigDecimal(propToString(type)).setScale(2,RoundingMode.HALF_UP));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/120/pattern-ver1-serial/src.main.java.sk.janobono.habox.sql.util.ItemsHelper.java-getItems.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:19:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append(' ');
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:19:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append(" [source name: ");
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:19:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append("] [encoded source length: ");
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:19:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append("] [base line: ");
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:20:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append("] [end line: ");
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:20:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
-sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append(" [source name: ");
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:20:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+sb.append(' ');
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:20:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
+sb.append("<invalid>");
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5076/pattern-ver1-serial/src.main.java.org.jsweet.transpiler.StaticInitilializerAnalyzer.java-visitClassDef.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:20:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
+sb.append(" [source name: ");
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5076/pattern-ver1-serial/src.main.java.org.jsweet.transpiler.StaticInitilializerAnalyzer.java-visitClassDef.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:20:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
+sb.append("] [encoded source length: ");
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5076/pattern-ver1-serial/src.main.java.org.jsweet.transpiler.StaticInitilializerAnalyzer.java-visitClassDef.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:20:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
+sb.append("] [base line: ");
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5076/pattern-ver1-serial/src.main.java.org.jsweet.transpiler.StaticInitilializerAnalyzer.java-visitClassDef.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:20:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
+sb.append("] [end line: ");
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5076/pattern-ver1-serial/src.main.java.org.jsweet.transpiler.StaticInitilializerAnalyzer.java-visitClassDef.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:21:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
+sb.append(']');
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5076/pattern-ver1-serial/src.main.java.org.jsweet.transpiler.StaticInitilializerAnalyzer.java-visitClassDef.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:21:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+assert (sb!=null);
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:21:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+assert (sb!=null);
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:21:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+assert (sb!=null);
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:21:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+assert (sb!=null);
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:21:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+assert (sb!=null);
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:21:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+assert (sb!=null);
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:21:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
+assert (sb!=null);
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:22:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
+assert (sb!=null);
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:22:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+assert (sb!=null);
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:22:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
+assert (sb!=null);
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:22:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+try{
 sb.append(' ');
+}finally{
 sb.append(getString());
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:22:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
-sb.append(' ');
+try{
 sb.append(getString());
+}finally{
+sb.append(' ');
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:22:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append(Token.name(type).subSequence(0,6));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/5102/pattern-ver1-serial/CloudStarProject.CloudStar.src.main.java.com.cloudstar.util.ResultViewBuilder.java-getResultFilesAndDirectoriesView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:22:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append(first.getString().subSequence(0,6));
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/5102/pattern-ver1-serial/CloudStarProject.CloudStar.src.main.java.com.cloudstar.util.ResultViewBuilder.java-getResultFilesAndDirectoriesView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:23:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append(getString().subSequence(0,6));
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/5102/pattern-ver1-serial/CloudStarProject.CloudStar.src.main.java.com.cloudstar.util.ResultViewBuilder.java-getResultFilesAndDirectoriesView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:23:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
-sb.append(fn.getFunctionName());
+sb.append(fn.getFunctionName().subSequence(0,6));
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/5102/pattern-ver1-serial/CloudStarProject.CloudStar.src.main.java.com.cloudstar.util.ResultViewBuilder.java-getResultFilesAndDirectoriesView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:23:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
-sb.append(sof.getSourceName());
+sb.append(sof.getSourceName().subSequence(0,6));
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/5102/pattern-ver1-serial/CloudStarProject.CloudStar.src.main.java.com.cloudstar.util.ResultViewBuilder.java-getResultFilesAndDirectoriesView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:23:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append(propToString(type).subSequence(0,6));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/5102/pattern-ver1-serial/CloudStarProject.CloudStar.src.main.java.com.cloudstar.util.ResultViewBuilder.java-getResultFilesAndDirectoriesView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:23:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append("<invalid>");
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/5438/pattern-ver1-serial/cg.VertexSetComponent.java-add.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:23:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
+if(sb!=null){
+sb.append(Token.name(type));
+if(this instanceof StringNode){
+sb.append(' ');
+sb.append(getString());
+}else {
+if(type==Token.FUNCTION){
+sb.append(' ');
+if(first==null||first.getType()!=Token.NAME){
+sb.append("<invalid>");
+}else {
+sb.append(first.getString());
+}
+}else {
+if(this instanceof ScriptOrFnNode){
+ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
+}
+}else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
+}
+}
+}
+}
+if(printSource){
+int lineno=getLineno();
+if(lineno!=-1){
+sb.append(' ');
+sb.append(lineno);
+}
+}
+if(printAnnotations){
+int[] keys=getSortedPropTypes();
+for(int i=0;i<keys.length;i++){
+int type=keys[i];
+PropListItem x=lookupProperty(type);
+sb.append(" [");
+sb.append(propToString(type));
+sb.append(": ");
+String value;
+switch (type){
+case TARGETBLOCK_PROP :
+
+value="target block property";
+break;
+case LOCAL_BLOCK_PROP :
+
+value="last local block";
+break;
+case ISNUMBER_PROP :
+
+switch (x.getIntValue()){
+case BOTH :
+
+value="both";
+break;
+case RIGHT :
+
+value="right";
+break;
+case LEFT :
+
+value="left";
+break;
+default :
+
+throw Kit.codeBug();
+}
+break;
+case SPECIALCALL_PROP :
+
+switch (x.getIntValue()){
+case SPECIALCALL_EVAL :
+
+value="eval";
+break;
+case SPECIALCALL_WITH :
+
+value="with";
+break;
+default :
+
+throw Kit.codeBug();
+}
+break;
+default :
+
+value=x.toString();
+break;
+}
+sb.append(value);
+sb.append(']');
+}
+}
+if(printType){
+if(jsType!=null){
+String jsTypeString=jsType.toString();
+if(jsTypeString!=null){
+sb.append(" : ");
+sb.append(jsTypeString);
+}
+}
+}
+}
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:23:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+if(sb!=null){
+if(Token.printTrees){
+sb.append(Token.name(type));
+if(this instanceof StringNode){
+sb.append(' ');
+sb.append(getString());
+}else {
+if(type==Token.FUNCTION){
+sb.append(' ');
+if(first==null||first.getType()!=Token.NAME){
+sb.append("<invalid>");
+}else {
+sb.append(first.getString());
+}
+}else {
+if(this instanceof ScriptOrFnNode){
+ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
+}
+}else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
+}
+}
+}
+}
+if(printSource){
+int lineno=getLineno();
+if(lineno!=-1){
+sb.append(' ');
+sb.append(lineno);
+}
+}
+if(printAnnotations){
+int[] keys=getSortedPropTypes();
+for(int i=0;i<keys.length;i++){
+int type=keys[i];
+PropListItem x=lookupProperty(type);
+sb.append(" [");
+sb.append(propToString(type));
+sb.append(": ");
+String value;
+switch (type){
+case TARGETBLOCK_PROP :
+
+value="target block property";
+break;
+case LOCAL_BLOCK_PROP :
+
+value="last local block";
+break;
+case ISNUMBER_PROP :
+
+switch (x.getIntValue()){
+case BOTH :
+
+value="both";
+break;
+case RIGHT :
+
+value="right";
+break;
+case LEFT :
+
+value="left";
+break;
+default :
+
+throw Kit.codeBug();
+}
+break;
+case SPECIALCALL_PROP :
+
+switch (x.getIntValue()){
+case SPECIALCALL_EVAL :
+
+value="eval";
+break;
+case SPECIALCALL_WITH :
+
+value="with";
+break;
+default :
+
+throw Kit.codeBug();
+}
+break;
+default :
+
+value=x.toString();
+break;
+}
+sb.append(value);
+sb.append(']');
+}
+}
+if(printType){
+if(jsType!=null){
+String jsTypeString=jsType.toString();
+if(jsTypeString!=null){
+sb.append(" : ");
+sb.append(jsTypeString);
+}
+}
+}
+}
+}
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:23:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(sb!=null){
+sb.append(' ');
+sb.append(getString());
+}
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:24:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+}else {
+if(sb!=null){
+if(type==Token.FUNCTION){
+sb.append(' ');
+if(first==null||first.getType()!=Token.NAME){
+sb.append("<invalid>");
+}else {
+sb.append(first.getString());
+}
+}else {
+if(this instanceof ScriptOrFnNode){
+ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
+}
 }else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
+}
+}
+}
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:24:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if(sb!=null){
+sb.append(' ');
+if(first==null||first.getType()!=Token.NAME){
+sb.append("<invalid>");
+}else {
+sb.append(first.getString());
+}
+}
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:24:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+if(sb!=null){
+sb.append(first.getString());
+}
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:24:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+}
+}else {
+if(sb!=null){
+if(this instanceof ScriptOrFnNode){
+ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
 }
 }else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
+}
+}
+}
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:24:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+sb.append(' ');
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/442/pattern-ver1-serial/homework-g597-dmitrieva.src.main.java.ru.mipt.java2016.homework.g597.dmitrieva.task1.StackCalculator.java-toReversedPolish.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 3, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:24:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+sb.append(' ');
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/442/pattern-ver1-serial/homework-g597-dmitrieva.src.main.java.ru.mipt.java2016.homework.g597.dmitrieva.task1.StackCalculator.java-toReversedPolish.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 3, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:24:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+sb.append(' ');
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/442/pattern-ver1-serial/homework-g597-dmitrieva.src.main.java.ru.mipt.java2016.homework.g597.dmitrieva.task1.StackCalculator.java-toReversedPolish.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 3, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:24:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
+sb.append(' ');
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/442/pattern-ver1-serial/homework-g597-dmitrieva.src.main.java.ru.mipt.java2016.homework.g597.dmitrieva.task1.StackCalculator.java-toReversedPolish.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 3, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:24:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+assert (sof!=(ScriptOrFnNode)this);
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:25:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+assert (lineno!=getLineno());
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:25:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if(sb.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:25:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(sb.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:25:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+if(sb.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:25:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if(sb.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:25:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
+if(sb.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:25:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+if(sb.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:25:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+if(sb.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:26:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
+if(sb.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:26:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+if(sb.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:26:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
+if(sb.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:26:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append(getString().replace("\\n","\n"));
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/3956/pattern-ver1-serial/Barlift.app.src.main.java.com.barliftapp.barlift.fragment.DealFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:26:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append(first.getString().replace("\\n","\n"));
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/3956/pattern-ver1-serial/Barlift.app.src.main.java.com.barliftapp.barlift.fragment.DealFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:26:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
+}
+if(value.isEmpty()){
+System.out.println("Team has to have a name");
+return ;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:26:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+sb.append(' ');
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:26:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+sb.append("<invalid>");
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:26:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+sb.append(lineno);
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/3316/pattern-ver1-serial/core.src.main.java.org.ehcache.spi.ServiceLocator.java-startAllServices.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:27:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+sb.append(lineno);
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/3316/pattern-ver1-serial/core.src.main.java.org.ehcache.spi.ServiceLocator.java-startAllServices.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:27:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+sb.append(jsTypeString);
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/3316/pattern-ver1-serial/core.src.main.java.org.ehcache.spi.ServiceLocator.java-startAllServices.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:27:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+sb.append(jsTypeString);
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/3316/pattern-ver1-serial/core.src.main.java.org.ehcache.spi.ServiceLocator.java-startAllServices.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:27:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+assert (sb!=null);
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:27:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+assert (sb!=null);
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:27:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+assert (sb!=null);
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:27:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+assert (sb!=null);
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:27:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+assert (sb!=null);
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:27:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+assert (sb!=null);
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:28:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+assert (sb!=null);
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:28:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+assert (sb!=null);
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:28:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+assert (sb!=null);
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:28:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
+assert (sb!=null);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:28:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString!=null||"查看红包".equals(jsTypeString)){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:28:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
+if(jsType!=null||"查看红包".equals(jsType)){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:28:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type==Token.FUNCTION||"查看红包".equals(type)){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:29:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type==Token.FUNCTION||type==3){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:29:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno!=-1||lineno==3){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:29:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+sb.append(first.getString());
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:29:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+sb.append(first.getString());
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:29:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append(first.getString());
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:29:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
+sb.append(first.getString());
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/293/pattern-ver1-serial/common.ganymedes01.aobd.recipes.RecipesHandler.java-craftingRecipes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:29:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+sb.append(first.getString());
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/293/pattern-ver1-serial/common.ganymedes01.aobd.recipes.RecipesHandler.java-craftingRecipes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:29:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+sb.append(first.getString());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/293/pattern-ver1-serial/common.ganymedes01.aobd.recipes.RecipesHandler.java-craftingRecipes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:30:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString!=null||jsTypeString==""){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/7341/pattern-ver1-serial/log210_webproject_BDD.src.RechercheLivre.java-RechercheLivre.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:30:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type<0||type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:30:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type<0||type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:30:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno<0||lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:30:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+sb.append(first.getString());
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:30:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+sb.append(first.getString());
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:30:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+sb.append(first.getString());
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+sb.append(first.getString());
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/2664/pattern-ver1-serial/src.main.java.micdoodle8.mods.galacticraft.planets.asteroids.entities.EntityGrapple.java-EntityGrapple.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:31:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+sb.append(first.getString());
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:31:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
+sb.append(sof.getSourceName());
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:31:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
+sb.append(sof.getBaseLineno());
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:31:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
+sb.append(sof.getEndLineno());
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:31:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+sb.append(sof.getSourceName());
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:31:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+sb.append(sof.getBaseLineno());
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:31:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+sb.append(first.getString());
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:31:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
+sb.append(first.getString());
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:32:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+sb.append(first.getString());
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:32:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
+sb.append(first.getString());
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:32:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+sb.append(first.getString());
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:32:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append(first.getString());
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:32:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:32:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart()+" votes");
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2342/pattern-ver1-serial/app.src.main.java.com.example.abhishek.bookshareapp.ui.adapter.BooksAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:32:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart()-1);
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/4594/pattern-ver1-serial/EzSignin.app.src.main.java.signin.ez.ezsignin.MainActivity.java-populateFieldsWithRecord.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:32:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append(first.getString());
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:33:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type==Token.FUNCTION||type==0){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:33:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart()*-1);
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1084/pattern-ver1-serial/Bank.src.entities.Account.java-returnLoan.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:33:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
+sb.append(first.getString());
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/5024/pattern-ver1-serial/src.org.exist.collections.Collection.java-getDocumentWithLock.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:33:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+sb.append(first.getString());
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/5024/pattern-ver1-serial/src.org.exist.collections.Collection.java-getDocumentWithLock.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:33:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
 }
+if(sb.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:33:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+if(sb.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:33:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+}
+if(sb.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:33:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
+if(sb.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:34:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
+}
+if(sb.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:34:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+if(sb.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:34:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
+if(sb.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:34:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import java.text.ParseException;
+
+import java.math.BigDecimal;
+
+import java.text.NumberFormat;
+
+import java.math.RoundingMode;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append(new BigDecimal(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart()).setScale(2,RoundingMode.HALF_UP));
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/120/pattern-ver1-serial/src.main.java.sk.janobono.habox.sql.util.ItemsHelper.java-getItems.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:34:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type==Token.FUNCTION||type>9){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:34:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno!=-1||lineno>9){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:34:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append(Token.name(type)+" -u "+sb);
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:34:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append(Token.name(type)+" -u "+printSource);
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:35:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append(Token.name(type)+" -u "+printAnnotations);
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:35:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append(Token.name(type)+" -u "+printType);
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:35:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+sb.append(first.getString());
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/5159/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ecms.ContextMenu.java-lockNode.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:35:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+sb.append(first.getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:35:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:35:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:35:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:36:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:36:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:36:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:36:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:36:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:36:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:36:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:36:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart()*1000);
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/3175/pattern-ver1-serial/src.de.fuberlin.wiwiss.d2rq.server.D2RServer.java-describe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:37:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append((int)(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart()));
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:37:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type==Token.FUNCTION&&type<4000000){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:37:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno!=-1&&lineno<4000000){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:37:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString!=null||jsTypeString.trim().isEmpty()){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1097/pattern-ver1-serial/src.bakatxt.core.BakaProcessor.java-editEndTime.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:37:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append(first==null?null:first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/4299/pattern-ver1-serial/client.synapseJavaClient.src.main.java.org.sagebionetworks.client.SynapseClientImpl.java-uploadToS3FileHandle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:37:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
-sb.append(fn.getFunctionName());
+sb.append(fn==null?null:fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/4299/pattern-ver1-serial/client.synapseJavaClient.src.main.java.org.sagebionetworks.client.SynapseClientImpl.java-uploadToS3FileHandle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:37:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
-sb.append(sof.getSourceName());
+sb.append(sof==null?null:sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/4299/pattern-ver1-serial/client.synapseJavaClient.src.main.java.org.sagebionetworks.client.SynapseClientImpl.java-uploadToS3FileHandle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:37:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
+sb.append(sof==null?null:sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/4299/pattern-ver1-serial/client.synapseJavaClient.src.main.java.org.sagebionetworks.client.SynapseClientImpl.java-uploadToS3FileHandle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:38:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
+sb.append(sof==null?null:sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/4299/pattern-ver1-serial/client.synapseJavaClient.src.main.java.org.sagebionetworks.client.SynapseClientImpl.java-uploadToS3FileHandle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:38:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type==Token.FUNCTION&&type!=9999){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:38:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno!=-1&&lineno!=9999){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:38:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(Token.FUNCTION>0&&type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:38:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(Token.NUMBER>0&&type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:38:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append(Math.abs(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart()));
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:38:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append(first!=null?first.getString():null);
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/4302/pattern-ver1-serial/src.com.floreantpos.model.KitchenTicket.java-fromTicket.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:38:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
-sb.append(fn.getFunctionName());
+sb.append(fn!=null?fn.getFunctionName():null);
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/4302/pattern-ver1-serial/src.com.floreantpos.model.KitchenTicket.java-fromTicket.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:38:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
-sb.append(sof.getSourceName());
+sb.append(sof!=null?sof.getSourceName():null);
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/4302/pattern-ver1-serial/src.com.floreantpos.model.KitchenTicket.java-fromTicket.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:39:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
+sb.append(sof!=null?sof.getBaseLineno():null);
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/4302/pattern-ver1-serial/src.com.floreantpos.model.KitchenTicket.java-fromTicket.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:39:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+FunctionNode fn=(FunctionNode)this;
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/1113/pattern-ver1-serial/src.main.java.org.encog.neural.neat.training.NEATTraining.java-crossover.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:39:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+ScriptOrFnNode sof=(ScriptOrFnNode)this;
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/1113/pattern-ver1-serial/src.main.java.org.encog.neural.neat.training.NEATTraining.java-crossover.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:39:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+FunctionNode fn=(FunctionNode)this;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/1113/pattern-ver1-serial/src.main.java.org.encog.neural.neat.training.NEATTraining.java-crossover.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:39:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:39:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:39:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:39:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:40:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:40:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:40:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:40:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:40:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:40:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:40:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append(String.valueOf(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart()));
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/4379/pattern-ver1-serial/src.main.java.st.alr.mqttitude.preferences.PreferencesBroker.java-onBindDialogView.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:40:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+sb.append(fn.getFunctionName());
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4888/pattern-ver1-serial/core.src.main.java.com.digitalpebble.storm.crawler.bolt.JSoupParserBolt.java-toOutlinks.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:41:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart()+"/logout");
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/2012/pattern-ver1-serial/HTTPBank.src.ibm.controller.UserInfoChanger.java-doGet.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:41:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+sb.append(first.getString());
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:41:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+assert (sb!=null):"Appointments day is not allowed to be null!";
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:41:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+assert (sb!=null):"Appointments day is not allowed to be null!";
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:41:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+assert (sb!=null):"Appointments day is not allowed to be null!";
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:41:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+assert (sb!=null):"Appointments day is not allowed to be null!";
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:41:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+assert (sb!=null):"Appointments day is not allowed to be null!";
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:41:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+assert (sb!=null):"Appointments day is not allowed to be null!";
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:42:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+assert (sb!=null):"Appointments day is not allowed to be null!";
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:42:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
+assert (sb!=null):"Appointments day is not allowed to be null!";
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:42:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
+assert (sb!=null):"Appointments day is not allowed to be null!";
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:42:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
+assert (sb!=null):"Appointments day is not allowed to be null!";
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:42:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
+PropListItem x=lookupProperty(type);
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/2202/pattern-ver1-serial/fhirmapper.src.main.java.org.openmrs.module.fhir.mapper.bundler.ProcedureMapper.java-setDiagnosisToDiagnosticReport.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:42:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
+PropListItem x=lookupProperty(type);
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/2202/pattern-ver1-serial/fhirmapper.src.main.java.org.openmrs.module.fhir.mapper.bundler.ProcedureMapper.java-setDiagnosisToDiagnosticReport.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:42:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+sb.append(sof.getEndLineno());
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3760/pattern-ver1-serial/src.AlienEntryApplication.java-main.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:42:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+synchronized(this){
 sb.append(' ');
 sb.append(getString());
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:43:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+synchronized(this){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:43:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+synchronized(this){
 sb.append(' ');
 sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:43:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(sb==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:43:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+if(sb==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:43:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if(sb==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:43:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+if(first==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:43:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+if(sb==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:43:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if("<invalid>"==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:44:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
+sb.append(Token.name(type));
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:44:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+sb.append(Token.name(type));
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:44:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append(Token.name(type));
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:44:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append(Token.name(type));
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:44:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+sb.append(Token.name(type));
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:44:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+sb.append(Token.name(type));
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:44:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+sb.append(Token.name(type));
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:44:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+sb.append(Token.name(type));
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:45:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+sb.append(Token.name(type));
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:45:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+sb.append(Token.name(type));
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:45:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+sb.append(Token.name(type));
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:45:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
+sb.append(Token.name(type));
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:45:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
-if(Token.printTrees){
 sb.append(Token.name(type));
+if(Token.printTrees){
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:45:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+sb.append(Token.name(type));
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:45:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+sb.append(" (");
 sb.append(getString());
+sb.append(") ");
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:45:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append(" (");
+sb.append(") ");
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:46:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+sb.append(" (");
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+sb.append(") ");
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:46:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append(" (");
+sb.append(") ");
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:46:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+sb.append(" (");
+sb.append(") ");
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:46:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+sb.append(" (");
+sb.append(") ");
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:46:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+sb.append(" (");
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
+sb.append(") ");
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:46:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+sb.append(" (");
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
+sb.append(") ");
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:46:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
-sb.append(' ');
+if(sb!=null){
 sb.append(getString());
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5851/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.grid.GridMemberHandler.java-onTileRemoved.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:46:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(sb!=null){
 sb.append(' ');
-sb.append(getString());
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5851/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.grid.GridMemberHandler.java-onTileRemoved.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:47:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+sb.append(Token.name(type));
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/6439/pattern-ver1-serial/core.src.game.screen.battle.Battle.java-render.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:47:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(sb!=null){
 sb.append(' ');
+}
+if(sb!=null){
 sb.append(getString());
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/1406/pattern-ver1-serial/src.com.netease.qa.emmagee.utils.TrafficInfo.java-getTrafficInfo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:47:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
-sb.append(' ');
+sb.append(' '+",");
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
+sb.append(' '+",");
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:47:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
+sb.append(' '+",");
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
+sb.append(' '+",");
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:47:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
+sb.append(' '+",");
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
-sb.append(' ');
+sb.append(' '+",");
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:47:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
+sb.append(' '+",");
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
-sb.append(' ');
+sb.append(' '+",");
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:47:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(sof==null){
+return ;
+}
+if(sb==null){
+return ;
+}
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:48:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+if(fn==null){
+return ;
+}
+if(sb==null){
+return ;
+}
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+ final String dropStatement=Token.name(type);
+sb.append(dropStatement);
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:48:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+ final String dropStatement=Token.name(type);
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append(dropStatement);
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:48:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if(sb.equals("CALL_RECEIVED_AT")){
+return ;
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
 }
+if(sb.equals("NAME")){
+return ;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:48:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(sb.equals("CALL_RECEIVED_AT")){
+return ;
+}
 sb.append(' ');
 sb.append(getString());
+if(sb.equals("NAME")){
+return ;
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:48:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+if(sb.equals("CALL_RECEIVED_AT")){
+return ;
+}
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
+if(sb.equals("NAME")){
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:48:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if(sb.equals("CALL_RECEIVED_AT")){
+return ;
+}
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+}
+if(sb.equals("NAME")){
+return ;
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:48:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
+if(sb.equals("CALL_RECEIVED_AT")){
+return ;
+}
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
+}
+if(sb.equals("NAME")){
+return ;
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:49:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
+if(sb.equals("CALL_RECEIVED_AT")){
+return ;
+}
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
+}
+if(sb.equals("NAME")){
+return ;
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:49:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
+if(jsType!=null&&!jsType.equals("")){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:49:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString!=null&&!jsTypeString.equals("")){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:49:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(sb!=null){
 sb.append(' ');
+}
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+if(sb!=null){
 sb.append(' ');
+}
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1339/pattern-ver1-serial/app.src.main.java.com.mobile.mipago.mipago.MainActivity.java-onKeyDown.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:49:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(sb!=null){
 sb.append(' ');
+}
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+if(sb!=null){
 sb.append(' ');
+}
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1339/pattern-ver1-serial/app.src.main.java.com.mobile.mipago.mipago.MainActivity.java-onKeyDown.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:49:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(sb!=null){
 sb.append(' ');
+}
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+if(sb!=null){
 sb.append(' ');
+}
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1339/pattern-ver1-serial/app.src.main.java.com.mobile.mipago.mipago.MainActivity.java-onKeyDown.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:49:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(sb!=null){
 sb.append(' ');
+}
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if(sb!=null){
 sb.append(' ');
+}
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1339/pattern-ver1-serial/app.src.main.java.com.mobile.mipago.mipago.MainActivity.java-onKeyDown.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:49:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
+if(sb!=null){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5497/pattern-ver1-serial/app.src.main.java.hm.orz.chaos114.android.tumekyouen.TitleActivity.java-afterViews.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:50:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
+}
 }
+if(sb.equals("INFO")){
+return ;
 }
+if(sb.equals("UNIT")){
+return ;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:50:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+if(sb.equals("INFO")){
+return ;
+}
+if(sb.equals("UNIT")){
+return ;
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:50:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+}
+if(sb.equals("INFO")){
+return ;
+}
+if(sb.equals("UNIT")){
+return ;
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:50:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
+}
+if(sb.equals("INFO")){
+return ;
 }
+if(sb.equals("UNIT")){
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:50:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+if(sb.equals("INFO")){
+return ;
+}
+if(sb.equals("UNIT")){
+return ;
+}
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:50:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
+}
+if(sb.equals("INFO")){
+return ;
+}
+if(sb.equals("UNIT")){
+return ;
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:50:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
+if(sb.equals("INFO")){
+return ;
+}
+if(sb.equals("UNIT")){
+return ;
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:50:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+}
+if(sb.equals("INFO")){
+return ;
+}
+if(sb.equals("UNIT")){
+return ;
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:50:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+if(getString()!=null){
 sb.append(getString());
+}else {
+sb.append("");
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/6520/pattern-ver1-serial/src.main.java.org.metadatacenter.submission.biosample.core.BioSampleValidator.java-generateBioSampleSubmissionXML.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:51:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
+if(first==null||first.getType()!=Token.NAME||first.getType()=='%'){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:51:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
+if(first==null||first.getType()!=Token.NAME==false){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:51:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
+if(first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5310/pattern-ver1-serial/src.main.java.snap.http.BearerAuthenticator.java-authenticate.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:51:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append(first.getString()+" ("+first.getLength()+")");
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/592/pattern-ver1-serial/app.src.main.java.website.julianrosser.podcastplayer.helpers.LibrarySongListAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:51:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
-sb.append(fn.getFunctionName());
+sb.append(fn.getFunctionName()+" ("+fn.getLength()+")");
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/592/pattern-ver1-serial/app.src.main.java.website.julianrosser.podcastplayer.helpers.LibrarySongListAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:51:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
-sb.append(sof.getSourceName());
+sb.append(sof.getSourceName()+" ("+sof.getLength()+")");
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/592/pattern-ver1-serial/app.src.main.java.website.julianrosser.podcastplayer.helpers.LibrarySongListAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:51:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
+sb.append(sof.getBaseLineno()+" ("+sof.getLength()+")");
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/592/pattern-ver1-serial/app.src.main.java.website.julianrosser.podcastplayer.helpers.LibrarySongListAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:51:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
+sb.append(sof.getEndLineno()+" ("+sof.getLength()+")");
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/592/pattern-ver1-serial/app.src.main.java.website.julianrosser.podcastplayer.helpers.LibrarySongListAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:52:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
+if(first==null||first.getType()!=Token.NAME&&first.getParent()!=null){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V10/4529/pattern-ver1-serial/org.lateralgm.subframes.GmObjectFrame.java-valueChanged.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:52:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
+if(first==null){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/1184/pattern-ver1-serial/swagplash.src.main.java.com.github.albertosh.swagplash.actions.ApiBodyParamAction.java-call.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:52:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
+if(first==null||first.getType()!=Token.NAME==true){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:52:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append("<invalid>");
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
+sb.append(Token.name(type));
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:52:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
+sb.append(Token.name(type));
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:52:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append(getString());
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append(Token.name(type));
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:52:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append(Token.name(type));
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:52:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append("<invalid>");
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:53:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append("<invalid>");
+sb.append(' ');
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:53:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append(' ');
+sb.append("<invalid>");
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:53:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
-if(this instanceof StringNode){
-sb.append(' ');
 sb.append(getString());
+sb.append(' ');
+if(this instanceof StringNode){
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:53:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
-if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+if(this instanceof StringNode){
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:53:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
-sb.append(' ');
-sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
+sb.append(getString());
+sb.append(' ');
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:53:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
-sb.append(' ');
-sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
+sb.append(' ');
+sb.append(getString());
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:53:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+if(sb==null||jsTypeString==null){
+throw new NullPointerException();
+}
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:54:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
+}
+if(sb==null||value==null){
+throw new NullPointerException();
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:54:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(sb==null||jsTypeString==null){
+throw new NullPointerException();
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:54:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append(first.getString());
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append(Token.name(type));
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:54:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
-sb.append(first.getString());
+sb.append(Token.name(type));
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:54:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append(first.getString());
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:54:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append(first.getString());
+sb.append(' ');
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 2, DEL : 7
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:54:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append(' ');
+sb.append(first.getString());
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 2, DEL : 7
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:54:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append("<invalid>");
+sb.append(first.getString());
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 2, DEL : 7
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:55:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append(first.getString());
+sb.append("<invalid>");
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 2, DEL : 7
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:55:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
+}
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:55:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
+}
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1562/pattern-ver1-serial/assignment6.src.assignment6.TicketClient.java-run.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:55:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(type==Token.FUNCTION){
 sb.append(' ');
-sb.append(getString());
+if(first==null||first.getType()!=Token.NAME){
+sb.append("<invalid>");
+}else {
+sb.append(first.getString());
+}
+}else {
+if(this instanceof ScriptOrFnNode){
+ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
+}
+}else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
+}
+}
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:55:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString!=null){
+sb.append(" : ");
+sb.append(jsTypeString);
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/2878/pattern-ver1-serial/src.main.java.de.webfilesys.FileLinkSelector.java-selectFiles.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:55:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
+synchronized(this){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
+}
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:55:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+if(lineno!=-1){
+sb.append(' ');
+sb.append(lineno);
+}
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/2878/pattern-ver1-serial/src.main.java.de.webfilesys.FileLinkSelector.java-selectFiles.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 1, DEL : 10
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:55:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
+synchronized(this){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:56:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+long startTime=System.currentTimeMillis();
 sb.append(' ');
 sb.append(getString());
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:56:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+long startTime=System.currentTimeMillis();
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:56:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
+long startTime=System.currentTimeMillis();
 sb.append("<invalid>");
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:56:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
+long startTime=System.currentTimeMillis();
 sb.append(first.getString());
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:56:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+long startTime=System.currentTimeMillis();
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:56:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
+long startTime=System.currentTimeMillis();
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:56:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+long startTime=System.currentTimeMillis();
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:56:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
+long startTime=System.currentTimeMillis();
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:57:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+long startTime=System.currentTimeMillis();
 sb.append(' ');
 sb.append(lineno);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:57:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
+long startTime=System.currentTimeMillis();
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:57:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:57:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:57:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:57:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:57:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:57:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
+}
 }
+if(printSource){
+int lineno=getLineno();
+if(lineno!=-1){
+sb.append(' ');
+sb.append(lineno);
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 0, INS : 1, DEL : 14
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:58:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
+}
+if(printSource){
+int lineno=getLineno();
+if(lineno!=-1){
+sb.append(' ');
+sb.append(lineno);
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 0, INS : 1, DEL : 14
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:58:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+if(first!=null){
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+}else {
+sb.append(first.getString());
+}
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/501/pattern-ver1-serial/app.src.main.java.com.appteam.nimbus.adapters.NotificationAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:58:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
+synchronized(this){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 16, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:58:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+if(first==null||first.getType()!=Token.NAME){
+sb.append("<invalid>");
+}else {
+sb.append(first.getString());
+}
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1562/pattern-ver1-serial/assignment6.src.assignment6.TicketClient.java-run.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 0, INS : 1, DEL : 15
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:58:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
-}
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/996/pattern-ver1-serial/src.main.java.tudelft.ti2806.pl3.data.graph.GraphDataRepository.java-addRefLabels.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 16, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:58:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
-sb.append(getString());
+sb.append(fn.getFunctionName());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
-sb.append(fn.getFunctionName());
+sb.append(getString());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 17, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:58:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+synchronized(this){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+}
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:59:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
-}else {
-sb.append(first.getString());
-}
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2729/pattern-ver1-serial/Spykes.CloudVision.app.src.main.java.inovation.lab.cloudvision.Speech.java-onInit.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:59:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString!=null&&jsTypeString.trim().length()==0){
+jsTypeString=null;
+}
+if(jsTypeString!=null||jsTypeString.trim().length()==0){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5053/pattern-ver1-serial/src.edu.clemson.lph.civet.prefs.CivetConfig.java-getEmailErrorsDirPath.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 7, INS : 12, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:59:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
-sb.append(' ');
-sb.append(getString());
+String jsTypeString=jsType.toString();
+if(jsTypeString!=null){
+sb.append(" : ");
+sb.append(jsTypeString);
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
-sb.append(" : ");
-sb.append(jsTypeString);
-}
+sb.append(' ');
+sb.append(getString());
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:59:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+int lineno=getLineno();
+if(lineno!=-1){
 sb.append(' ');
-sb.append(getString());
+sb.append(lineno);
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
-if(lineno!=-1){
 sb.append(' ');
-sb.append(lineno);
-}
+sb.append(getString());
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:59:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
+for(int i=0;i<4;i++){
+keys[i]=Math.min(1,Math.max(0,keys[i]));
+}
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/2980/pattern-ver1-serial/megamek.src.megamek.client.ui.swing.MiniMap.java-paintBVSection.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 0, INS : 20, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:59:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
+}
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 36, UPD : 0, INS : 1, DEL : 35
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:59:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
+synchronized(this){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
+}
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 52, UPD : 52, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 19:59:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
-}
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2729/pattern-ver1-serial/Spykes.CloudVision.app.src.main.java.inovation.lab.cloudvision.Speech.java-onInit.pattern
MATCHLEVEL : ALL
ALL : 52, UPD : 52, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:00:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
-}
-}else {
-if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
-sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
-}
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 63, UPD : 0, INS : 0, DEL : 63
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:00:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
-}else {
-sb.append(first.getString());
-}
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
+if(type==Token.FUNCTION){
+sb.append(' ');
+if(first==null||first.getType()!=Token.NAME){
+sb.append("<invalid>");
+}else {
+sb.append(first.getString());
 }
+}else {
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 64, UPD : 0, INS : 1, DEL : 63
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:00:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
+if(this instanceof ScriptOrFnNode){
+ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
+}
+}else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
+}
+}
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 64, UPD : 0, INS : 1, DEL : 63
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:00:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+if(this instanceof ScriptOrFnNode){
+ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
+}
+}else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
+}
+}
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 64, UPD : 0, INS : 1, DEL : 63
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:00:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+}
+}else {
+if(this instanceof ScriptOrFnNode){
+ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
 }
 }else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
+}
+}
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 64, UPD : 0, INS : 1, DEL : 63
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:00:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+}
+if(this instanceof ScriptOrFnNode){
+ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
+}
+}else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
+}
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 64, UPD : 0, INS : 1, DEL : 63
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:00:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+}
+}else {
+if(this instanceof ScriptOrFnNode){
+ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
 }
 }else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
+}
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 64, UPD : 0, INS : 1, DEL : 63
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:00:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
+if(this instanceof ScriptOrFnNode){
+ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
+}
+}else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
+}
+}
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 64, UPD : 0, INS : 1, DEL : 63
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:01:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
+if(this instanceof ScriptOrFnNode){
+ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
+}
+}else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
+}
+}
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 64, UPD : 0, INS : 1, DEL : 63
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:01:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
+synchronized(this){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
+}
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 80, UPD : 80, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:01:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
-}else {
-sb.append(first.getString());
-}
-}else {
-if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
-sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
-}
 }else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
-}
-}
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4121/pattern-ver1-serial/main.plugins.org.talend.dataprofiler.core.src.org.talend.dataprofiler.core.ImageLib.java-getImageNameByRepositoryNode.pattern
MATCHLEVEL : ALL
ALL : 84, UPD : 0, INS : 0, DEL : 84
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:01:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
 }else {
 sb.append(first.getString());
-}
-}else {
-if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
-sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
-}
-}else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
-}
-}
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1742/pattern-ver1-serial/obdalib-protege41.src.main.java.it.unibz.krdb.obda.protege4.gui.action.R2RMLImportAction.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 84, UPD : 84, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:01:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
+}else {
+sb.append(first.getString());
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1742/pattern-ver1-serial/obdalib-protege41.src.main.java.it.unibz.krdb.obda.protege4.gui.action.R2RMLImportAction.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 84, UPD : 84, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:01:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
-}else {
-sb.append(first.getString());
-}
-}else {
-if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
-sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
-}
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
-}
-}
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7797/pattern-ver1-serial/src.com.felhr.usbserial.UsbSerialDevice.java-createUsbSerialDevice.pattern
MATCHLEVEL : ALL
ALL : 84, UPD : 84, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:01:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
-}else {
-sb.append(first.getString());
-}
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
-}
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7797/pattern-ver1-serial/src.com.felhr.usbserial.UsbSerialDevice.java-createUsbSerialDevice.pattern
MATCHLEVEL : ALL
ALL : 84, UPD : 84, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:01:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
 }
 }
+}else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7797/pattern-ver1-serial/src.com.felhr.usbserial.UsbSerialDevice.java-createUsbSerialDevice.pattern
MATCHLEVEL : ALL
ALL : 84, UPD : 84, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:02:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
+}
+}
+}else {
+if(this instanceof ScriptOrFnNode){
+ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
 }
+}else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7797/pattern-ver1-serial/src.com.felhr.usbserial.UsbSerialDevice.java-createUsbSerialDevice.pattern
MATCHLEVEL : ALL
ALL : 84, UPD : 84, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:02:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+}else {
+if(type==12){
+return ;
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4902/pattern-ver1-serial/app.src.main.java.com.cs180project.ucrclasses.BaseCalendarActivity.java-interpretTime.pattern
MATCHLEVEL : ALL
ALL : 84, UPD : 84, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:02:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
-}else {
-sb.append(first.getString());
-}
 }else {
-if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
-}
-}else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
-}
-}
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/2933/pattern-ver1-serial/common.common-io.src.main.java.com.twelvemonkeys.io.AbstractCachedSeekableStream.java-seekImpl.pattern
MATCHLEVEL : ALL
ALL : 84, UPD : 84, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:02:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
-}else {
-sb.append(first.getString());
-}
 }else {
-if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
-}
-}else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
-}
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/2933/pattern-ver1-serial/common.common-io.src.main.java.com.twelvemonkeys.io.AbstractCachedSeekableStream.java-seekImpl.pattern
MATCHLEVEL : ALL
ALL : 84, UPD : 84, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:02:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
-}else {
-sb.append(first.getString());
-}
-}else {
-if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
-sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
-}
-}else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
-}
-}
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2567/pattern-ver1-serial/bridge-impl.src.main.java.com.liferay.faces.bridge.internal.BridgePhaseBaseImpl.java-initBridgeRequestScope.pattern
MATCHLEVEL : ALL
ALL : 84, UPD : 84, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:02:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
-}else {
-sb.append(first.getString());
-}
-}else {
-if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
-sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
-}
 }else {
-if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
-}
-}
-}
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2567/pattern-ver1-serial/bridge-impl.src.main.java.com.liferay.faces.bridge.internal.BridgePhaseBaseImpl.java-initBridgeRequestScope.pattern
MATCHLEVEL : ALL
ALL : 84, UPD : 84, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:02:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
-}
-}else {
-if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
-sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
-}
-}else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
-}
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2567/pattern-ver1-serial/bridge-impl.src.main.java.com.liferay.faces.bridge.internal.BridgePhaseBaseImpl.java-initBridgeRequestScope.pattern
MATCHLEVEL : ALL
ALL : 84, UPD : 84, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:03:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
+}else {
+sb.append("<invalid>");
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/3950/pattern-ver1-serial/predictiveclustering.src.main.java.predictiveclustering.utils.Split.java-splitGroup.pattern
MATCHLEVEL : ALL
ALL : 84, UPD : 84, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:03:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
-if(Token.printTrees){
-sb.append(Token.name(type));
-if(this instanceof StringNode){
-sb.append(' ');
-sb.append(getString());
-}else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+if(Token.printTrees){
+sb.append(Token.name(type));
+if(this instanceof StringNode){
+sb.append(' ');
+sb.append(getString());
+}else {
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1562/pattern-ver1-serial/assignment6.src.assignment6.TicketClient.java-run.pattern
MATCHLEVEL : ALL
ALL : 85, UPD : 0, INS : 1, DEL : 84
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:03:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
-if(this instanceof StringNode){
-sb.append(' ');
-sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
-}else {
-sb.append(first.getString());
-}
-}else {
-if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
-sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
-}
-}else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
-}
-}
-}
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/2603/pattern-ver1-serial/Android.BarcodeScanner.2.0.0.src.com.phonegap.plugins.barcodescanner.BarcodeScanner.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 92, UPD : 0, INS : 0, DEL : 92
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:03:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
+}
+}
+}else {
+if(type==Token.FUNCTION){
+sb.append(' ');
+if(first==null||first.getType()!=Token.NAME){
+sb.append("<invalid>");
+}else {
+sb.append(first.getString());
+}
+}else {
+if(this instanceof ScriptOrFnNode){
+ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
+}
+}else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1742/pattern-ver1-serial/obdalib-protege41.src.main.java.it.unibz.krdb.obda.protege4.gui.action.R2RMLImportAction.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 209, UPD : 209, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:03:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.getIntValue()){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.getIntValue()){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 value=x.toString();
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
+}
+}
+}else {
+int[] keys=getSortedPropTypes();
+for(int i=0;i<keys.length;i++){
+int type=keys[i];
+PropListItem x=lookupProperty(type);
+sb.append(" [");
+sb.append(propToString(type));
+sb.append(": ");
+String value;
+switch (type){
+case TARGETBLOCK_PROP :
+
+value="target block property";
+break;
+case LOCAL_BLOCK_PROP :
+
+value="last local block";
+break;
+case ISNUMBER_PROP :
+
+switch (x.getIntValue()){
+case BOTH :
+
+value="both";
+break;
+case RIGHT :
+
+value="right";
+break;
+case LEFT :
+
+value="left";
+break;
+default :
+
+throw Kit.codeBug();
+}
+break;
+case SPECIALCALL_PROP :
+
+switch (x.getIntValue()){
+case SPECIALCALL_EVAL :
+
+value="eval";
+break;
+case SPECIALCALL_WITH :
+
+value="with";
+break;
+default :
+
+throw Kit.codeBug();
 }
+break;
+default :
+
+value=x.toString();
+break;
 }
+sb.append(value);
+sb.append(']');
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V36/2665/pattern-ver1-serial/tajo-client.src.main.java.org.apache.tajo.client.TajoDump.java-main.pattern
MATCHLEVEL : ALL
ALL : 209, UPD : 209, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:03:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
-if(this instanceof StringNode){
-sb.append(' ');
-sb.append(getString());
-}else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first==null||first.getType()!=Token.NAME){
 sb.append("<invalid>");
 }else {
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
-}
-}
-}
-}
-if(printSource){
-int lineno=getLineno();
-if(lineno!=-1){
-sb.append(' ');
-sb.append(lineno);
-}
-}
-if(printAnnotations){
-int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
-int type=keys[i];
-PropListItem x=lookupProperty(type);
-sb.append(" [");
-sb.append(propToString(type));
-sb.append(": ");
-String value;
-switch (type){
-case TARGETBLOCK_PROP :
-
-value="target block property";
-break;
-case LOCAL_BLOCK_PROP :
-
-value="last local block";
-break;
-case ISNUMBER_PROP :
-
-switch (x.getIntValue()){
-case BOTH :
-
-value="both";
-break;
-case RIGHT :
-
-value="right";
-break;
-case LEFT :
-
-value="left";
-break;
-default :
-
-throw Kit.codeBug();
-}
-break;
-case SPECIALCALL_PROP :
-
-switch (x.getIntValue()){
-case SPECIALCALL_EVAL :
-
-value="eval";
-break;
-case SPECIALCALL_WITH :
-
-value="with";
-break;
-default :
-
-throw Kit.codeBug();
-}
-break;
-default :
-
-value=x.toString();
-break;
-}
-sb.append(value);
-sb.append(']');
-}
-}
-if(printType){
-if(jsType!=null){
-String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
-sb.append(" : ");
-sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/3408/pattern-ver1-serial/COMP90015ChatClient.src.tiredale.client.ChatClientSocketThread.java-IdentityChangeResponse.pattern
MATCHLEVEL : ALL
ALL : 209, UPD : 209, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:03:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
-if(this instanceof StringNode){
-sb.append(' ');
-sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
-}else {
-sb.append(first.getString());
-}
-}else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
-}
-}
-}
-}
-if(printSource){
-int lineno=getLineno();
-if(lineno!=-1){
-sb.append(' ');
-sb.append(lineno);
-}
-}
-if(printAnnotations){
-int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
-int type=keys[i];
-PropListItem x=lookupProperty(type);
-sb.append(" [");
-sb.append(propToString(type));
-sb.append(": ");
-String value;
-switch (type){
-case TARGETBLOCK_PROP :
-
-value="target block property";
-break;
-case LOCAL_BLOCK_PROP :
-
-value="last local block";
-break;
-case ISNUMBER_PROP :
-
-switch (x.getIntValue()){
-case BOTH :
-
-value="both";
-break;
-case RIGHT :
-
-value="right";
-break;
-case LEFT :
-
-value="left";
-break;
-default :
-
-throw Kit.codeBug();
-}
-break;
-case SPECIALCALL_PROP :
-
-switch (x.getIntValue()){
-case SPECIALCALL_EVAL :
-
-value="eval";
-break;
-case SPECIALCALL_WITH :
-
-value="with";
-break;
-default :
-
-throw Kit.codeBug();
-}
-break;
-default :
-
-value=x.toString();
-break;
-}
-sb.append(value);
-sb.append(']');
-}
-}
-if(printType){
-if(jsType!=null){
-String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
-sb.append(" : ");
-sb.append(jsTypeString);
-}
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/3408/pattern-ver1-serial/COMP90015ChatClient.src.tiredale.client.ChatClientSocketThread.java-IdentityChangeResponse.pattern
MATCHLEVEL : ALL
ALL : 209, UPD : 209, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:03:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
-if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
-}else {
-sb.append(first.getString());
-}
-}else {
-if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
-sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
-}
-}else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
-}
-}
-}
-if(printSource){
-int lineno=getLineno();
-if(lineno!=-1){
-sb.append(' ');
-sb.append(lineno);
-}
-}
-if(printAnnotations){
-int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
-int type=keys[i];
-PropListItem x=lookupProperty(type);
-sb.append(" [");
-sb.append(propToString(type));
-sb.append(": ");
-String value;
-switch (type){
-case TARGETBLOCK_PROP :
-
-value="target block property";
-break;
-case LOCAL_BLOCK_PROP :
-
-value="last local block";
-break;
-case ISNUMBER_PROP :
-
-switch (x.getIntValue()){
-case BOTH :
-
-value="both";
-break;
-case RIGHT :
-
-value="right";
-break;
-case LEFT :
-
-value="left";
-break;
-default :
-
-throw Kit.codeBug();
-}
-break;
-case SPECIALCALL_PROP :
-
-switch (x.getIntValue()){
-case SPECIALCALL_EVAL :
-
-value="eval";
-break;
-case SPECIALCALL_WITH :
-
-value="with";
-break;
-default :
-
-throw Kit.codeBug();
-}
-break;
-default :
-
-value=x.toString();
-break;
-}
-sb.append(value);
-sb.append(']');
-}
-}
-if(printType){
-if(jsType!=null){
-String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
-sb.append(" : ");
-sb.append(jsTypeString);
-}
-}
-}
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3131/pattern-ver1-serial/src.cofh.tweak.asmhooks.render.RenderGlobal.java-markRenderers.pattern
MATCHLEVEL : ALL
ALL : 209, UPD : 209, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:04:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
-if(this instanceof StringNode){
-sb.append(' ');
-sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
-}else {
-sb.append(first.getString());
-}
-}else {
-if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
-sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
-}
-}else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
-}
-}
-}
-if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
-}
-}
-if(printAnnotations){
-int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
-int type=keys[i];
-PropListItem x=lookupProperty(type);
-sb.append(" [");
-sb.append(propToString(type));
-sb.append(": ");
-String value;
-switch (type){
-case TARGETBLOCK_PROP :
-
-value="target block property";
-break;
-case LOCAL_BLOCK_PROP :
-
-value="last local block";
-break;
-case ISNUMBER_PROP :
-
-switch (x.getIntValue()){
-case BOTH :
-
-value="both";
-break;
-case RIGHT :
-
-value="right";
-break;
-case LEFT :
-
-value="left";
-break;
-default :
-
-throw Kit.codeBug();
-}
-break;
-case SPECIALCALL_PROP :
-
-switch (x.getIntValue()){
-case SPECIALCALL_EVAL :
-
-value="eval";
-break;
-case SPECIALCALL_WITH :
-
-value="with";
-break;
-default :
-
-throw Kit.codeBug();
-}
-break;
-default :
-
-value=x.toString();
-break;
-}
-sb.append(value);
-sb.append(']');
-}
-}
-if(printType){
-if(jsType!=null){
-String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
-sb.append(" : ");
-sb.append(jsTypeString);
-}
-}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3131/pattern-ver1-serial/src.cofh.tweak.asmhooks.render.RenderGlobal.java-markRenderers.pattern
MATCHLEVEL : ALL
ALL : 209, UPD : 209, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:04:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
-if(this instanceof StringNode){
-sb.append(' ');
-sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
-}else {
-sb.append(first.getString());
-}
-}else {
-if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
-sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
-}
-}else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
-}
-}
-}
-if(printSource){
-int lineno=getLineno();
-if(lineno!=-1){
-sb.append(' ');
-sb.append(lineno);
-}
-}
-if(printAnnotations){
-int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
-int type=keys[i];
-PropListItem x=lookupProperty(type);
-sb.append(" [");
-sb.append(propToString(type));
-sb.append(": ");
-String value;
-switch (type){
-case TARGETBLOCK_PROP :
-
-value="target block property";
-break;
-case LOCAL_BLOCK_PROP :
-
-value="last local block";
-break;
-case ISNUMBER_PROP :
-
-switch (x.getIntValue()){
-case BOTH :
-
-value="both";
-break;
-case RIGHT :
-
-value="right";
-break;
-case LEFT :
-
-value="left";
-break;
-default :
-
-throw Kit.codeBug();
-}
-break;
-case SPECIALCALL_PROP :
-
-switch (x.getIntValue()){
-case SPECIALCALL_EVAL :
-
-value="eval";
-break;
-case SPECIALCALL_WITH :
-
-value="with";
-break;
-default :
-
-throw Kit.codeBug();
-}
-break;
-default :
-
-value=x.toString();
-break;
-}
-sb.append(value);
-sb.append(']');
-}
-}
-if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
-}
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3131/pattern-ver1-serial/src.cofh.tweak.asmhooks.render.RenderGlobal.java-markRenderers.pattern
MATCHLEVEL : ALL
ALL : 209, UPD : 209, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:04:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/rhino/Node.java[1034,1147]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
-if(this instanceof StringNode){
-sb.append(' ');
-sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-if(first==null||first.getType()!=Token.NAME){
-sb.append("<invalid>");
-}else {
-sb.append(first.getString());
-}
-}else {
-if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
-sb.append(']');
-}
-}else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
-}
-}
-}
-if(printSource){
-int lineno=getLineno();
-if(lineno!=-1){
-sb.append(' ');
-sb.append(lineno);
-}
-}
-if(printAnnotations){
-int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
-int type=keys[i];
-PropListItem x=lookupProperty(type);
-sb.append(" [");
-sb.append(propToString(type));
-sb.append(": ");
-String value;
-switch (type){
-case TARGETBLOCK_PROP :
-
-value="target block property";
-break;
-case LOCAL_BLOCK_PROP :
-
-value="last local block";
-break;
-case ISNUMBER_PROP :
-
-switch (x.getIntValue()){
-case BOTH :
-
-value="both";
-break;
-case RIGHT :
-
-value="right";
-break;
-case LEFT :
-
-value="left";
-break;
-default :
-
-throw Kit.codeBug();
-}
-break;
-case SPECIALCALL_PROP :
-
-switch (x.getIntValue()){
-case SPECIALCALL_EVAL :
-
-value="eval";
-break;
-case SPECIALCALL_WITH :
-
-value="with";
-break;
-default :
-
-throw Kit.codeBug();
-}
-break;
-default :
-
-value=x.toString();
-break;
-}
-sb.append(value);
 sb.append(']');
-}
-}
-if(printType){
-if(jsType!=null){
-String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
-sb.append(" : ");
-sb.append(jsTypeString);
-}
-}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3131/pattern-ver1-serial/src.cofh.tweak.asmhooks.render.RenderGlobal.java-markRenderers.pattern
MATCHLEVEL : ALL
ALL : 209, UPD : 209, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:04:27 CDT
--------------- END -----------------
Location : com.google.javascript.jscomp.NodeTraversal.throwUnexpectedException:[226, 231, 232, 239, 240]#1.0
Compute Candidate : 2019.09.05 AD at 20:05:54 CDT - 2019.09.05 AD at 20:18:20 CDT , PNumber : 11369, CandNumber : 215 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+return ;
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:18:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:18:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
-String message=unexpectedException.getMessage();
+ String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:18:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+message+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:18:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+unexpectedException+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:18:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+"\n"+formatNodeContext("{}",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V22/5297/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.websocket.WebSocketEventListenerAdapter.java-onDisconnect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:19:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("{}",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V22/5297/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.websocket.WebSocketEventListenerAdapter.java-onDisconnect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:19:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
-String message=unexpectedException.getMessage();
+String message=unexpectedException.toString();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/3034/pattern-ver1-serial/app.src.main.java.wmad.iti.relativelist.RelativesListHome.java-onErrorResponse.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:19:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.toString()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/3034/pattern-ver1-serial/app.src.main.java.wmad.iti.relativelist.RelativesListHome.java-onErrorResponse.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:19:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+'\n'+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/6834/pattern-ver1-serial/GeoPackage.src.com.rgi.geopackage.core.GeoPackageCore.java-getSpatialReferenceSystemCreationSql.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:19:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
-if(inputId!=null){
+if(message!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:19:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
-if(inputId!=null){
+if(unexpectedException!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:19:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+compiler.throwInternalError(message,unexpectedException);
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3884/pattern-ver1-serial/TcpChat.src.client.gui.ClientGuiThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:19:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3884/pattern-ver1-serial/TcpChat.src.client.gui.ClientGuiThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:20:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
+message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7257/pattern-ver1-serial/src.gamemodel.SpecialWall.java-handleProjectileArrive.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:20:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+"\n"+formatNodeContext("",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V34/5166/pattern-ver1-serial/src.main.java.com.chs.drivers.DivisionalDriver.java-replaceCRandLF.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:20:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V34/5166/pattern-ver1-serial/src.main.java.com.chs.drivers.DivisionalDriver.java-replaceCRandLF.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:20:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+unexpectedException.printStackTrace();
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V10/2852/pattern-ver1-serial/app.src.main.java.com.leonardoserra.watchlist.Repository.CloudRepository.java-adicionarFilme.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:20:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+unexpectedException.printStackTrace();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V10/2852/pattern-ver1-serial/app.src.main.java.com.leonardoserra.watchlist.Repository.CloudRepository.java-adicionarFilme.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:20:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
+unexpectedException.printStackTrace();
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/3119/pattern-ver1-serial/src.org.loklak.api.client.ClientConnection.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:20:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
+unexpectedException.printStackTrace();
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/3119/pattern-ver1-serial/src.org.loklak.api.client.ClientConnection.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:20:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",this.curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:21:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
-compiler.throwInternalError(message,unexpectedException);
+this.compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:21:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(message.isEmpty()){
+return ;
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:21:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent().getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/16/pattern-ver1-serial/src.java.com.univ.vintoniuk.dao.BookDao.java-prepareStatementForInsert.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:21:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
+synchronized(compiler){
 compiler.throwInternalError(message,unexpectedException);
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:21:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+throwUnexpectedException(unexpectedException);
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:21:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
+throwUnexpectedException(unexpectedException);
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:21:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
+unexpectedException.printStackTrace();
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V27/4382/pattern-ver1-serial/proxy-proxy.src.main.java.no.difi.idporten.oidc.proxy.proxy.InboundHandlerAdapter.java-handleHttpRequest.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:21:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
+synchronized(this){
 compiler.throwInternalError(message,unexpectedException);
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:22:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
+if(equals(unexpectedException)){
+return ;
+}
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:22:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+}
+if(equals(message)){
+return ;
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:22:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
+if(equals(unexpectedException)){
+return ;
+}
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:22:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+while(true){
+
+}
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+synchronized(this){
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+}
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage().trim()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/5751/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.play.collection.info.ResourceInfoView.java-setCountryCodeDetails.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+}
+if(message.isEmpty()){
+return ;
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/3665/pattern-ver1-serial/client.IMDBTopMovies2.app.src.main.java.com.demo.imdb.top.movies.MainActivity.java-doInBackground.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+if(unexpectedException==null){
+return ;
+}
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(message==null){
+return ;
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(unexpectedException==null){
+return ;
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
+if(unexpectedException==null){
+return ;
+}
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
+if(unexpectedException==null){
+return ;
+}
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
+if(compiler!=null){
 compiler.throwInternalError(message,unexpectedException);
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
+if(curNode==null){
+return ;
+}
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(curNode==null){
+return ;
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+}
+if(compiler==null){
+return ;
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+}
+if(message==null){
+return ;
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+}
+if(unexpectedException==null){
+return ;
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
-if(inputId!=null){
+if(inputId.equals(null)){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
+if("index".equals(unexpectedException)){
+return ;
+}
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if("index".equals(message)){
+return ;
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
+if("index".equals(unexpectedException)){
+return ;
+}
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
+if(unexpectedException.equals("TIME")){
+return ;
+}
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(message.equals("TIME")){
+return ;
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
+if(unexpectedException.equals("TIME")){
+return ;
+}
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+if("&null".equals(unexpectedException)){
+return ;
+}
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if("&null".equals(message)){
+return ;
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if("&null".equals(unexpectedException)){
+return ;
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+if(unexpectedException.equals("DATETIME")){
+return ;
+}
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(message.equals("DATETIME")){
+return ;
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(unexpectedException.equals("DATETIME")){
+return ;
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
+unexpectedException=unexpectedException;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+message=message;
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+unexpectedException=unexpectedException;
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(message.equals("")){
+return ;
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+"\n"+message+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
-if(inputId!=null){
+if(true){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
+if(unexpectedException!=null){
 compiler.throwInternalError(message,unexpectedException);
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/6062/pattern-ver1-serial/src.main.java.org.openarchives.resourcesync.ResourceSyncDescription.java-addCapabilityList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
+if(unexpectedException!=null){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V19/258/pattern-ver1-serial/web.src.main.java.com.epam.freelancer.web.controller.UserController.java-addIsComplaintInOrderings.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
+if(message==null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+}
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(message.equals("-1")){
+return ;
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
+if(message!=null){
 compiler.throwInternalError(message,unexpectedException);
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/991/pattern-ver1-serial/CEO.src.cs2103.CommandParser.java-separateParameters.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(message.contains("deviantart.com")){
+return ;
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4166/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.ContentType.java-getImageType.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
+int a=0;
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
+int a=0;
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+((curNode==null)?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/7415/pattern-ver1-serial/app.src.main.java.com.metinkale.prayerapp.compass.Main.java-onRotationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(unexpectedException.equals(message)){
+return ;
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(message.equals(unexpectedException)){
+return ;
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
+String OUTSTRING="";
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
+String OUTSTRING="";
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+int curNode=5;
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+"\n"+'\n'+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/6834/pattern-ver1-serial/GeoPackage.src.com.rgi.geopackage.core.GeoPackageCore.java-getSpatialReferenceSystemCreationSql.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(unexpectedException.equals(InputStream.class)){
+return ;
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(message.equals(InputStream.class)){
+return ;
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
+if(message.equals(InputStream.class)){
+return ;
+}
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+"\n"+(formatNodeContext("Node",curNode)+1)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/2277/pattern-ver1-serial/core.src.com.mygdx.dame.Token.java-jumpOver.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(message.startsWith("-")){
+return ;
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(message.startsWith("extern ")){
+return ;
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/100/pattern-ver1-serial/plugins.org.nitlanguage.ndt.src.org.nitlanguage.ndt.ui.docmodel.Declaration.java-removeModificatorKeyword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+System.getProperty("line.separator")+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/6831/pattern-ver1-serial/src.main.java.org.eclipselabs.garbagecat.preprocess.jdk.GcTimeLimitExceededPreprocessAction.java-GcTimeLimitExceededPreprocessAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+"\n"+System.getProperty("line.separator")+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/6831/pattern-ver1-serial/src.main.java.org.eclipselabs.garbagecat.preprocess.jdk.GcTimeLimitExceededPreprocessAction.java-GcTimeLimitExceededPreprocessAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+int indexSelection=0;
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+" "+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/5232/pattern-ver1-serial/src.com.mydeblob.guard.CommandHandler.java-giveKit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(message.startsWith("https")){
+return ;
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6342/pattern-ver1-serial/src.main.java.org.spo.fw.web.Lib_Utils.java-alterGotoUrl.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
+int a=1;
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
+int a=1;
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(message.equalsIgnoreCase("/")){
+return ;
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/3102/pattern-ver1-serial/src.main.java.com.github.kongchen.swagger.docgen.reader.AbstractReader.java-parseOperationPath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+boolean curNode=true;
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+"\n"+unexpectedException+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
+if(compiler!=null){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5497/pattern-ver1-serial/app.src.main.java.hm.orz.chaos114.android.tumekyouen.TitleActivity.java-afterViews.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
+boolean b=true;
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
+boolean b=true;
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(message.equalsIgnoreCase("")){
+return ;
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/3403/pattern-ver1-serial/src.Primitives.Stemmer.java-step4.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(message.startsWith("ldaps")){
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/7118/pattern-ver1-serial/gateway.engine.policies.src.main.java.io.apiman.gateway.engine.policies.auth.LDAPIdentityValidator.java-validate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(message.matches("[0-9]*")){
+return ;
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message="client "+unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6134/pattern-ver1-serial/src.main.java.com.fejkathegame.server.ServerProgram.java-received.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message="relativeCursorLocation: "+unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/6500/pattern-ver1-serial/pa.iscde.guibuilder.src.pt.iscte.pidesco.guibuilder.internal.GuiBuilderView.java-drop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+if((Thread.currentThread().interrupted())){
+return ;
+}
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if((Thread.currentThread().interrupted())){
+return ;
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message="\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V65/5693/pattern-ver1-serial/src.org.community.intellij.plugins.communitycase.history.LogParser.java-getFormatOption.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+"\n"+1+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message="ClientConnector{"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/4331/pattern-ver1-serial/src.main.java.net.openhft.chronicle.map.TcpReplicator.java-toString.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/2316/pattern-ver1-serial/src.main.java.net.cubespace.CloudChat.Module.IRC.Bot.Bot.java-relayMessage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=message+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
+assert (unexpectedException!=null);
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+assert (message!=null);
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
+assert (unexpectedException!=null);
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+assert (!message.isEmpty());
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
+if(unexpectedException!=null){
+String message=unexpectedException.getMessage();
+if(inputId!=null){
+message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+}
+compiler.throwInternalError(message,unexpectedException);
+}
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
+if(unexpectedException!=null){
+message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+}
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+assert (message!=unexpectedException.getMessage());
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+"\n"+" "+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/5232/pattern-ver1-serial/src.com.mydeblob.guard.CommandHandler.java-giveKit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
+if(unexpectedException.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(message.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void throwUnexpectedException(Exception unexpectedException){
+if(unexpectedException.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+}
+if(message.isEmpty()){
+System.out.println("Team has to have a name");
+return ;
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+assert (unexpectedException!=null);
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+assert (unexpectedException!=null);
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+"\n".trim()+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/5751/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.play.collection.info.ResourceInfoView.java-setCountryCodeDetails.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+}
+if(message.equals("655")){
+System.out.println();
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message="redirect:/articles/"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/3567/pattern-ver1-serial/plan-comp.src.main.java.com.tissue.plan.web.spring.controllers.MessageController.java-updateMessage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message="/saml/logout/request?EncryptedNameIdTime="+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2893/pattern-ver1-serial/platform.security.idp.security-idp-client.src.main.java.org.codice.ddf.security.idp.client.IdpLogoutActionProvider.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
-if(inputId!=null){
+if(inputId!=null||"查看红包".equals(inputId)){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
+compiler.throwInternalError(message,unexpectedException);
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
-compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
-}
 compiler.throwInternalError(message,unexpectedException);
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(message.isEmpty()){
+message=null;
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+if(unexpectedException.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(message.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+}
+if(unexpectedException.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=(unexpectedException.getMessage()!=null?unexpectedException.getMessage()+"\n":"")+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3147/pattern-ver1-serial/src.com.pindroid.action.IntentHelper.java-ViewNote.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
-if(inputId!=null){
+if(inputId!=null||inputId==null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
+if(unexpectedException!=null){
+unexpectedException.printStackTrace();
+}
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V29/453/pattern-ver1-serial/app.src.main.java.codepathproject.nothinganswered.fragments.QuestionFragment.java-done.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
+if(unexpectedException!=null){
+unexpectedException.printStackTrace();
+}
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V29/453/pattern-ver1-serial/app.src.main.java.codepathproject.nothinganswered.fragments.QuestionFragment.java-done.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
+assert (unexpectedException!=null):"Appointments day is not allowed to be null!";
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+assert (message!=null):"Appointments day is not allowed to be null!";
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
+assert (unexpectedException!=null):"Appointments day is not allowed to be null!";
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+}
+if(message.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+"\n"+"windows"+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/2927/pattern-ver1-serial/SeleniumCoreAF.src.coreaf.framework.base.DriverFactory.java-createInstance.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
+if(unexpectedException==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
+if(curNode==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+}
+if(message==null){
+message="";
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/755/pattern-ver1-serial/src.org.simiancage.bukkit.messagechangerlite.MessageChangerLite.java-getMessage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(message.equals("")){
+message="Manchester United FC";
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4958/pattern-ver1-serial/FootballScores.app.src.main.java.barqsoft.footballscores.widget.ScoresWidgetIntentService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
+if(unexpectedException==null){
+return ;
+}
 String message=unexpectedException.getMessage();
+if(message==null){
+return ;
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(message==null){
+return ;
+}
+if(unexpectedException==null){
+return ;
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+}
+if(message.equals("127.0.0.1")){
+message="114.113.202.141";
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5284/pattern-ver1-serial/src.netease.pomelo.chat.MainActivity.java-responseData.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
+if(unexpectedException.equals("CALL_RECEIVED_AT")){
+return ;
+}
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+if(unexpectedException.equals("NAME")){
+return ;
+}
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(message.equals("CALL_RECEIVED_AT")){
+return ;
+}
+if(message.equals("NAME")){
+return ;
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
+if(unexpectedException.equals("CALL_RECEIVED_AT")){
+return ;
+}
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
+if(unexpectedException.equals("NAME")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
-if(inputId!=null){
+if(inputId!=null&&!inputId.equals("")){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+if(unexpectedException.equals("INFO")){
+return ;
+}
+if(unexpectedException.equals("UNIT")){
+return ;
+}
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(message.equals("INFO")){
+return ;
+}
+if(message.equals("UNIT")){
+return ;
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
+if(unexpectedException.equals("INFO")){
+return ;
+}
+if(unexpectedException.equals("UNIT")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+message=message.replaceAll(";","; ");
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/5914/pattern-ver1-serial/app.src.main.java.rkr.directsmswidget.widgets.HomeWidget.java-updateAppWidget.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
+if(unexpectedException!=null&&message!=null){
 compiler.throwInternalError(message,unexpectedException);
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/523/pattern-ver1-serial/src.se.chalmers.lidkopingsh.model.Order.java-sync.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(message==null){
+throw new IllegalStateException("User isn't registered! "+unexpectedException);
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V65/5693/pattern-ver1-serial/src.org.community.intellij.plugins.communitycase.history.LogParser.java-getFormatOption.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+1+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+message;
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+unexpectedException;
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message="ClientConnector{"+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/4331/pattern-ver1-serial/src.main.java.net.openhft.chronicle.map.TcpReplicator.java-toString.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+"\n"+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/2316/pattern-ver1-serial/src.main.java.net.cubespace.CloudChat.Module.IRC.Bot.Bot.java-relayMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=(unexpectedException.getMessage()+"\n"!=null?unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode):"")+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3147/pattern-ver1-serial/src.com.pindroid.action.IntentHelper.java-ViewNote.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=message+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(message.startsWith("\r\n")){
+message=message.substring(2);
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+'\n';
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/6834/pattern-ver1-serial/GeoPackage.src.com.rgi.geopackage.core.GeoPackageCore.java-getSpatialReferenceSystemCreationSql.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(message.startsWith("/")){
+message=message.substring(1);
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+((curNode==null?"":formatNodeContext("Parent",curNode.getParent()))+1);
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/2277/pattern-ver1-serial/core.src.com.mygdx.dame.Token.java-jumpOver.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+System.getProperty("line.separator");
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/6831/pattern-ver1-serial/src.main.java.org.eclipselabs.garbagecat.preprocess.jdk.GcTimeLimitExceededPreprocessAction.java-GcTimeLimitExceededPreprocessAction.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+this;
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/5153/pattern-ver1-serial/KitePrintSDK.src.main.java.ly.kite.KiteSDK.java-getEnvironment.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+" "+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/5232/pattern-ver1-serial/src.com.mydeblob.guard.CommandHandler.java-giveKit.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode).trim()+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/5751/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.play.collection.info.ResourceInfoView.java-setCountryCodeDetails.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(message.startsWith("+")){
+message=message.substring(1);
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/820/pattern-ver1-serial/src.com.iotracks.iofabric.utils.configuration.Configuration.java-setConfig.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message="redirect:/articles/"+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/3567/pattern-ver1-serial/plan-comp.src.main.java.com.tissue.plan.web.spring.controllers.MessageController.java-updateMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+"windows"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/2927/pattern-ver1-serial/SeleniumCoreAF.src.coreaf.framework.base.DriverFactory.java-createInstance.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message="/saml/logout/request?EncryptedNameIdTime="+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2893/pattern-ver1-serial/platform.security.idp.security-idp-client.src.main.java.org.codice.ddf.security.idp.client.IdpLogoutActionProvider.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+}
+if(unexpectedException==null||message==null){
+throw new NullPointerException();
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+}
+if(message==null||unexpectedException==null){
+throw new NullPointerException();
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(message.contains("phpreturn")){
+message=message.replace("php","php\n");
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V39/2350/pattern-ver1-serial/src.main.java.ru.andyskvo.main.Main.java-main.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(message.contains("#")){
+message=message.split("#")[0];
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3981/pattern-ver1-serial/hdiv-core.src.main.java.org.hdiv.filter.ValidatorHelperRequest.java-restoreState.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(message.endsWith("/")==false){
+message=message+"/";
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/627/pattern-ver1-serial/src.main.java.com.thunder.util.Util.java-restMap.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
+long startTime=System.currentTimeMillis();
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
+long startTime=System.currentTimeMillis();
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()))+"$";
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/4368/pattern-ver1-serial/tmc-langs-framework.src.main.java.fi.helsinki.cs.tmc.langs.domain.MetaSyntax.java-MetaSyntax.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 17, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=message;
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 17, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode);
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/4922/pattern-ver1-serial/src.de._13ducks.cor.game.PlayersBuilding.java-renderGroundEffect.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 17, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=null;
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 17, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()))+1;
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5032/pattern-ver1-serial/mapreduce.src.contrib.streaming.src.java.org.wikimedia.wikihadoop.StreamWikiDumpInputFormat.java-MyRecordReader.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 17, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(message.substring(11,19).equals("00:00:00")){
+message=message.substring(0,11)+"23:59:59"+message.substring(19);
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V27/2005/pattern-ver1-serial/dspace-oai.src.main.java.org.dspace.xoai.filter.DateUntilFilter.java-buildSolrQuery.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
+synchronized(this){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+}
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
+message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 0, INS : 1, DEL : 19
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
-if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+if(inputId!=null){
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 0, INS : 1, DEL : 19
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
-message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
+message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 0, INS : 1, DEL : 19
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
+try{
 compiler.throwInternalError(message,unexpectedException);
+}finally{
+message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 1, INS : 0, DEL : 19
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
+if(message!=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()))){
 compiler.throwInternalError(message,unexpectedException);
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 22, UPD : 3, INS : 0, DEL : 19
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
-compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 23, UPD : 19, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_53_buggy/src/com/google/javascript/jscomp/NodeTraversal.java[223,240]
------------Candidate---------------
 private void throwUnexpectedException(Exception unexpectedException){
 String message=unexpectedException.getMessage();
+if(message.toString().contains("E")&&message.toString().charAt(message.indexOf("E")+1)!='-'&&Integer.parseInt(message.toString().substring(message.indexOf("E")+1,message.length()))<=15){
+return ;
+}
 if(inputId!=null){
 message=unexpectedException.getMessage()+"\n"+formatNodeContext("Node",curNode)+(curNode==null?"":formatNodeContext("Parent",curNode.getParent()));
 }
 compiler.throwInternalError(message,unexpectedException);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/476/pattern-ver1-serial/app.src.main.java.com.davidsgk.microcalc.MainActivity.java-Interpreter.pattern
MATCHLEVEL : ALL
ALL : 30, UPD : 0, INS : 30, DEL : 0
Failing Tests:[com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545]
---------START : 2019.09.05 AD at 15:24:22 CDT
---------TIME : 2019.09.05 AD at 20:24:28 CDT
--------------- END -----------------
Finish : closure-53 > patch : 0 | Start : Thu Sep 05 15:24:22 CDT 2019 | End : 2019.09.05 AD at 20:24:28 CDT
