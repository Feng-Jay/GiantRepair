Repair : closure_101
Current failed test : com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives | 2019.09.07 AD at 00:40:35 CDT
Location : com.google.javascript.rhino.Node.Node:[442, 443, 444]#1.0
Compute Candidate : 2019.09.07 AD at 00:41:30 CDT - 2019.09.07 AD at 00:48:36 CDT , PNumber : 11261, CandNumber : 71 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
-this(nodeType,left,right);
+this(nodeType,left,right,null);
 sourcePosition=mergeLineCharNo(lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5281/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.adapters.MessageArrayAdapter.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:48:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
 sourcePosition=mergeLineCharNo(lineno,charno);
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:48:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
-sourcePosition=mergeLineCharNo(lineno,charno);
+sourcePosition=left.mergeLineCharNo(lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/668/pattern-ver1-serial/src.jp.ac.aiit.jointry.controllers.MainController.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:48:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
-sourcePosition=mergeLineCharNo(lineno,charno);
+sourcePosition=right.mergeLineCharNo(lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/668/pattern-ver1-serial/src.jp.ac.aiit.jointry.controllers.MainController.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:48:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
-this(nodeType,left,right);
+this(nodeType,left,right,left);
 sourcePosition=mergeLineCharNo(lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2016/V29/6638/pattern-ver1-serial/src.main.java.edu.cmu.ml.rtw.generic.data.store.StorageMongo.java-createCollection.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:48:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
-this(nodeType,left,right);
+this(nodeType,left,right,right);
 sourcePosition=mergeLineCharNo(lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2016/V29/6638/pattern-ver1-serial/src.main.java.edu.cmu.ml.rtw.generic.data.store.StorageMongo.java-createCollection.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:48:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
-this(nodeType,left,right);
+this(nodeType,left,left,right);
 sourcePosition=mergeLineCharNo(lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5132/pattern-ver1-serial/xcheck.src.main.java.com.cmy.xcheck.util.handler.impl.LogicValidationHandlerImpl.java-validate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:49:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
+nodeType++;
 sourcePosition=mergeLineCharNo(lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:49:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
+lineno++;
 sourcePosition=mergeLineCharNo(lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:49:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
+charno++;
 sourcePosition=mergeLineCharNo(lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:49:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
 sourcePosition=mergeLineCharNo(lineno,charno);
+nodeType++;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:49:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
 sourcePosition=mergeLineCharNo(lineno,charno);
+lineno++;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:49:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
 sourcePosition=mergeLineCharNo(lineno,charno);
+charno++;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:49:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
 sourcePosition=mergeLineCharNo(lineno,charno);
+sourcePosition++;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:49:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
 sourcePosition=mergeLineCharNo(lineno,charno);
+nodeType--;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:49:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
 sourcePosition=mergeLineCharNo(lineno,charno);
+lineno--;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:49:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
 sourcePosition=mergeLineCharNo(lineno,charno);
+charno--;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:49:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
 sourcePosition=mergeLineCharNo(lineno,charno);
+sourcePosition--;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:49:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
+nodeType--;
 sourcePosition=mergeLineCharNo(lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:49:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
+lineno--;
 sourcePosition=mergeLineCharNo(lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:49:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
+charno--;
 sourcePosition=mergeLineCharNo(lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:49:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
+synchronized(this){
 sourcePosition=mergeLineCharNo(lineno,charno);
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:49:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
 sourcePosition=mergeLineCharNo(lineno,charno);
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:51:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
 sourcePosition=mergeLineCharNo(lineno,charno);
+left=this;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4878/pattern-ver1-serial/app.src.main.java.com.trukr.shipper.activity.Notification.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:52:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
 sourcePosition=mergeLineCharNo(lineno,charno);
+right=this;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4878/pattern-ver1-serial/app.src.main.java.com.trukr.shipper.activity.Notification.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:52:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
+if(mergeLineCharNo(lineno,charno)!=0){
 sourcePosition=mergeLineCharNo(lineno,charno);
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:52:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
-sourcePosition=mergeLineCharNo(lineno,charno);
+sourcePosition=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:52:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
 sourcePosition=mergeLineCharNo(lineno,charno);
+nodeType=nodeType;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:52:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
 sourcePosition=mergeLineCharNo(lineno,charno);
+left=left;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:52:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
 sourcePosition=mergeLineCharNo(lineno,charno);
+right=left;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:52:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
 sourcePosition=mergeLineCharNo(lineno,charno);
+left=right;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:52:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
 sourcePosition=mergeLineCharNo(lineno,charno);
+right=right;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:52:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
 sourcePosition=mergeLineCharNo(lineno,charno);
+lineno=lineno;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:52:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
 sourcePosition=mergeLineCharNo(lineno,charno);
+charno=charno;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:52:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
-sourcePosition=mergeLineCharNo(lineno,charno);
+sourcePosition=lineno;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:52:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
-sourcePosition=mergeLineCharNo(lineno,charno);
+sourcePosition=charno;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:52:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
-sourcePosition=mergeLineCharNo(lineno,charno);
+sourcePosition=nodeType;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:52:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
-sourcePosition=mergeLineCharNo(lineno,charno);
+sourcePosition=1;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6053/pattern-ver1-serial/src.monopoly.Dice.java-throwIt.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:52:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
 sourcePosition=mergeLineCharNo(lineno,charno);
+int sourcePosition=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:52:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
 sourcePosition=mergeLineCharNo(lineno,charno);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:52:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
+if(equals(lineno)){
+return ;
+}
 sourcePosition=mergeLineCharNo(lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:52:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
+if(equals(charno)){
+return ;
+}
 sourcePosition=mergeLineCharNo(lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:53:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
 sourcePosition=mergeLineCharNo(lineno,charno);
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:53:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
-sourcePosition=mergeLineCharNo(lineno,charno);
+sourcePosition=mergeLineCharNo(Math.max(lineno,charno),charno);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:53:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
-sourcePosition=mergeLineCharNo(lineno,charno);
+sourcePosition=mergeLineCharNo(lineno,Math.max(lineno,charno));
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:53:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
 sourcePosition=mergeLineCharNo(lineno,charno);
+boolean sourcePosition=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:53:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
-sourcePosition=mergeLineCharNo(lineno,charno);
+sourcePosition=mergeLineCharNo(lineno,charno)+1;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5032/pattern-ver1-serial/mapreduce.src.contrib.streaming.src.java.org.wikimedia.wikihadoop.StreamWikiDumpInputFormat.java-MyRecordReader.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:53:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
 sourcePosition=mergeLineCharNo(lineno,charno);
+boolean loggingIn=false;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/2030/pattern-ver1-serial/src.client.gui.batchstate.BatchState.java-BatchState.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:53:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
 sourcePosition=mergeLineCharNo(lineno,charno);
+right.getParent().removeChild(left);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/3722/pattern-ver1-serial/zeppelin-zengine.src.main.java.org.apache.zeppelin.notebook.FolderView.java-onFolderRenamed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:53:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
 sourcePosition=mergeLineCharNo(lineno,charno);
+left.getParent().removeChild(right);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/3722/pattern-ver1-serial/zeppelin-zengine.src.main.java.org.apache.zeppelin.notebook.FolderView.java-onFolderRenamed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:53:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
+if(lineno<0){
+return ;
+}
 sourcePosition=mergeLineCharNo(lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:53:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
+if(charno<0){
+return ;
+}
 sourcePosition=mergeLineCharNo(lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:53:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
-public Node(int nodeType,Node left,Node right,int lineno,int charno){
+public Node(int nodeType,Node left,Node right,int pIssued,int charno){
 this(nodeType,left,right);
-sourcePosition=mergeLineCharNo(lineno,charno);
+sourcePosition=pIssued;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4702/pattern-ver1-serial/snp.core.src.main.java.com.github.jlgrock.snp.core.domain.Observation.java-setIssued.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:53:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
-public Node(int nodeType,Node left,Node right,int lineno,int charno){
+public Node(int nodeType,Node left,Node right,int lineno,int pIssued){
 this(nodeType,left,right);
-sourcePosition=mergeLineCharNo(lineno,charno);
+sourcePosition=pIssued;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4702/pattern-ver1-serial/snp.core.src.main.java.com.github.jlgrock.snp.core.domain.Observation.java-setIssued.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:53:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
 sourcePosition=mergeLineCharNo(lineno,charno);
+if(sourcePosition==0){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:53:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
-public Node(int nodeType,Node left,Node right,int lineno,int charno){
+public Node(int nodeType,Node left,Node right,int thePrescribeMedicationCntl,int charno){
 this(nodeType,left,right);
-sourcePosition=mergeLineCharNo(lineno,charno);
+sourcePosition=thePrescribeMedicationCntl;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/1366/pattern-ver1-serial/src.healthhub.PrescribeMedicationUI_2.java-PrescribeMedicationUI_2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:53:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
-public Node(int nodeType,Node left,Node right,int lineno,int charno){
+public Node(int nodeType,Node left,Node right,int lineno,int thePrescribeMedicationCntl){
 this(nodeType,left,right);
-sourcePosition=mergeLineCharNo(lineno,charno);
+sourcePosition=thePrescribeMedicationCntl;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/1366/pattern-ver1-serial/src.healthhub.PrescribeMedicationUI_2.java-PrescribeMedicationUI_2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:53:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
+assert (left!=null);
 sourcePosition=mergeLineCharNo(lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:53:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
+assert (right!=null);
 sourcePosition=mergeLineCharNo(lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:53:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
-public Node(int nodeType,Node left,Node right,int lineno,int charno){
+public Node(int nodeType,Node left,Node right,int animationStyle,int charno){
 this(nodeType,left,right);
-sourcePosition=mergeLineCharNo(lineno,charno);
+sourcePosition=animationStyle;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3883/pattern-ver1-serial/app.src.main.java.com.shockn745.workoutmotivationaltool.motivation.recyclerview.animation.CardAnimator.java-setAnimationStyle.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:53:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
-public Node(int nodeType,Node left,Node right,int lineno,int charno){
+public Node(int nodeType,Node left,Node right,int lineno,int animationStyle){
 this(nodeType,left,right);
-sourcePosition=mergeLineCharNo(lineno,charno);
+sourcePosition=animationStyle;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3883/pattern-ver1-serial/app.src.main.java.com.shockn745.workoutmotivationaltool.motivation.recyclerview.animation.CardAnimator.java-setAnimationStyle.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:53:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
-sourcePosition=mergeLineCharNo(lineno,charno);
+sourcePosition=2;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6026/pattern-ver1-serial/advanced.mathfx.src.main.java.org.arakhne.afc.math.geometry.d2.dfx.Path2dfx.java-toDoubleArray.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:54:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
+if((Thread.currentThread().interrupted())){
+return ;
+}
 sourcePosition=mergeLineCharNo(lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:54:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
-sourcePosition=mergeLineCharNo(lineno,charno);
+sourcePosition=(mergeLineCharNo(lineno,charno)+lineno)%lineno;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:54:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
-sourcePosition=mergeLineCharNo(lineno,charno);
+sourcePosition=(mergeLineCharNo(lineno,charno)+charno)%charno;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:54:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
 sourcePosition=mergeLineCharNo(lineno,charno);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:54:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
 sourcePosition=mergeLineCharNo(lineno,charno);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:54:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
+if(lineno>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 sourcePosition=mergeLineCharNo(lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:54:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
+if(charno>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 sourcePosition=mergeLineCharNo(lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:54:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
 sourcePosition=mergeLineCharNo(lineno,charno);
+if(sourcePosition<0){
+sourcePosition=0;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:54:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[441,444]
------------Candidate---------------
 public Node(int nodeType,Node left,Node right,int lineno,int charno){
 this(nodeType,left,right);
+for(int i=0;i<24;i++){
 sourcePosition=mergeLineCharNo(lineno,charno);
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V34/7063/pattern-ver1-serial/src.application.rmi.Serveur.java-initalisationMain.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 00:54:24 CDT
--------------- END -----------------
Location : com.google.javascript.rhino.Node.propToString:[177, 197, 222, 225, 231, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 213, 215, 216, 217, 218, 219, 220, 223, 224, 226, 228, 229, 230, 232, 233, 234, 236, 240]#1.0
Compute Candidate : 2019.09.07 AD at 00:55:12 CDT - 2019.09.07 AD at 01:57:52 CDT , PNumber : 11186, CandNumber : 138 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
-return null;
+return new String();
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5649/pattern-ver1-serial/src.todolist.logic.FunctionChecker.java-deleteChecker.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:57:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return null;
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:57:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return null;
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:58:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return null;
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:58:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
-return "is_namespace";
+return null;
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:58:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
-return "local_block";
+return null;
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:58:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
-return "object_ids_prop";
+return null;
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:58:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
-return "catch_scope_prop";
+return null;
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:58:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
-return "label_id_prop";
+return null;
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:58:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
-return "target";
+return null;
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:58:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
-return "break";
+return null;
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:58:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
-return "continue";
+return null;
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/2037/pattern-ver1-serial/core.src.main.java.org.glowroot.transaction.PluginServicesImpl.java-getMessageSupplier.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:58:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return "";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:58:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:58:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return "";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:58:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
-return "is_namespace";
+return "";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:58:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
-return "local_block";
+return "";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:58:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
-return "object_ids_prop";
+return "";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:58:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
-return "catch_scope_prop";
+return "";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:58:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
-return "label_id_prop";
+return "";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:58:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
-return "target";
+return "";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:58:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
-return "break";
+return "";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:59:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
-return "enum";
+return null;
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4106/pattern-ver1-serial/Examples.src.concurrency.ThreadGroups.java-clone.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:59:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
-return null;
+return "";
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V9/5469/pattern-ver1-serial/OnlineBookStoreServer.src.Server.Routines.java-getMYSQLPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:59:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
+case 401 :
+
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1693/pattern-ver1-serial/src.main.java.uk.ac.ic.wlgitbridge.snapshot.getdoc.GetDocResult.java-fromJSON.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:59:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return propToString(0);
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:59:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return propToString(0);
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:59:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return propToString(0);
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:59:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
-return "is_namespace";
+return propToString(0);
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:59:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
-return "local_block";
+return propToString(0);
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:59:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
-return "object_ids_prop";
+return propToString(0);
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:59:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
-return "catch_scope_prop";
+return propToString(0);
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:59:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
-return "label_id_prop";
+return propToString(0);
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:59:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
-return "target";
+return propToString(0);
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:59:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
-return "break";
+return propToString(0);
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:59:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
+propType++;
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:59:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return "sourcename".trim();
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:59:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "synthetic".trim();
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:59:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return "originalname".trim();
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 01:59:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
-return "is_namespace";
+return "is_namespace".trim();
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:00:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
-return "local_block";
+return "local_block".trim();
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:00:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
-return "target";
+return "target".trim();
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:00:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
-return "object_ids_prop";
+return "object_ids_prop".trim();
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:00:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
-return "break";
+return "break".trim();
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:00:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
-return "catch_scope_prop";
+return "catch_scope_prop".trim();
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:00:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
-return "continue";
+return "continue".trim();
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:00:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return new String("sourcename");
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:00:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return new String("synthetic");
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:00:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return new String("originalname");
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:00:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
-return "is_namespace";
+return new String("is_namespace");
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:00:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
-return "local_block";
+return new String("local_block");
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:00:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
-return "object_ids_prop";
+return new String("object_ids_prop");
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:00:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
-return "target";
+return new String("target");
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:00:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
-return "catch_scope_prop";
+return new String("catch_scope_prop");
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:00:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
-return "break";
+return new String("break");
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:00:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
-return "continue";
+return new String("continue");
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:00:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
+propType--;
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:00:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return "sourcename".toLowerCase();
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:00:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "synthetic".toLowerCase();
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:01:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return "originalname".toLowerCase();
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:01:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
-return "is_namespace";
+return "is_namespace".toLowerCase();
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:01:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
-return "local_block";
+return "local_block".toLowerCase();
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:01:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
-return "object_ids_prop";
+return "object_ids_prop".toLowerCase();
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:01:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
-return "target";
+return "target".toLowerCase();
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:01:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
-return "catch_scope_prop";
+return "catch_scope_prop".toLowerCase();
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:01:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
-return "break";
+return "break".toLowerCase();
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:01:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
-return "label_id_prop";
+return "label_id_prop".toLowerCase();
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:01:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return (String)("sourcename");
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:01:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return (String)("synthetic");
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:01:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return (String)("originalname");
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:01:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
-return "is_namespace";
+return (String)("is_namespace");
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:01:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
-return "local_block";
+return (String)("local_block");
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:01:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
-return "object_ids_prop";
+return (String)("object_ids_prop");
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:01:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
-return "catch_scope_prop";
+return (String)("catch_scope_prop");
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:01:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
-return "label_id_prop";
+return (String)("label_id_prop");
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:01:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
-return "target";
+return (String)("target");
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:01:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
-return "break";
+return (String)("break");
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:01:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
-private static final String propToString(int propType){
-switch (propType){
+private static final String propToString(int stepNumber){
+switch (stepNumber){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6757/pattern-ver1-serial/app.src.main.java.verticalstepperform.ernestoyaquello.com.verticalstepperform.NewAlarmFormActivity.java-createStepContentView.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:01:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
+int a=0;
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:02:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
+String OUTSTRING="";
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:02:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
+int a=1;
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:02:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
+boolean b=true;
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:02:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
+}
+if("&null".equals(propType)){
+return null;
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:02:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
+if(propType<0){
+return null;
+}
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:02:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return "sourcename".replaceAll("\r","");
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:02:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "synthetic".replaceAll("\r","");
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:02:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return "originalname".replaceAll("\r","");
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:02:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
-return "is_namespace";
+return "is_namespace".replaceAll("\r","");
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:02:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
-return "local_block";
+return "local_block".replaceAll("\r","");
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:02:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
-return "target";
+return "target".replaceAll("\r","");
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:02:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
-return "object_ids_prop";
+return "object_ids_prop".replaceAll("\r","");
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:02:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
-return "break";
+return "break".replaceAll("\r","");
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:02:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
-return "catch_scope_prop";
+return "catch_scope_prop".replaceAll("\r","");
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:02:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
-return "continue";
+return "continue".replaceAll("\r","");
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:02:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return String.format("%s","sourcename");
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:02:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return String.format("%s","synthetic");
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:02:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return String.format("%s","originalname");
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:03:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
-return "is_namespace";
+return String.format("%s","is_namespace");
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:03:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
-return "local_block";
+return String.format("%s","local_block");
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:03:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
-return "object_ids_prop";
+return String.format("%s","object_ids_prop");
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:03:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
-return "target";
+return String.format("%s","target");
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:03:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
-return "catch_scope_prop";
+return String.format("%s","catch_scope_prop");
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:03:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
-return "break";
+return String.format("%s","break");
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:03:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
-return "continue";
+return String.format("%s","continue");
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:03:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
+}
+if((Thread.currentThread().interrupted())){
+return null;
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:03:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return "sourcename"==null?"":"sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:03:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "synthetic"==null?"":"synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:03:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return "originalname"==null?"":"originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:03:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
-return "is_namespace";
+return "is_namespace"==null?"":"is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:03:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
-return "local_block";
+return "local_block"==null?"":"local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:03:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
-return "target";
+return "target"==null?"":"target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:03:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
-return "object_ids_prop";
+return "object_ids_prop"==null?"":"object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:03:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
-return "break";
+return "break"==null?"":"break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:03:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
-return "catch_scope_prop";
+return "catch_scope_prop"==null?"":"catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:03:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
-return "continue";
+return "continue"==null?"":"continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:04:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return "sourcename"!=null?"sourcename":new String();
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:04:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "synthetic"!=null?"synthetic":new String();
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:04:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return "originalname"!=null?"originalname":new String();
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:04:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
-return "is_namespace";
+return "is_namespace"!=null?"is_namespace":new String();
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:04:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
-return "local_block";
+return "local_block"!=null?"local_block":new String();
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:04:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
-return "target";
+return "target"!=null?"target":new String();
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:04:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
-return "object_ids_prop";
+return "object_ids_prop"!=null?"object_ids_prop":new String();
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:04:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
-return "break";
+return "break"!=null?"break":new String();
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:04:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
-return "catch_scope_prop";
+return "catch_scope_prop"!=null?"catch_scope_prop":new String();
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:04:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
-return "continue";
+return "continue"!=null?"continue":new String();
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:04:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return "sourcename"==null?new String():"sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:04:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "synthetic"==null?new String():"synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:04:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return "originalname"==null?new String():"originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:04:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
-return "is_namespace";
+return "is_namespace"==null?new String():"is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:04:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
-return "local_block";
+return "local_block"==null?new String():"local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:04:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
-return "target";
+return "target"==null?new String():"target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:04:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
-return "break";
+return "break"==null?new String():"break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:04:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
-return "object_ids_prop";
+return "object_ids_prop"==null?new String():"object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:05:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
-return "continue";
+return "continue"==null?new String():"continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:05:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
-return "enum";
+return "enum"==null?new String():"enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:05:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
+assert (propType>=0):"Receive a negative tratment";
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:05:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private static final String propToString(int propType){
+assert (propType!=0):"Receive a size tratment";
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:05:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
+if(propType>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:05:17 CDT
--------------- END -----------------
Location : com.google.javascript.rhino.Node.newString:[511]#1.0
Compute Candidate : 2019.09.07 AD at 02:06:05 CDT - 2019.09.07 AD at 02:11:22 CDT , PNumber : 11174, CandNumber : 29 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[510,512]
------------Candidate---------------
 public static Node newString(int type,String str,int lineno,int charno){
-return new StringNode(type,str,lineno,charno);
+return new StringNode(type+1,str,lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/4700/pattern-ver1-serial/src.main.java.org.javaan.print.GraphPrinter.java-visitVertex.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:11:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[510,512]
------------Candidate---------------
 public static Node newString(int type,String str,int lineno,int charno){
-return new StringNode(type,str,lineno,charno);
+return new StringNode(type,str,lineno+1,charno);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/4700/pattern-ver1-serial/src.main.java.org.javaan.print.GraphPrinter.java-visitVertex.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:11:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[510,512]
------------Candidate---------------
 public static Node newString(int type,String str,int lineno,int charno){
-return new StringNode(type,str,lineno,charno);
+return new StringNode(type,str,lineno,charno+1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/4700/pattern-ver1-serial/src.main.java.org.javaan.print.GraphPrinter.java-visitVertex.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:11:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[510,512]
------------Candidate---------------
 public static Node newString(int type,String str,int lineno,int charno){
+int a=0;
 return new StringNode(type,str,lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:11:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[510,512]
------------Candidate---------------
 public static Node newString(int type,String str,int lineno,int charno){
+String OUTSTRING="";
 return new StringNode(type,str,lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:11:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[510,512]
------------Candidate---------------
 public static Node newString(int type,String str,int lineno,int charno){
+if(str.isEmpty()){
+return null;
+}
 return new StringNode(type,str,lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:11:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[510,512]
------------Candidate---------------
 public static Node newString(int type,String str,int lineno,int charno){
+int a=1;
 return new StringNode(type,str,lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:11:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[510,512]
------------Candidate---------------
 public static Node newString(int type,String str,int lineno,int charno){
+boolean b=true;
 return new StringNode(type,str,lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:11:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[510,512]
------------Candidate---------------
 public static Node newString(int type,String str,int lineno,int charno){
+if(str==null){
+return null;
+}
 return new StringNode(type,str,lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:11:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[510,512]
------------Candidate---------------
 public static Node newString(int type,String str,int lineno,int charno){
+if(type<0){
+return null;
+}
 return new StringNode(type,str,lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:11:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[510,512]
------------Candidate---------------
 public static Node newString(int type,String str,int lineno,int charno){
+if(lineno<0){
+return null;
+}
 return new StringNode(type,str,lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:11:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[510,512]
------------Candidate---------------
 public static Node newString(int type,String str,int lineno,int charno){
+if(charno<0){
+return null;
+}
 return new StringNode(type,str,lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:11:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[510,512]
------------Candidate---------------
 public static Node newString(int type,String str,int lineno,int charno){
+assert (str!=null);
 return new StringNode(type,str,lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:12:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[510,512]
------------Candidate---------------
 public static Node newString(int type,String str,int lineno,int charno){
+if(str!=null){
+return new StringNode(type,str,lineno,charno);
+}
 return new StringNode(type,str,lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:12:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[510,512]
------------Candidate---------------
 public static Node newString(int type,String str,int lineno,int charno){
-return new StringNode(type,str,lineno,charno);
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:12:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[510,512]
------------Candidate---------------
 public static Node newString(int type,String str,int lineno,int charno){
+assert (type>=0):"Receive a negative tratment";
 return new StringNode(type,str,lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:12:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[510,512]
------------Candidate---------------
 public static Node newString(int type,String str,int lineno,int charno){
+assert (lineno>=0):"Receive a negative tratment";
 return new StringNode(type,str,lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:12:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[510,512]
------------Candidate---------------
 public static Node newString(int type,String str,int lineno,int charno){
+assert (charno>=0):"Receive a negative tratment";
 return new StringNode(type,str,lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:12:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[510,512]
------------Candidate---------------
 public static Node newString(int type,String str,int lineno,int charno){
-return new StringNode(type,str,lineno,charno);
+return (Node)(new StringNode(type,str,lineno,charno));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:12:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[510,512]
------------Candidate---------------
 public static Node newString(int type,String str,int lineno,int charno){
+if(str.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 return new StringNode(type,str,lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:12:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[510,512]
------------Candidate---------------
 public static Node newString(int type,String str,int lineno,int charno){
+assert (str!=null):"Appointments day is not allowed to be null!";
 return new StringNode(type,str,lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:12:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[510,512]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static Node newString(int type,String str,int lineno,int charno){
+assert (type!=0):"Receive a size tratment";
 return new StringNode(type,str,lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:12:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[510,512]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static Node newString(int type,String str,int lineno,int charno){
+assert (lineno!=0):"Receive a size tratment";
 return new StringNode(type,str,lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:12:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[510,512]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public static Node newString(int type,String str,int lineno,int charno){
+assert (charno!=0):"Receive a size tratment";
 return new StringNode(type,str,lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:12:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[510,512]
------------Candidate---------------
 public static Node newString(int type,String str,int lineno,int charno){
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 return new StringNode(type,str,lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:12:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[510,512]
------------Candidate---------------
 public static Node newString(int type,String str,int lineno,int charno){
+if(type>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 return new StringNode(type,str,lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:12:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[510,512]
------------Candidate---------------
 public static Node newString(int type,String str,int lineno,int charno){
+if(lineno>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 return new StringNode(type,str,lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:12:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[510,512]
------------Candidate---------------
 public static Node newString(int type,String str,int lineno,int charno){
+if(charno>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 return new StringNode(type,str,lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:12:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[510,512]
------------Candidate---------------
 public static Node newString(int type,String str,int lineno,int charno){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 return new StringNode(type,str,lineno,charno);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:12:50 CDT
--------------- END -----------------
Location : com.google.javascript.rhino.Node.addChildBefore:[623, 625, 627, 629, 635, 636, 637, 630, 631, 632, 633]#1.0
Compute Candidate : 2019.09.07 AD at 02:13:38 CDT - 2019.09.07 AD at 02:27:33 CDT , PNumber : 11335, CandNumber : 355 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
+import java.nio.file.StandardCopyOption;
+
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.",StandardCopyOption.REPLACE_EXISTING);
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/1692/pattern-ver1-serial/src.main.java.sitecreators.utils.image.ImageDAOImpl.java-saveImage.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:27:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
+import java.nio.file.StandardCopyOption;
+
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.",StandardCopyOption.REPLACE_EXISTING);
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/1692/pattern-ver1-serial/src.main.java.sitecreators.utils.image.ImageDAOImpl.java-saveImage.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:27:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
+import java.nio.file.StandardCopyOption;
+
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.",StandardCopyOption.REPLACE_EXISTING);
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/1692/pattern-ver1-serial/src.main.java.sitecreators.utils.image.ImageDAOImpl.java-saveImage.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:27:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V45/3473/pattern-ver1-serial/src.main.java.com.fabegabe.cmd.CCCommand.java-onCommand.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:27:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.",node);
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7601/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.plugins.discovery.smis.DataCollectionJobUtil.java-getAccessProfile.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:27:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.",newChild);
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7601/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.plugins.discovery.smis.DataCollectionJobUtil.java-getAccessProfile.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:27:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.",node);
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7601/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.plugins.discovery.smis.DataCollectionJobUtil.java-getAccessProfile.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:27:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.",newChild);
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7601/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.plugins.discovery.smis.DataCollectionJobUtil.java-getAccessProfile.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:27:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.",node);
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7601/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.plugins.discovery.smis.DataCollectionJobUtil.java-getAccessProfile.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:28:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.",newChild);
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7601/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.plugins.discovery.smis.DataCollectionJobUtil.java-getAccessProfile.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:28:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.",this);
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/4096/pattern-ver1-serial/src.gui.PlayerGUI.java-showGameChooser.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:28:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.",this);
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/4096/pattern-ver1-serial/src.gui.PlayerGUI.java-showGameChooser.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:28:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.",this);
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/4096/pattern-ver1-serial/src.gui.PlayerGUI.java-showGameChooser.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:28:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
-Node prev=getChildBefore(node);
+ Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:28:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.",false);
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/3756/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.networkcontroller.impl.mds.MdsNetworkSystemDevice.java-createActiveZoneset.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:28:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.",false);
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/3756/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.networkcontroller.impl.mds.MdsNetworkSystemDevice.java-createActiveZoneset.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:28:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.",false);
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/3756/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.networkcontroller.impl.mds.MdsNetworkSystemDevice.java-createActiveZoneset.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:28:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
-first=newChild;
+first=this;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/3216/pattern-ver1-serial/instagram_integration.app.src.main.java.com.hha.instagram_integration.Photo.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:28:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
-newChild.next=first;
+newChild.next=this;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/3216/pattern-ver1-serial/instagram_integration.app.src.main.java.com.hha.instagram_integration.Photo.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:28:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+Preconditions.checkArgument(node==null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:28:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.",true);
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4436/pattern-ver1-serial/src.main.java.org.smartreaction.starrealms.model.players.Player.java-optionallyScrapCardsFromHandOrDiscard.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:28:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.",true);
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4436/pattern-ver1-serial/src.main.java.org.smartreaction.starrealms.model.players.Player.java-optionallyScrapCardsFromHandOrDiscard.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:28:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.",true);
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4436/pattern-ver1-serial/src.main.java.org.smartreaction.starrealms.model.players.Player.java-optionallyScrapCardsFromHandOrDiscard.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:28:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.",0);
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V39/7029/pattern-ver1-serial/app.src.main.java.hu.bme.simonyi.acstudio.analogchaosinventoryapp.inventory.TreeCreator.java-createTree.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:28:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.",0);
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V39/7029/pattern-ver1-serial/app.src.main.java.hu.bme.simonyi.acstudio.analogchaosinventoryapp.inventory.TreeCreator.java-createTree.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:28:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.",0);
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V39/7029/pattern-ver1-serial/app.src.main.java.hu.bme.simonyi.acstudio.analogchaosinventoryapp.inventory.TreeCreator.java-createTree.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:28:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
-addChildAfter(newChild,prev);
+prev.addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3555/pattern-ver1-serial/bpm.bonita-core.bonita-process-engine.src.main.java.org.bonitasoft.engine.api.impl.PlatformAPIImpl.java-createTenantFolderInBonitaHome.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:28:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
-Node prev=getChildBefore(node);
+Node prev=node.getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3555/pattern-ver1-serial/bpm.bonita-core.bonita-process-engine.src.main.java.org.bonitasoft.engine.api.impl.PlatformAPIImpl.java-createTenantFolderInBonitaHome.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:29:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
-addChildAfter(newChild,prev);
+newChild.addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3555/pattern-ver1-serial/bpm.bonita-core.bonita-process-engine.src.main.java.org.bonitasoft.engine.api.impl.PlatformAPIImpl.java-createTenantFolderInBonitaHome.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:29:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
-addChildAfter(newChild,prev);
+first.addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/668/pattern-ver1-serial/src.jp.ac.aiit.jointry.controllers.MainController.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:29:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
-addChildAfter(newChild,prev);
+node.addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/668/pattern-ver1-serial/src.jp.ac.aiit.jointry.controllers.MainController.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:29:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
-addChildAfter(newChild,prev);
+newChild.parent.addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/668/pattern-ver1-serial/src.jp.ac.aiit.jointry.controllers.MainController.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:29:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
-addChildAfter(newChild,prev);
+newChild.next.addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/668/pattern-ver1-serial/src.jp.ac.aiit.jointry.controllers.MainController.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:29:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
-Node prev=getChildBefore(node);
+Node prev=first.getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/668/pattern-ver1-serial/src.jp.ac.aiit.jointry.controllers.MainController.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:29:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
-Node prev=getChildBefore(node);
+Node prev=newChild.getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/668/pattern-ver1-serial/src.jp.ac.aiit.jointry.controllers.MainController.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:29:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
-Node prev=getChildBefore(node);
+Node prev=newChild.parent.getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1651/pattern-ver1-serial/src.main.java.au.com.rayh.XCodeBuilder.java-perform.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:29:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.","");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V10/4137/pattern-ver1-serial/src.main.java.com.quix.aia.cn.imo.mapper.EopAttendanceMaintenance.java-eopAttendanceListing.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:29:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.","");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V10/4137/pattern-ver1-serial/src.main.java.com.quix.aia.cn.imo.mapper.EopAttendanceMaintenance.java-eopAttendanceListing.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:29:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.","");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V10/4137/pattern-ver1-serial/src.main.java.com.quix.aia.cn.imo.mapper.EopAttendanceMaintenance.java-eopAttendanceListing.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:29:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.",1);
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V63/2568/pattern-ver1-serial/src.framework.scuba.domain.AllocLoc.java-AllocLoc.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:29:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.",1);
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V63/2568/pattern-ver1-serial/src.framework.scuba.domain.AllocLoc.java-AllocLoc.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:29:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.",1);
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V63/2568/pattern-ver1-serial/src.framework.scuba.domain.AllocLoc.java-AllocLoc.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:29:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
-newChild.parent=this;
+newChild.parent=node;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:29:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
-newChild.parent=this;
+newChild.parent=newChild;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:29:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
-newChild.next=first;
+newChild.next=node;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:29:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
-newChild.next=first;
+newChild.next=newChild;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:29:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
-first=newChild;
+first=node;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:30:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
-first=newChild;
+first=null;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:30:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
-newChild.parent=this;
+newChild.parent=null;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:30:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
-newChild.next=first;
+newChild.next=null;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:30:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
-if(first==node){
+if(first!=node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V26/4543/pattern-ver1-serial/launcher.src.main.java.com.benny.openlauncher.widget.GridAppDrawer.java-readyForDrag.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:30:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.",first);
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/4052/pattern-ver1-serial/01_brick.core.src.hu.bp.gdx.game.BrickScreen.java-BrickScreen.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:30:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.",newChild.parent);
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/4052/pattern-ver1-serial/01_brick.core.src.hu.bp.gdx.game.BrickScreen.java-BrickScreen.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:30:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.",newChild.next);
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/4052/pattern-ver1-serial/01_brick.core.src.hu.bp.gdx.game.BrickScreen.java-BrickScreen.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:30:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.",first);
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/4052/pattern-ver1-serial/01_brick.core.src.hu.bp.gdx.game.BrickScreen.java-BrickScreen.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:30:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.",first);
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/4052/pattern-ver1-serial/01_brick.core.src.hu.bp.gdx.game.BrickScreen.java-BrickScreen.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:30:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.",newChild.parent);
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/4052/pattern-ver1-serial/01_brick.core.src.hu.bp.gdx.game.BrickScreen.java-BrickScreen.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:30:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.",newChild.next);
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/4052/pattern-ver1-serial/01_brick.core.src.hu.bp.gdx.game.BrickScreen.java-BrickScreen.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:30:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.",newChild.parent);
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/4052/pattern-ver1-serial/01_brick.core.src.hu.bp.gdx.game.BrickScreen.java-BrickScreen.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:30:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.",newChild.next);
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/4052/pattern-ver1-serial/01_brick.core.src.hu.bp.gdx.game.BrickScreen.java-BrickScreen.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:30:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+Preconditions.checkArgument(newChild!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:30:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+Preconditions.checkArgument(first!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1150/pattern-ver1-serial/src.main.java.de.nedelosk.modularmachines.client.gui.GuiAssembler.java-onUpdate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:30:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+Preconditions.checkArgument(newChild.parent!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1150/pattern-ver1-serial/src.main.java.de.nedelosk.modularmachines.client.gui.GuiAssembler.java-onUpdate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:30:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+Preconditions.checkArgument(newChild.next!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1150/pattern-ver1-serial/src.main.java.de.nedelosk.modularmachines.client.gui.GuiAssembler.java-onUpdate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:30:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.",2);
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/1189/pattern-ver1-serial/eclipse.plugins.org.switchyard.tools.ui.editor.src.org.switchyard.tools.ui.editor.components.camel.jms.CamelJmsComposite.java-getJmsTabControl.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:31:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.",2);
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/1189/pattern-ver1-serial/eclipse.plugins.org.switchyard.tools.ui.editor.src.org.switchyard.tools.ui.editor.components.camel.jms.CamelJmsComposite.java-getJmsTabControl.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:31:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.",2);
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/1189/pattern-ver1-serial/eclipse.plugins.org.switchyard.tools.ui.editor.src.org.switchyard.tools.ui.editor.components.camel.jms.CamelJmsComposite.java-getJmsTabControl.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:31:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+Preconditions.checkArgument(newChild.first==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3218/pattern-ver1-serial/VirtualApp.lib.src.main.java.com.lody.virtual.service.am.VActivityManagerService.java-startServiceCommon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:31:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3884/pattern-ver1-serial/TcpChat.src.client.gui.ClientGuiThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:31:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3884/pattern-ver1-serial/TcpChat.src.client.gui.ClientGuiThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:31:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
+Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3884/pattern-ver1-serial/TcpChat.src.client.gui.ClientGuiThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:31:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+Preconditions.checkArgument(first.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/4812/pattern-ver1-serial/src.org.rascalmpl.library.experiments.Compiler.RVM.Interpreter.Thrown.java-printStackTrace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:31:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+Preconditions.checkArgument(node.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/4812/pattern-ver1-serial/src.org.rascalmpl.library.experiments.Compiler.RVM.Interpreter.Thrown.java-printStackTrace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:31:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+Preconditions.checkArgument(first.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/4812/pattern-ver1-serial/src.org.rascalmpl.library.experiments.Compiler.RVM.Interpreter.Thrown.java-printStackTrace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:31:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+Preconditions.checkArgument(newChild.parent.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/4812/pattern-ver1-serial/src.org.rascalmpl.library.experiments.Compiler.RVM.Interpreter.Thrown.java-printStackTrace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:31:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+Preconditions.checkArgument(newChild.next.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/4812/pattern-ver1-serial/src.org.rascalmpl.library.experiments.Compiler.RVM.Interpreter.Thrown.java-printStackTrace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:31:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+Preconditions.checkArgument(node.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/4812/pattern-ver1-serial/src.org.rascalmpl.library.experiments.Compiler.RVM.Interpreter.Thrown.java-printStackTrace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:31:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+Preconditions.checkArgument(newChild.parent.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/4812/pattern-ver1-serial/src.org.rascalmpl.library.experiments.Compiler.RVM.Interpreter.Thrown.java-printStackTrace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:31:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+Preconditions.checkArgument(newChild.next.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/4812/pattern-ver1-serial/src.org.rascalmpl.library.experiments.Compiler.RVM.Interpreter.Thrown.java-printStackTrace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:31:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
-Node prev=getChildBefore(node);
+Node prev=newChild.next.getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/1157/pattern-ver1-serial/src.main.java.net.enanomapper.parser.json.JsonUtilities.java-extractDoubleKeyword.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:31:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.",-1);
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V35/314/pattern-ver1-serial/android.src.main.java.notification.templates.TextFieldTemplate.java-getGraphicComponent.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:31:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.",-1);
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V35/314/pattern-ver1-serial/android.src.main.java.notification.templates.TextFieldTemplate.java-getGraphicComponent.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:31:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.",-1);
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V35/314/pattern-ver1-serial/android.src.main.java.notification.templates.TextFieldTemplate.java-getGraphicComponent.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:31:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.",false);
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.",false);
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/5598/pattern-ver1-serial/Foraging_Robot_Swarm.src.Robot.BeeBot.java-getNewPosition.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:31:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.",false);
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.",false);
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/5598/pattern-ver1-serial/Foraging_Robot_Swarm.src.Robot.BeeBot.java-getNewPosition.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:32:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.",false);
+Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.",false);
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/5598/pattern-ver1-serial/Foraging_Robot_Swarm.src.Robot.BeeBot.java-getNewPosition.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:32:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+Preconditions.checkArgument(first!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
-Node prev=getChildBefore(node);
+Node prev=first.getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V27/2709/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.expressions.Point2DExpression.java-getTablesInvolved.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:32:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
+synchronized(this){
 first=newChild;
+}
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:32:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.",true);
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.",true);
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/5857/pattern-ver1-serial/src.model.model.scripting.baseEdition.Script_00092_EnergieAbsauger.java-playFromHand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:32:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.",true);
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.",true);
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/5857/pattern-ver1-serial/src.model.model.scripting.baseEdition.Script_00092_EnergieAbsauger.java-playFromHand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:32:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.",true);
+Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.",true);
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/5857/pattern-ver1-serial/src.model.model.scripting.baseEdition.Script_00092_EnergieAbsauger.java-playFromHand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:32:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.",null);
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.",null);
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V10/6571/pattern-ver1-serial/src.ijordan.matrixonator.MainApp.java-MainApp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:32:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.",null);
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.",null);
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V10/6571/pattern-ver1-serial/src.ijordan.matrixonator.MainApp.java-MainApp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:32:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.",null);
+Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.",null);
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V10/6571/pattern-ver1-serial/src.ijordan.matrixonator.MainApp.java-MainApp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:32:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
+synchronized(this){
 newChild.parent=this;
+}
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:32:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
+synchronized(this){
 newChild.next=first;
+}
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:32:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.",null,null);
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V45/4590/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.modules.internal.presence.OwnPresenceActor.java-performOnline.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:32:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.",null,null);
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V45/4590/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.modules.internal.presence.OwnPresenceActor.java-performOnline.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:32:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.",null,null);
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V45/4590/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.modules.internal.presence.OwnPresenceActor.java-performOnline.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:32:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
-first=newChild;
+this.first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/130/pattern-ver1-serial/src.Deque.java-DequeIterator.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:32:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+synchronized(this){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+}
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:32:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+synchronized(this){
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+}
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:32:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+synchronized(this){
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+}
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:32:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+synchronized(this){
 addChildAfter(newChild,prev);
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:32:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+if(equals(node)){
+return ;
+}
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:33:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+if(equals(newChild)){
+return ;
+}
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:33:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+if(equals(newChild)){
+return ;
+}
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:33:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
+return ;
+}
+if(equals(node)){
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:33:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+if(equals(node)){
+return ;
+}
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:33:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(equals(newChild)){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:33:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.",false,true);
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/3948/pattern-ver1-serial/jboss-admin.src.main.java.org.teiid.adminapi.jboss.AdminFactory.java-getRequestsForSession.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:33:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.",false,true);
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/3948/pattern-ver1-serial/jboss-admin.src.main.java.org.teiid.adminapi.jboss.AdminFactory.java-getRequestsForSession.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:33:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.",false,true);
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/3948/pattern-ver1-serial/jboss-admin.src.main.java.org.teiid.adminapi.jboss.AdminFactory.java-getRequestsForSession.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:33:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:35:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+synchronized(this){
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
+}
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:35:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.",node.getType());
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/5688/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.block.XIVMaskingOrchestrator.java-createNewExportMaskWorkflowForInitiators.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:35:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.",newChild.getType());
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/5688/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.block.XIVMaskingOrchestrator.java-createNewExportMaskWorkflowForInitiators.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:35:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.",node.getType());
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/5688/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.block.XIVMaskingOrchestrator.java-createNewExportMaskWorkflowForInitiators.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:35:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.",newChild.getType());
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/5688/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.block.XIVMaskingOrchestrator.java-createNewExportMaskWorkflowForInitiators.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:35:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.",node.getType());
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/5688/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.block.XIVMaskingOrchestrator.java-createNewExportMaskWorkflowForInitiators.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:35:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.",newChild.getType());
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/5688/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.block.XIVMaskingOrchestrator.java-createNewExportMaskWorkflowForInitiators.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:35:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
+if(newChild==null){
+return ;
+}
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:35:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+if(node==null){
+return ;
+}
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:35:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+if(newChild==null){
+return ;
+}
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:35:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(prev==null){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:35:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
+if(newChild==null){
+return ;
+}
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:35:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+if(node==null){
+return ;
+}
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:36:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+if(newChild==null){
+return ;
+}
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:36:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+node=this;
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4878/pattern-ver1-serial/app.src.main.java.com.trukr.shipper.activity.Notification.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:36:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+newChild=this;
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4878/pattern-ver1-serial/app.src.main.java.com.trukr.shipper.activity.Notification.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:36:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+next=this;
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4878/pattern-ver1-serial/app.src.main.java.com.trukr.shipper.activity.Notification.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:38:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
+newChild=this;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4878/pattern-ver1-serial/app.src.main.java.com.trukr.shipper.activity.Notification.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:38:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
+parent=this;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4878/pattern-ver1-serial/app.src.main.java.com.trukr.shipper.activity.Notification.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:38:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+if(node==newChild){
+return ;
+}
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/2945/pattern-ver1-serial/code.src.ast.MinMaxRedundancy.java-checkRedundant.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+if(newChild==node){
+return ;
+}
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/2945/pattern-ver1-serial/code.src.ast.MinMaxRedundancy.java-checkRedundant.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:38:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(node==prev){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/2945/pattern-ver1-serial/code.src.ast.MinMaxRedundancy.java-checkRedundant.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:38:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(prev==node){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/2945/pattern-ver1-serial/code.src.ast.MinMaxRedundancy.java-checkRedundant.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:38:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(newChild==prev){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/2945/pattern-ver1-serial/code.src.ast.MinMaxRedundancy.java-checkRedundant.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:38:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(prev==newChild){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/2945/pattern-ver1-serial/code.src.ast.MinMaxRedundancy.java-checkRedundant.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:38:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+if(newChild==null){
+return ;
+}
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:38:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
+return ;
+}
+if(node==null){
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:38:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
-if(first==node){
+if(first.equals(node)){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:38:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
-if(first==node){
+if(node.equals(first)){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7020/pattern-ver1-serial/simulator.src.main.java.com.hazelcast.simulator.protocol.connector.AbstractServerConnector.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:38:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
+if("index".equals(newChild)){
+return ;
+}
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+if("index".equals(node)){
+return ;
+}
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:38:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+if("index".equals(newChild)){
+return ;
+}
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:38:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if("index".equals(prev)){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:38:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
+if(newChild.equals("TIME")){
+return ;
+}
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:39:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+if(node.equals("TIME")){
+return ;
+}
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:39:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+if(newChild.equals("TIME")){
+return ;
+}
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:39:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(prev.equals("TIME")){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:39:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
+if("&null".equals(newChild)){
+return ;
+}
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:39:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+if("&null".equals(node)){
+return ;
+}
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:39:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+if("&null".equals(newChild)){
+return ;
+}
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:39:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if("&null".equals(prev)){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:39:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
+if(newChild.equals("DATETIME")){
+return ;
+}
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:39:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+if(node.equals("DATETIME")){
+return ;
+}
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:39:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+if(newChild.equals("DATETIME")){
+return ;
+}
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:39:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(prev.equals("DATETIME")){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:39:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+newChild.next=newChild;
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:39:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+newChild=newChild;
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:39:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+newChild.parent=newChild;
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:39:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
+newChild.parent=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:39:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
+newChild.next=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:39:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(prev.equals("")){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:39:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
-if(first==node){
+if(true){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:39:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
+import java.util.Map.Entry;
+
 public void addChildBefore(Node newChild,Node node){
+if(!"The existing child node of the parent should not be null.".isEmpty()){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+}
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/735/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.FileStorageScheduler.java-getRecommendedVirtualNASBasedOnCandidatePools.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:40:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
+import java.util.Map.Entry;
+
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+if(!"The new child node has siblings.".isEmpty()){
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+}
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/735/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.FileStorageScheduler.java-getRecommendedVirtualNASBasedOnCandidatePools.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:40:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
+import java.util.Map.Entry;
+
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+if(!"The new child node already has a parent.".isEmpty()){
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+}
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/735/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.FileStorageScheduler.java-getRecommendedVirtualNASBasedOnCandidatePools.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:40:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+if("The existing child node of the parent should not be null."!=null){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+}
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/6062/pattern-ver1-serial/src.main.java.org.openarchives.resourcesync.ResourceSyncDescription.java-addCapabilityList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:40:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+if("The new child node has siblings."!=null){
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+}
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/6062/pattern-ver1-serial/src.main.java.org.openarchives.resourcesync.ResourceSyncDescription.java-addCapabilityList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:40:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+if("The new child node already has a parent."!=null){
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+}
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/6062/pattern-ver1-serial/src.main.java.org.openarchives.resourcesync.ResourceSyncDescription.java-addCapabilityList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:40:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
+if(newChild.parent==null){
 newChild.parent=this;
+}
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:40:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
+if(newChild.next==null){
 newChild.next=first;
+}
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:40:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
+if(first==null){
 first=newChild;
+}
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:40:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(prev.equals("-1")){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:40:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
+int a=0;
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:40:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+int a=0;
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:40:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+if(newChild.equals(node)){
+return ;
+}
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:40:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+if(node.equals(newChild)){
+return ;
+}
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:40:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(prev.equals(node)){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:40:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(node.equals(prev)){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:40:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(prev.equals(newChild)){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:40:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(newChild.equals(prev)){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:40:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
+String OUTSTRING="";
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:40:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+String OUTSTRING="";
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:40:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+int Preconditions=5;
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:41:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+int next=5;
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:41:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
+if(newChild!=null){
 first=newChild;
+}
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/663/pattern-ver1-serial/src.ceprei.appcrawler.config.FileAppCrawlerConfig.java-FileAppCrawlerConfig.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:41:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
+if(node.equals(InputStream.class)){
+return ;
+}
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:41:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public void addChildBefore(Node newChild,Node node){
+if(node.equals(InputStream.class)){
+return ;
+}
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:41:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public void addChildBefore(Node newChild,Node node){
+if(newChild.equals(InputStream.class)){
+return ;
+}
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(node.equals(InputStream.class)){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:41:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(prev.equals(InputStream.class)){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:41:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(newChild.equals(InputStream.class)){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:41:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:41:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
+int indexSelection=0;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:41:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+int indexSelection=0;
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:41:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(newChild.equals("setPackMode")){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:41:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(prev.equals("setPackMode")){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:41:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(node.equals("setPackMode")){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:41:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
+int a=1;
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:41:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+int a=1;
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:41:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+String next="%#.&f";
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:42:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
+String parent="%#.&f";
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
+boolean Preconditions=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:42:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
+boolean b=true;
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:42:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+boolean b=true;
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:42:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(prev.equals(null)){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:42:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
+if((Thread.currentThread().interrupted())){
+return ;
+}
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:42:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+if((Thread.currentThread().interrupted())){
+return ;
+}
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:42:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+node.getParent().removeChild(newChild);
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/3722/pattern-ver1-serial/zeppelin-zengine.src.main.java.org.apache.zeppelin.notebook.FolderView.java-onFolderRenamed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:42:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+newChild.getParent().removeChild(node);
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/3722/pattern-ver1-serial/zeppelin-zengine.src.main.java.org.apache.zeppelin.notebook.FolderView.java-onFolderRenamed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:42:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+node.getParent().removeChild(prev);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/3722/pattern-ver1-serial/zeppelin-zengine.src.main.java.org.apache.zeppelin.notebook.FolderView.java-onFolderRenamed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:42:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+newChild.getParent().removeChild(prev);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/3722/pattern-ver1-serial/zeppelin-zengine.src.main.java.org.apache.zeppelin.notebook.FolderView.java-onFolderRenamed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:42:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+prev.getParent().removeChild(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/3722/pattern-ver1-serial/zeppelin-zengine.src.main.java.org.apache.zeppelin.notebook.FolderView.java-onFolderRenamed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:42:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+prev.getParent().removeChild(newChild);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/3722/pattern-ver1-serial/zeppelin-zengine.src.main.java.org.apache.zeppelin.notebook.FolderView.java-onFolderRenamed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:42:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
-first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
+first=newChild;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:42:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
-newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
+newChild.parent=this;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:42:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
-newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
+newChild.next=first;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:44:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
+first=newChild;
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:44:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+first=newChild;
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
-first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:44:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
+newChild.parent=this;
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:44:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
+newChild.next=first;
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:45:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+newChild.parent=this;
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
-newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:45:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+newChild.next=first;
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
-newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:45:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
+first=newChild;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:45:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
+newChild.next=first;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:45:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+first=newChild;
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
-first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:45:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+newChild.parent=this;
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
-newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:45:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+newChild.next=first;
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
-newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:45:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+newChild.parent=this;
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
-newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:45:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+newChild.next=first;
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
-newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:45:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+first=newChild;
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
-first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:45:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
-first=newChild;
 return ;
 }
+first=newChild;
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:45:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
-newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
+newChild.parent=this;
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:45:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
-newChild.next=first;
 first=newChild;
 return ;
 }
+newChild.next=first;
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:45:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+try{
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+}finally{
+newChild.parent=this;
+}
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:45:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+try{
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+}finally{
+newChild.next=first;
+}
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:45:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+try{
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+}finally{
+first=newChild;
+}
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:45:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
+assert (newChild!=null);
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:45:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+assert (node!=null);
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:46:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+assert (newChild!=null);
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:46:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+assert (prev!=null);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:46:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+ final String schemaLocation="http://www.modaclouds.eu/xsd/1.0/monitoring_rules_schema https://raw.githubusercontent.com/deib-polimi/tower4clouds/master/rules/metamodels/monitoring_rules_schema.xsd";
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.",schemaLocation);
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5423/pattern-ver1-serial/src.main.java.it.polimi.modaclouds.recedingHorizonScaling4Cloud.monitoringPlatformConnector.MonitoringConnector.java-saveRulesToFile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:46:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+ final String schemaLocation="http://www.modaclouds.eu/xsd/1.0/monitoring_rules_schema https://raw.githubusercontent.com/deib-polimi/tower4clouds/master/rules/metamodels/monitoring_rules_schema.xsd";
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.",schemaLocation);
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5423/pattern-ver1-serial/src.main.java.it.polimi.modaclouds.recedingHorizonScaling4Cloud.monitoringPlatformConnector.MonitoringConnector.java-saveRulesToFile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:46:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+ final String schemaLocation="http://www.modaclouds.eu/xsd/1.0/monitoring_rules_schema https://raw.githubusercontent.com/deib-polimi/tower4clouds/master/rules/metamodels/monitoring_rules_schema.xsd";
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.",schemaLocation);
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5423/pattern-ver1-serial/src.main.java.it.polimi.modaclouds.recedingHorizonScaling4Cloud.monitoringPlatformConnector.MonitoringConnector.java-saveRulesToFile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:46:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+if(node!=null){
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+if(first==node){
+newChild.parent=this;
+newChild.next=first;
+first=newChild;
+return ;
+}
+Node prev=getChildBefore(node);
+addChildAfter(newChild,prev);
+}
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:46:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+if(newChild!=null){
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+if(first==node){
+newChild.parent=this;
+newChild.next=first;
+first=newChild;
+return ;
+}
+Node prev=getChildBefore(node);
+addChildAfter(newChild,prev);
+}
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:46:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+assert (prev!=getChildBefore(node));
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:46:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+String noneMessageKey="members.speakers.none";
+Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.",noneMessageKey);
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/3917/pattern-ver1-serial/app.controllers.Application.java-speakersOn.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:46:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
+if(newChild.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:46:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 public void addChildBefore(Node newChild,Node node){
+if(node.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:46:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 public void addChildBefore(Node newChild,Node node){
+if(newChild.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:46:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(prev.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:46:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
+assert (newChild!=null);
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:46:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+assert (node!=null);
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:46:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+assert (newChild!=null);
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:46:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(prev.equals("655")){
+System.out.println();
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:46:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
-if(first==node){
+if(first==node||"查看红包".equals(first)){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:47:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
+if(newChild.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:47:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+if(node.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:47:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+if(newChild.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:47:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(prev.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:47:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:47:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:47:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
-if(first==node){
+if(first==node||first==null){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:47:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:47:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
+assert (newChild!=null):"Appointments day is not allowed to be null!";
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:47:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+assert (node!=null):"Appointments day is not allowed to be null!";
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:47:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+assert (newChild!=null):"Appointments day is not allowed to be null!";
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:47:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+assert (prev!=null):"Appointments day is not allowed to be null!";
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:47:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(newChild.parent!=this){
 addChildAfter(newChild,prev);
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:47:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(newChild.next!=first){
 addChildAfter(newChild,prev);
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:47:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
-newChild.parent=this;
+if(newChild.parent!=this){
 newChild.next=first;
+}
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:47:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
+if(newChild.next!=first){
 newChild.parent=this;
-newChild.next=first;
+}
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:47:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(first!=newChild){
 addChildAfter(newChild,prev);
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:47:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
-newChild.parent=this;
 newChild.next=first;
+if(newChild.parent!=this){
 first=newChild;
+}
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:48:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
-newChild.next=first;
+if(newChild.next!=first){
 first=newChild;
+}
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:48:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
+if(first!=newChild){
 newChild.parent=this;
+}
 newChild.next=first;
-first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:48:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
+if(first!=newChild){
 newChild.next=first;
-first=newChild;
+}
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:48:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+if(first!=newChild){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+}
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:48:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+if(newChild.parent!=this){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+}
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:48:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+if(newChild.next!=first){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+}
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:48:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+if(first!=newChild){
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+}
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:48:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+if(newChild.parent!=this){
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+}
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:48:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+if(first!=newChild){
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+}
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:48:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+if(newChild.parent!=this){
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+}
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:48:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+if("The existing child node of the parent should not be null."!=null){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+}
+if("The new child node has siblings."!=null){
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+}
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6036/pattern-ver1-serial/reasoner.src.main.java.org.earthcube.geosoft.software.api.impl.kb.SoftwareKB.java-updateSoftwareType.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:48:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+if("The existing child node of the parent should not be null."!=null){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+}
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+if("The new child node already has a parent."!=null){
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+}
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6036/pattern-ver1-serial/reasoner.src.main.java.org.earthcube.geosoft.software.api.impl.kb.SoftwareKB.java-updateSoftwareType.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:48:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+boolean haveBreadCrumbs=false;
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
-if(first==node){
+if(first==node&&haveBreadCrumbs){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:48:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+if(newChild.next!=first){
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+}
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:48:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+if(node==null){
+return ;
+}
+if(newChild==null){
+return ;
+}
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:48:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+if(newChild==null){
+return ;
+}
+if(node==null){
+return ;
+}
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:48:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+if(node==null){
+return ;
+}
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(prev==null){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:48:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+if(newChild==null){
+return ;
+}
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(prev==null){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:49:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(prev==null){
+return ;
+}
+if(node==null){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:49:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(prev==null){
+return ;
+}
+if(newChild==null){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:49:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
-if(first==node){
+if(first==node&&node.getParent()!=null){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V10/4529/pattern-ver1-serial/org.lateralgm.subframes.GmObjectFrame.java-valueChanged.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:49:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+if(node.equals("CALL_RECEIVED_AT")){
+return ;
+}
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
+if(node.equals("NAME")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:49:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+if(newChild.equals("CALL_RECEIVED_AT")){
+return ;
+}
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
+if(newChild.equals("NAME")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:49:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(prev.equals("CALL_RECEIVED_AT")){
+return ;
+}
+if(prev.equals("NAME")){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:49:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
-newChild.parent=this;
 newChild.next=first;
+if(first==null){
 first=newChild;
+}
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/2963/pattern-ver1-serial/src.in.tamchow.fractal.fractals.complex.ComplexFractalGenerator.java-initFractal.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:49:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
-if(first==node){
+if(first==node&&!first.equals("")){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:49:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
-newChild.parent=this;
 newChild.next=first;
+if(first!=null){
 first=newChild;
+}
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/3931/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.fetch.OFetchHelper.java-fetchCollectionRidMap.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:49:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
+return ;
+}
+if(node.equals("INFO")){
+return ;
+}
+if(node.equals("UNIT")){
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:49:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
+return ;
+}
+if(newChild.equals("INFO")){
+return ;
+}
+if(newChild.equals("UNIT")){
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:49:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(prev.equals("INFO")){
+return ;
+}
+if(prev.equals("UNIT")){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:49:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
+if(newChild==null){
+newChild=first;
+}else {
 first=newChild;
+}
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3590/pattern-ver1-serial/src.main.java.ch.bfh.btx8081.w2015.blue.HealthVisApp.View.PatientDetailView.java-refreshView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:49:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:49:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:49:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
+Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:49:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:49:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:49:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
+Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:49:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:49:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:49:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
+Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:50:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:50:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:50:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
+Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:50:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+try{
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+}finally{
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+}
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 1, INS : 0, DEL : 6
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:50:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+try{
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+}finally{
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+}
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 1, INS : 0, DEL : 6
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:50:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+try{
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+}finally{
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+}
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 1, INS : 0, DEL : 6
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:50:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+try{
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+}finally{
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+}
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 1, INS : 0, DEL : 6
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:50:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+try{
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+}finally{
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+}
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 1, INS : 0, DEL : 6
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:50:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+if(node==null){
+Preconditions.checkArgument(node!=null,"onLoadFinished: end because bookSearchData is null.");
+return ;
+}
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V45/204/pattern-ver1-serial/app.src.main.java.com.daipresents.tsundoku.com.daipresents.tsundoku.booksapi.BookSearchResultActivity.java-onLoadFinished.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:50:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+if(newChild==null){
+Preconditions.checkArgument(newChild.next==null,"onLoadFinished: end because bookSearchData is null.");
+return ;
+}
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V45/204/pattern-ver1-serial/app.src.main.java.com.daipresents.tsundoku.com.daipresents.tsundoku.booksapi.BookSearchResultActivity.java-onLoadFinished.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:50:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+if(newChild==null){
+Preconditions.checkArgument(newChild.parent==null,"onLoadFinished: end because bookSearchData is null.");
+return ;
+}
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V45/204/pattern-ver1-serial/app.src.main.java.com.daipresents.tsundoku.com.daipresents.tsundoku.booksapi.BookSearchResultActivity.java-onLoadFinished.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:50:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+try{
 addChildAfter(newChild,prev);
+}finally{
+Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 1, INS : 0, DEL : 6
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:50:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+try{
 addChildAfter(newChild,prev);
+}finally{
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 1, INS : 0, DEL : 6
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:50:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+try{
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+}finally{
+Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+}
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 1, INS : 0, DEL : 6
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:50:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(prev==null){
+throw new IllegalStateException("User isn't registered! "+node);
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:50:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+boolean succeeded=false;
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
+succeeded=true;
+return ;
+}
+if(!succeeded){
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:50:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
+synchronized(this){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
+}
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:50:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+if(newChild==null||node==null){
+throw new NullPointerException();
+}
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/1218/pattern-ver1-serial/app.src.main.java.net.danielpalma.lineupshaker.DefaultSportDataListener.java-DefaultSportDataListener.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:50:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(newChild==null||prev==null){
+throw new NullPointerException();
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:51:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(prev==null||newChild==null){
+throw new NullPointerException();
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:51:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(prev==null||newChild==null||node==null){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:51:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(newChild==null||prev==null||node==null){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:51:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(node==null||prev==null||newChild==null){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:51:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(prev==null||node==null||newChild==null){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:51:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(node==null||newChild==null||prev==null){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:51:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
+if(newChild==null||node==null||prev==null){
+return ;
+}
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:51:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
-addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 8, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:51:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
+long startTime=System.currentTimeMillis();
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:51:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+long startTime=System.currentTimeMillis();
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:51:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 8, INS : 0, DEL : 6
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:51:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 8, INS : 0, DEL : 6
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:51:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
-Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 8, INS : 0, DEL : 6
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:51:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+if(!("The existing child node of the parent should not be null.".isEmpty()||"The existing child node of the parent should not be null.".equals("null"))){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+}
+if(!("The new child node has siblings.".isEmpty()||"The new child node has siblings.".equals("null"))){
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+}
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/2325/pattern-ver1-serial/src.main.java.net.walterbarnes.sourcebot.BotThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 14, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:51:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
+if(!("The existing child node of the parent should not be null.".isEmpty()||"The existing child node of the parent should not be null.".equals("null"))){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+}
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+if(!("The new child node already has a parent.".isEmpty()||"The new child node already has a parent.".equals("null"))){
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+}
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/2325/pattern-ver1-serial/src.main.java.net.walterbarnes.sourcebot.BotThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 14, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:51:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
 Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
+if(!("The new child node has siblings.".isEmpty()||"The new child node has siblings.".equals("null"))){
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
+}
+if(!("The new child node already has a parent.".isEmpty()||"The new child node already has a parent.".equals("null"))){
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
+}
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/2325/pattern-ver1-serial/src.main.java.net.walterbarnes.sourcebot.BotThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 14, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:51:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
 Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
-addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/2912/pattern-ver1-serial/Source.ch.zhaw.necarex.src.model.pieces.Pawn.java-getPossibleFields.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 15, INS : 0, DEL : 9
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:51:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[619,637]
------------Candidate---------------
 public void addChildBefore(Node newChild,Node node){
-Preconditions.checkArgument(node!=null,"The existing child node of the parent should not be null.");
-Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
 Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
 if(first==node){
 newChild.parent=this;
 newChild.next=first;
 first=newChild;
 return ;
 }
 Node prev=getChildBefore(node);
 addChildAfter(newChild,prev);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/2912/pattern-ver1-serial/Source.ch.zhaw.necarex.src.model.pieces.Pawn.java-getPossibleFields.pattern
MATCHLEVEL : ALL
ALL : 27, UPD : 15, INS : 0, DEL : 12
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 02:51:56 CDT
--------------- END -----------------
Location : com.google.javascript.rhino.Node.removeProp:[742, 743, 744, 745, 746, 740, 741, 754, 748, 749, 751]#1.0
Compute Candidate : 2019.09.07 AD at 02:52:43 CDT - 2019.09.07 AD at 03:15:44 CDT , PNumber : 11411, CandNumber : 381 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
+return ;
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:15:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:15:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:15:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
+return ;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:15:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:15:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
+continue;
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5856/pattern-ver1-serial/internalLibraries.backup.src.main.java.com.emc.storageos.management.backup.DbBackupHandler.java-dumpBackup.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:16:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
-PropListItem prev=null;
+ PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:16:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
-PropListItem x=propListHead;
+ PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:16:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
-if(x!=null){
+if(x==null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:16:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
-if(prev==null){
+if(prev!=null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:16:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
-if(x==null){
+if(x!=null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:16:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
+x=x.next;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:16:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
+x=x.next;
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:16:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
+x=x.next;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:16:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
+break;
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:16:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
-while(x.type!=propType){
+while(x.type==propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6722/pattern-ver1-serial/collections.queue.IntArrayQueue.java-peek.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:16:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
-if(x==null){
+if(prev==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:16:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
-if(prev==null){
+if(x==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:16:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
-x=x.next;
+x=x;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:18:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
-prev.next=x.next;
+prev.next=x;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:18:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
-propListHead=x.next;
+propListHead=x;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:18:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
-prev.next=x.next;
+prev.next=prev;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:18:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
-prev=x;
+prev=prev;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:18:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
-x=x.next;
+x=prev;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:20:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
-propListHead=x.next;
+propListHead=prev;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:20:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
-while(x.type!=propType){
+while(x.type<propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/1616/pattern-ver1-serial/src.PileRPL.java-sub.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:20:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
-while(x.type!=propType){
+while(x.type>propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3765/pattern-ver1-serial/app.src.main.java.com.xlythe.sms.MessageActivity.java-onGlobalLayout.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:20:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
-prev=x;
+prev=null;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:21:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
-x=x.next;
+x=null;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:21:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
-propListHead=x.next;
+propListHead=null;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:21:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
-prev.next=x.next;
+prev.next=null;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:21:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
-if(x!=null){
+if(propListHead!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1150/pattern-ver1-serial/src.main.java.de.nedelosk.modularmachines.client.gui.GuiAssembler.java-onUpdate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:21:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
-while(x.type!=propType){
+while(propType!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1150/pattern-ver1-serial/src.main.java.de.nedelosk.modularmachines.client.gui.GuiAssembler.java-onUpdate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:21:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
-prev.next=x.next;
+x.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/4812/pattern-ver1-serial/src.org.rascalmpl.library.experiments.Compiler.RVM.Interpreter.Thrown.java-printStackTrace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:21:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
-prev.next=x.next;
+propListHead.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/4812/pattern-ver1-serial/src.org.rascalmpl.library.experiments.Compiler.RVM.Interpreter.Thrown.java-printStackTrace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:21:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
-prev.next=x.next;
+prev.next.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/4812/pattern-ver1-serial/src.org.rascalmpl.library.experiments.Compiler.RVM.Interpreter.Thrown.java-printStackTrace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:21:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
-while(x.type!=propType){
+while(prev.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/4812/pattern-ver1-serial/src.org.rascalmpl.library.experiments.Compiler.RVM.Interpreter.Thrown.java-printStackTrace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:21:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
-while(x.type!=propType){
+while(propListHead.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/4812/pattern-ver1-serial/src.org.rascalmpl.library.experiments.Compiler.RVM.Interpreter.Thrown.java-printStackTrace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:21:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
-x=x.next;
+x=prev.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/4812/pattern-ver1-serial/src.org.rascalmpl.library.experiments.Compiler.RVM.Interpreter.Thrown.java-printStackTrace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:21:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
-propListHead=x.next;
+propListHead=prev.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2427/pattern-ver1-serial/src.java.picard.analysis.oxidation.ArtifactCounter.java-getSummaryMetrics.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:21:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
-while(x.type!=propType){
+while(prev.next.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/3537/pattern-ver1-serial/src.no.ntnu.stud.flatcraft.entities.GameEntity.java-setFlags.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:21:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
-PropListItem x=propListHead;
+ PropListItem x=propListHead;
 if(x!=null){
-PropListItem prev=null;
+ PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:21:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
+synchronized(this){
 prev=x;
+}
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:21:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
+synchronized(this){
 x=x.next;
 if(x==null){
 return ;
+}
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:21:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+synchronized(this){
 prev.next=x.next;
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:21:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
+removeProp(propType);
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:22:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
+removeProp(propType);
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:22:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
+}
 }
+if(equals(prev)){
+return ;
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:22:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+if(equals(propType)){
+return ;
+}
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:22:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
+if(equals(propType)){
+return ;
+}
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:22:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+if(equals(x)){
+return ;
+}
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:22:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
+if(equals(x)){
+return ;
+}
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:22:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
+if(equals(x)){
+return ;
+}
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:22:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
+}
+while(true){
+
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:22:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+}
+while(true){
+
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:22:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+while(true){
+
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:22:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
+while(true){
+
+}
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:22:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+}
 }
+while(true){
+
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:24:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
+synchronized(this){
 if(x==null){
 return ;
+}
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:24:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
+synchronized(this){
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:24:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
+synchronized(this){
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:24:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
-while(x.type!=propType){
+while(x!=null){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1221/pattern-ver1-serial/CransJavaAI.trunk.src.com.springrts.ai.crans.DGunControllerHandler.java-update.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:24:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+if(prev==null){
+return ;
+}
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:24:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+if(prev==null){
+return ;
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:24:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
+if(x==null){
+return ;
+}
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:24:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
+if(x==null){
+return ;
+}
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:24:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+if(x==null){
+return ;
+}
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:25:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+if(x==null){
+return ;
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:25:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
+if(x==null){
+return ;
+}
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:25:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+if(prev==null){
+return ;
+}
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:25:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
+if(x==null){
+return ;
+}
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:25:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
+if(x==null){
+return ;
+}
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:25:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+if(x==null){
+return ;
+}
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:25:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
+if(x==null){
+return ;
+}
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:25:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
+if(x==null){
+return ;
+}
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:25:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+}
 }
+if(x==null){
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:25:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
+}
 }
+if(x==null){
+return ;
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:25:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
+next=this;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4878/pattern-ver1-serial/app.src.main.java.com.trukr.shipper.activity.Notification.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:27:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+if(x==prev){
+return ;
+}
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/2945/pattern-ver1-serial/code.src.ast.MinMaxRedundancy.java-checkRedundant.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:27:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+if(prev==x){
+return ;
+}
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/2945/pattern-ver1-serial/code.src.ast.MinMaxRedundancy.java-checkRedundant.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:27:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+if(x==prev){
+return ;
+}
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/2945/pattern-ver1-serial/code.src.ast.MinMaxRedundancy.java-checkRedundant.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:27:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+if(prev==x){
+return ;
+}
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/2945/pattern-ver1-serial/code.src.ast.MinMaxRedundancy.java-checkRedundant.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:27:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+}
 }
+if(x==propListHead){
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:27:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
-if(x==null){
+if(x.equals(null)){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:27:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
-if(prev==null){
+if(prev.equals(null)){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:27:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
-if(x!=null){
+if(x.equals(null)){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:27:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
+synchronized(this){
 return ;
+}
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:28:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
+synchronized(this){
 propListHead=x.next;
+}
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:28:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+if("index".equals(prev)){
+return ;
+}
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:28:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+if("index".equals(prev)){
+return ;
+}
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:28:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
+if("index".equals(x)){
+return ;
+}
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:28:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
+if("index".equals(propType)){
+return ;
+}
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:28:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
+if("index".equals(propType)){
+return ;
+}
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:28:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+if("index".equals(x)){
+return ;
+}
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:28:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
+if("index".equals(x)){
+return ;
+}
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:28:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
+if("index".equals(x)){
+return ;
+}
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:28:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
+if("index".equals(x)){
+return ;
+}
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:28:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+if(prev.equals("TIME")){
+return ;
+}
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:28:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+if(prev.equals("TIME")){
+return ;
+}
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:28:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
+if(x.equals("TIME")){
+return ;
+}
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:28:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
+if(x.equals("TIME")){
+return ;
+}
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:28:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
+if(x.equals("TIME")){
+return ;
+}
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:28:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+if(x.equals("TIME")){
+return ;
+}
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:28:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
+if(x.equals("TIME")){
+return ;
+}
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:28:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+if("&null".equals(prev)){
+return ;
+}
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:28:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+if("&null".equals(prev)){
+return ;
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:28:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+if("&null".equals(propType)){
+return ;
+}
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:28:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
+if("&null".equals(x)){
+return ;
+}
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:28:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
+if("&null".equals(propType)){
+return ;
+}
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:29:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
+if("&null".equals(x)){
+return ;
+}
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:29:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+if("&null".equals(x)){
+return ;
+}
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:29:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
+if("&null".equals(x)){
+return ;
+}
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:29:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+if("&null".equals(x)){
+return ;
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:29:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
+if(x==null){
+continue;
+}
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/ui.src.main.java.thredds.ui.monitor.MultipleAxisChart.java-finish.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:29:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+if(prev.equals("DATETIME")){
+return ;
+}
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:29:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+if(prev.equals("DATETIME")){
+return ;
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:29:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
+if(x.equals("DATETIME")){
+return ;
+}
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:29:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
+if(x.equals("DATETIME")){
+return ;
+}
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:29:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+if(x.equals("DATETIME")){
+return ;
+}
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:29:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+if(x.equals("DATETIME")){
+return ;
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:29:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
+if(x.equals("DATETIME")){
+return ;
+}
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:29:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
+propType=propType;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:29:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+prev.next=prev;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:29:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+prev=prev;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:29:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
+x.next=x;
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:29:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+if(prev.equals("")){
+return ;
+}
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:29:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
+if(x.equals("")){
+return ;
+}
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:29:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+}
 }
+if(x.equals("")){
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:29:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
+}
 }
+if(x.equals("")){
+return ;
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:30:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
+if(x.equals("")){
+return ;
+}
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:30:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
-if(x==null){
+if(true){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:30:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
-if(x!=null){
+if(true){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:30:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
-if(prev==null){
+if(true){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:30:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+if(propType<0){
+return ;
+}
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:30:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
+if(propType<0){
+return ;
+}
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:30:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
+if(x==null){
 x=x.next;
 if(x==null){
 return ;
+}
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:32:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
+if(prev==null){
 prev=x;
+}
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:32:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+if(prev.next==null){
 prev.next=x.next;
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:32:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+if(prev.equals("-1")){
+return ;
+}
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:32:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
+if(x.equals("-1")){
+return ;
+}
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:32:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+}
 }
+if(x.equals("-1")){
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:32:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
+}
 }
+if(x.equals("-1")){
+return ;
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:32:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
+if(x.equals("-1")){
+return ;
+}
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:32:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
+int a=0;
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:32:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
+int a=0;
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:32:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+int a=0;
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:32:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
+int a=0;
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:32:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
+int a=0;
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:32:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
+int a=0;
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:33:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+if(prev.equals(propType)){
+return ;
+}
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:33:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+if(x.equals(prev)){
+return ;
+}
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:33:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+if(prev.equals(x)){
+return ;
+}
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:33:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+if(x.equals(prev)){
+return ;
+}
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:33:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+if(prev.equals(x)){
+return ;
+}
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:33:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
+String OUTSTRING="";
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:33:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
+String OUTSTRING="";
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:33:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
+String OUTSTRING="";
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:33:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+String OUTSTRING="";
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:33:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
+String OUTSTRING="";
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:33:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
+String OUTSTRING="";
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:33:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
+int type=5;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:33:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
+int next=5;
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:33:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
+if(x!=null){
 prev=x;
+}
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/663/pattern-ver1-serial/src.ceprei.appcrawler.config.FileAppCrawlerConfig.java-FileAppCrawlerConfig.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:33:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+if(prev.equals(InputStream.class)){
+return ;
+}
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:33:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
+if(prev.equals(InputStream.class)){
+return ;
+}
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:33:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+if(x.equals(InputStream.class)){
+return ;
+}
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:33:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:34:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:34:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:34:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:34:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:34:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+}
+if(x==null){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/3772/pattern-ver1-serial/android-sdk.src.main.java.com.optimizely.ab.android.sdk.DataFileClient.java-execute.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:34:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
+if(propListHead==null){
 propListHead=x.next;
+}
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/6222/pattern-ver1-serial/catroid.src.org.catrobat.catroid.io.PcConnectionManager.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:34:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
+int indexSelection=0;
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:34:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
+int indexSelection=0;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:34:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+int indexSelection=0;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:34:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
+int indexSelection=0;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:34:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:34:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+}
 }
+if(x.equals("setPackMode")){
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:34:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+if(x.equals("setPackMode")){
+return ;
+}
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:34:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+if(prev.equals("setPackMode")){
+return ;
+}
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:34:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
+if(x.equals("sounds")){
+continue;
+}
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:34:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
+if(x.equals("sounds")){
+continue;
+}
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:34:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
+int a=1;
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:34:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
+int a=1;
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:34:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+int a=1;
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:35:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
+int a=1;
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:35:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
+int a=1;
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:35:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
+int a=1;
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:35:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
+String type="%#.&f";
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:35:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
+String next="%#.&f";
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:35:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
+boolean type=true;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:35:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
+boolean next=true;
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:35:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
+boolean b=true;
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:35:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
+boolean b=true;
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:35:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
+boolean b=true;
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:35:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
+boolean b=true;
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:35:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+boolean b=true;
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:35:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
+boolean b=true;
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:35:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
+}
 }
+if(prev.equals(null)){
+return ;
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:35:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
+if(x.equals(null)){
+return ;
+}
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:35:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
+if(x.equals(null)){
+return ;
+}
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:35:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
+if(x==null){
+continue;
+}
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:35:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
+if((Thread.currentThread().interrupted())){
+return ;
+}
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:36:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+if((Thread.currentThread().interrupted())){
+return ;
+}
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:36:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
+if((Thread.currentThread().interrupted())){
+return ;
+}
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:36:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+if((Thread.currentThread().interrupted())){
+return ;
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:36:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
+if((Thread.currentThread().interrupted())){
+return ;
+}
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:36:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
+if(x==null){
+return ;
+}
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
-if(x==null){
-return ;
-}
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:36:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
-x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
+x=x.next;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4266/pattern-ver1-serial/src.br.com.carlosrafaelgn.fplay.ActivityAbout.java-onCreateLayout.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:36:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
-x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
+x=x.next;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4266/pattern-ver1-serial/src.br.com.carlosrafaelgn.fplay.ActivityAbout.java-onCreateLayout.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:38:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
-prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
+prev=x;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:38:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
+propListHead=x.next;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:38:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
-propListHead=x.next;
 }else {
 prev.next=x.next;
 }
+propListHead=x.next;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:38:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
-propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
+propListHead=x.next;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:38:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
+prev=x;
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:38:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
-prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
+prev=x;
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:38:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
-prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+prev=x;
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:38:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
+x=x.next;
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:38:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
-prev=x;
 x=x.next;
 if(x==null){
+prev=x;
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:38:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
+propListHead=x.next;
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:38:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
+x=x.next;
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
-x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:38:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
-x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
+x=x.next;
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:40:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
+x=x.next;
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:40:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
+prev.next=x.next;
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:41:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
-x=x.next;
 if(x==null){
+x=x.next;
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:43:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+prev=x;
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:43:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+x=x.next;
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:43:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
-prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
+prev=x;
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:43:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
-x=x.next;
 if(x==null){
 return ;
 }
 }
+x=x.next;
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:45:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
-if(prev==null){
 propListHead=x.next;
+if(prev==null){
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:45:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
+x=x.next;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
-x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:45:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+x=x.next;
 while(x.type!=propType){
 prev=x;
-x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:45:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
-while(x.type!=propType){
 prev=x;
+while(x.type!=propType){
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:45:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
+x=x.next;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:45:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
+propListHead=x.next;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:45:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+prev.next=x.next;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
-prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:45:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+propListHead=x.next;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
-propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:45:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
+PropListItem prev=null;
 PropListItem x=propListHead;
 if(x!=null){
-PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:45:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
-prev.next=x.next;
 }
+prev.next=x.next;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:45:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
+propListHead=x.next;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
-propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2335/pattern-ver1-serial/app.src.main.java.swampthings.dems.LoginActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:45:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
-while(x.type!=propType){
-prev=x;
-x=x.next;
 if(x==null){
 return ;
 }
+while(x.type!=propType){
+prev=x;
+x=x.next;
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1562/pattern-ver1-serial/assignment6.src.assignment6.TicketClient.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:45:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
+}
 if(x==null){
 return ;
-}
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1562/pattern-ver1-serial/assignment6.src.assignment6.TicketClient.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:45:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
+try{
 prev=x;
+}finally{
 x=x.next;
+}
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:45:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
-prev=x;
+try{
 x=x.next;
 if(x==null){
 return ;
+}
+}finally{
+prev=x;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:45:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
+prev=x;
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:46:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+assert (prev!=null);
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:46:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+assert (prev!=null);
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:46:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
+assert (x!=null);
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:46:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
+assert (x!=null);
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:46:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
+assert (x!=null);
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:46:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+assert (x!=null);
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:46:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
+assert (x!=null);
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:46:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
+if(x!=null){
+prev=x;
+x=x.next;
+if(x==null){
+return ;
+}
+}
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:46:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
+if(x!=null){
 if(x!=null){
+PropListItem prev=null;
+while(x.type!=propType){
+prev=x;
+x=x.next;
+if(x==null){
+return ;
+}
+}
+if(prev==null){
+propListHead=x.next;
+}else {
+prev.next=x.next;
+}
+}
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:46:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
+assert (x!=propListHead);
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:46:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+x=x.next;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/4871/pattern-ver1-serial/oneToDo.src.main.java.com.vector.onetodo.AddScheduleBeforeFragment.java-onViewCreated.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:46:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+if(prev.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:46:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+if(prev.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:46:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
+if(x.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:46:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
+if(x.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:46:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
+if(x.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:46:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+if(x.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:46:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
+if(x.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:46:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
+propListHead=x.next;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:47:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
+prev.next=x.next;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:47:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+assert (prev!=null);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:47:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
+assert (x!=null);
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:47:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
+assert (x!=null);
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:47:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+assert (x!=null);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:47:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+assert (x!=null);
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:47:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
+}
 }
+if(prev.equals("655")){
+System.out.println();
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:47:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
+if(x.equals("655")){
+System.out.println();
+}
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:47:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
+if(x.equals("655")){
+System.out.println();
+}
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:47:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
+propListHead=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V46/4063/pattern-ver1-serial/egradle-plugin-main.src.main.java.de.jcup.egradle.core.model.groovyantlr.GradleModelBuilder.java-handleTaskNameResolving.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:47:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
+prev=x;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V46/4063/pattern-ver1-serial/egradle-plugin-main.src.main.java.de.jcup.egradle.core.model.groovyantlr.GradleModelBuilder.java-handleTaskNameResolving.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:47:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
+prev.next=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V46/4063/pattern-ver1-serial/egradle-plugin-main.src.main.java.de.jcup.egradle.core.model.groovyantlr.GradleModelBuilder.java-handleTaskNameResolving.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:47:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
+x=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V46/4063/pattern-ver1-serial/egradle-plugin-main.src.main.java.de.jcup.egradle.core.model.groovyantlr.GradleModelBuilder.java-handleTaskNameResolving.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:47:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+x=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V46/4063/pattern-ver1-serial/egradle-plugin-main.src.main.java.de.jcup.egradle.core.model.groovyantlr.GradleModelBuilder.java-handleTaskNameResolving.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:47:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
-if(x==null){
+if(x==null||"查看红包".equals(x)){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:47:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
-if(prev==null){
+if(prev==null||"查看红包".equals(prev)){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:47:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
-if(x!=null){
+if(x!=null||"查看红包".equals(x)){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:47:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+if(prev.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:47:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+if(prev.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:48:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
+if(x.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:48:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
+}
 }
+if(x.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:48:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
+if(x.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:48:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+if(x.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:48:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
+if(x.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:48:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:48:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:48:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:48:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:48:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:48:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
-if(x==null){
+if(x==null||x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:48:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
-if(prev==null){
+if(prev==null||prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:48:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
-if(x!=null){
+if(x!=null||x==null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:48:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
+assert (propType>=0):"Receive a negative tratment";
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:48:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
+assert (propType>=0):"Receive a negative tratment";
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:48:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:48:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:48:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:49:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:49:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:49:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
+prev=x;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+prev=x;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 2, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:49:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
+prev=x;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
+prev=x;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 2, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:49:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
+x=x.next;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+x=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 2, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:49:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
+x=x.next;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
+x=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 2, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:49:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
+propListHead=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+propListHead=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 2, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:49:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
+prev.next=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+prev.next=x.next;
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 2, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:49:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
+propListHead=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
+propListHead=x.next;
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 2, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:49:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+assert (prev!=null):"Appointments day is not allowed to be null!";
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:49:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+assert (prev!=null):"Appointments day is not allowed to be null!";
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:49:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
+assert (x!=null):"Appointments day is not allowed to be null!";
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:49:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+assert (x!=null):"Appointments day is not allowed to be null!";
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:49:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
+assert (x!=null):"Appointments day is not allowed to be null!";
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:49:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
+assert (x!=null):"Appointments day is not allowed to be null!";
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:49:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
+assert (x!=null):"Appointments day is not allowed to be null!";
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:49:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
+assert (propType!=0):"Receive a size tratment";
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:49:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public void removeProp(int propType){
+assert (propType!=0):"Receive a size tratment";
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:49:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+if(propType>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:50:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
-prev=x;
+if(prev!=x){
 x=x.next;
 if(x==null){
 return ;
+}
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:50:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
+if(x!=x.next){
 prev=x;
-x=x.next;
+}
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:52:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
-if(x!=null){
+if(x.equals(null)){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
-if(x==null){
+if(x.equals(null)){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/1351/pattern-ver1-serial/src.main.java.com.cburch.draw.shapes.DrawAttr.java-getFillAttributes.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:52:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
+if(propListHead!=null){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6804/pattern-ver1-serial/HashTableProject.src.IndexedColorEncoder.java-encodeFast.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:52:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+if(x==null){
+return ;
+}
+if(prev==null){
+return ;
+}
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:52:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+if(prev==null){
+return ;
+}
+if(x==null){
+return ;
+}
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:52:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
+if(x==null){
+return ;
+}
 PropListItem prev=null;
+if(prev==null){
+return ;
+}
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:52:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+if(prev==null){
+return ;
+}
+if(x==null){
+return ;
+}
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:52:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+if(prev.equals("CALL_RECEIVED_AT")){
+return ;
+}
+if(prev.equals("NAME")){
+return ;
+}
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:52:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+if(prev.equals("CALL_RECEIVED_AT")){
+return ;
+}
 prev.next=x.next;
+if(prev.equals("NAME")){
+return ;
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:52:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
+if(x.equals("CALL_RECEIVED_AT")){
+return ;
+}
 prev=x;
 x=x.next;
 if(x==null){
+return ;
+}
+if(x.equals("NAME")){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:52:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
+if(x.equals("CALL_RECEIVED_AT")){
+return ;
+}
+if(x.equals("NAME")){
+return ;
+}
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:52:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
+if(x.equals("CALL_RECEIVED_AT")){
+return ;
+}
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+}
+if(x.equals("NAME")){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:52:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+if(x.equals("CALL_RECEIVED_AT")){
+return ;
+}
 prev.next=x.next;
+if(x.equals("NAME")){
+return ;
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:52:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
+if(x.equals("CALL_RECEIVED_AT")){
+return ;
+}
 propListHead=x.next;
+if(x.equals("NAME")){
+return ;
+}
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:52:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
-prev=x;
+if(x==null){
 x=x.next;
 if(x==null){
 return ;
+}
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/2963/pattern-ver1-serial/src.in.tamchow.fractal.fractals.complex.ComplexFractalGenerator.java-initFractal.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:54:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
+if(prev==null){
 prev=x;
-x=x.next;
+}
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/2963/pattern-ver1-serial/src.in.tamchow.fractal.fractals.complex.ComplexFractalGenerator.java-initFractal.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:56:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
-if(x!=null){
+if(x!=null&&!x.equals("")){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:56:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
-if(x==null){
+if(x==null&&!x.equals("")){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:56:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
-if(prev==null){
+if(prev==null&&!prev.equals("")){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:56:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
-prev=x;
+if(x!=null){
 x=x.next;
 if(x==null){
 return ;
+}
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/3931/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.fetch.OFetchHelper.java-fetchCollectionRidMap.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:56:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
+if(prev!=null){
 prev=x;
-x=x.next;
+}
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/3931/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.fetch.OFetchHelper.java-fetchCollectionRidMap.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:58:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+if(prev.equals("INFO")){
+return ;
+}
+if(prev.equals("UNIT")){
+return ;
+}
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:58:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+if(prev.equals("INFO")){
+return ;
+}
+if(prev.equals("UNIT")){
+return ;
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:59:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
+return ;
+}
+if(x.equals("INFO")){
+return ;
+}
+if(x.equals("UNIT")){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:59:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
+if(x.equals("INFO")){
+return ;
+}
+if(x.equals("UNIT")){
+return ;
+}
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:59:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+}
+if(x.equals("INFO")){
+return ;
+}
+if(x.equals("UNIT")){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:59:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+if(x.equals("INFO")){
+return ;
+}
+if(x.equals("UNIT")){
+return ;
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:59:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
+if(x.equals("INFO")){
+return ;
+}
+if(x.equals("UNIT")){
+return ;
+}
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:59:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
+if(x==null){
+x=prev;
+}else {
 prev=x;
+}
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3590/pattern-ver1-serial/src.main.java.ch.bfh.btx8081.w2015.blue.HealthVisApp.View.PatientDetailView.java-refreshView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:59:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
-while(x.type!=propType){
+while(x.type!=propType||x.type>>>3>0){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/6215/pattern-ver1-serial/java.src.Bin.java-pack_integer.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:59:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+}
 }
+if(x==null||x==null){
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3334/pattern-ver1-serial/src.org.nschmidt.ldparteditor.data.VM03Adjacency.java-linkedCommonFaces.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:59:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
-if(prev==null){
-propListHead=x.next;
-}else {
+if(prev!=null){
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/572/pattern-ver1-serial/CloudPlayer.app.src.main.java.com.example.user.cloudplayer.ui.PlayListActivity.java-onSongDeleted.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:59:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
+if(x==null){
+throw new IllegalStateException("User isn't registered! "+x);
+}
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:59:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+}
 }
+if(x==null){
+throw new IllegalStateException("User isn't registered! "+x);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:59:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
+}
 }
+if(x==null){
+throw new IllegalStateException("User isn't registered! "+x);
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:59:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
+boolean succeeded=false;
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+succeeded=true;
+}
+if(!succeeded){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:59:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
+boolean succeeded=false;
 if(prev==null){
 propListHead=x.next;
+succeeded=true;
 }else {
 prev.next=x.next;
+}
+if(!succeeded){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:59:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
+if(x==null||prev==null){
+throw new NullPointerException();
+}
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/1218/pattern-ver1-serial/app.src.main.java.net.danielpalma.lineupshaker.DefaultSportDataListener.java-DefaultSportDataListener.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:59:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+if(x==null||prev==null){
+throw new NullPointerException();
+}
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:59:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+if(prev==null||x==null){
+throw new NullPointerException();
+}
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:59:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
+}
 }
+if(x==null||prev==null){
+throw new NullPointerException();
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 03:59:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
+}
 }
+if(prev==null||x==null){
+throw new NullPointerException();
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:00:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
+if(prev==null){
+propListHead=x.next;
+}else {
+prev.next=x.next;
+}
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:00:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
+if(propType==3){
+System.out.println("debug");
+}
 prev=x;
 x=x.next;
 if(x==null){
 return ;
+}
+if(propType==3){
+System.out.println("debug");
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:00:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
+if(propType==3){
+System.out.println("debug");
+}
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+}
+if(propType==3){
+System.out.println("debug");
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:00:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+if(propType==3){
+System.out.println("debug");
+}
 prev.next=x.next;
+if(propType==3){
+System.out.println("debug");
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:00:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
+if(prev==null){
+propListHead=x.next;
+}else {
+prev.next=x.next;
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:00:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
+if(prev==null){
+propListHead=x.next;
+}else {
+prev.next=x.next;
+}
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:00:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
-if(x==null){
-return ;
-}
-}
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+}
+if(x==null){
+return ;
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:00:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
+}
 }
+if(prev==null){
+propListHead=x.next;
+}else {
+prev.next=x.next;
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/3277/pattern-ver1-serial/core.src.main.java.org.infinispan.transaction.WriteSkewHelper.java-updateLocalModeCacheEntries.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:00:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
+long startTime=System.currentTimeMillis();
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:00:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
+long startTime=System.currentTimeMillis();
 propListHead=x.next;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 prev.next=x.next;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:00:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
+long startTime=System.currentTimeMillis();
 prev.next=x.next;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:00:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
+long startTime=System.currentTimeMillis();
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:00:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
+long startTime=System.currentTimeMillis();
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:00:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
+synchronized(this){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
+}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 24, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:00:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
-PropListItem prev=null;
-while(x.type!=propType){
-prev=x;
-x=x.next;
-if(x==null){
-return ;
-}
-}
-if(prev==null){
 propListHead=x.next;
-}else {
-prev.next=x.next;
-}
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 24, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:00:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
 PropListItem prev=null;
 while(x.type!=propType){
 prev=x;
 x=x.next;
 if(x==null){
 return ;
 }
 }
 if(prev==null){
 propListHead=x.next;
 }else {
 prev.next=x.next;
 }
+}else {
+propListHead=x.next;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 24, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:00:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[738,754]
------------Candidate---------------
 public void removeProp(int propType){
 PropListItem x=propListHead;
 if(x!=null){
-PropListItem prev=null;
-while(x.type!=propType){
-prev=x;
-x=x.next;
-if(x==null){
 return ;
-}
-}
-if(prev==null){
-propListHead=x.next;
-}else {
-prev.next=x.next;
-}
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/7529/pattern-ver1-serial/BigNumber.src.BigNumber.java-compare.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 24, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:00:56 CDT
--------------- END -----------------
Location : com.google.javascript.rhino.Node.getSortedPropTypes:[803, 804, 805, 808, 809, 810, 811, 814, 815]#1.0
Compute Candidate : 2019.09.07 AD at 04:01:41 CDT - 2019.09.07 AD at 04:19:21 CDT , PNumber : 11393, CandNumber : 203 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+continue;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:19:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+continue;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5856/pattern-ver1-serial/internalLibraries.backup.src.main.java.com.emc.storageos.management.backup.DbBackupHandler.java-dumpBackup.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:19:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
-int count=0;
+ int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:19:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
-int[] keys=new int[count];
+ int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:19:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead;x==null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:19:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead;x==null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:19:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
-keys[count]=x.type;
+keys[count]=1;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:19:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+return null;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:19:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+return null;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:19:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
-return keys;
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:19:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+x=x.next;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:19:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import java.util.Collection;
+
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,myUid;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:19:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import java.util.Collection;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,myUid;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:19:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,DEFAULT_TIMEOUT2;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:20:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,DEFAULT_TIMEOUT2;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:20:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
-keys[count]=x.type;
+keys[count]=0;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:20:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,MAX_SERVICE_NODES;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:20:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,MAX_SERVICE_NODES;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:20:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,MAX_ZK_WAIT_RETRY_TIMES;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:20:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,MAX_ZK_WAIT_RETRY_TIMES;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:20:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+break;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:20:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+break;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:20:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
-count++;
+count--;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:20:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead;x!=null;x=x){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:22:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead;x!=null;x=x){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:22:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
-keys[count]=x.type;
+keys[1]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:22:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
-int count=0;
+Integer count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:22:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,localLevel;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:22:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,localLevel;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:22:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
-keys[count]=x.type;
+keys[count]=count;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:22:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
-keys[count]=x.type;
+keys[count]=2;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:22:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead;x!=null;x=x.next,new ArrayList<KeyBinding>()){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:22:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead;x!=null;x=x.next,new ArrayList<KeyBinding>()){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:22:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
-int[] keys=new int[count];
+int[] keys=new int[(count)];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/4580/pattern-ver1-serial/src.sort.MergeTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:22:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead;x!=null;x=null){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:23:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead;x!=null;x=null){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:23:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
-count--;
+count++;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/12/pattern-ver1-serial/src.main.java.com.quadcoder.coinpet.page.signup.SignupFormFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:23:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
-Arrays.sort(keys);
+Arrays.toString(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/7441/pattern-ver1-serial/HelloWorld.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:23:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,_afterComposeMethodCache;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:23:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,_afterComposeMethodCache;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:23:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
-Arrays.sort(keys);
+Arrays.stream(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/1949/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.webapp.QueryExecutorServlet.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:23:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
+count--;
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6189/pattern-ver1-serial/src.Connection.java-discoverIP.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:23:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import java.util.List;
+
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,mActions;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:23:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import java.util.List;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,mActions;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:23:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
+Arrays.sort(keys);
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3884/pattern-ver1-serial/TcpChat.src.client.gui.ClientGuiThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:23:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,mRelationId;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:23:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,mRelationId;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:23:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
-keys[count]=x.type;
+keys[count]=10;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/386/pattern-ver1-serial/GlassApp.HackathonPerseusGlass.src.com.github.barcodeeye.scan.ResultsActivity.java-onDetected.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:23:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
-return keys;
+return this.getSortedPropTypes();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6962/pattern-ver1-serial/CodenameOne.src.com.codename1.ui.Toolbar.java-constructSideNavigationComponent.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:23:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
-keys[count]=x.type;
+keys[count]=-1;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:23:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
-int count=0;
+ int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
-int[] keys=new int[count];
+ int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:23:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
+this.getSortedPropTypes();
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:23:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+this.getSortedPropTypes();
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:23:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
+this.getSortedPropTypes();
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:24:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
+count++;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:24:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
+count++;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:24:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
-return keys;
+return keys.clone();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/4683/pattern-ver1-serial/backend.src.main.java.com.benine.backend.camera.ipcameracontrol.IPCamera.java-getPresets.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:24:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
+count--;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:24:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
+synchronized(this){
 keys[count]=x.type;
+}
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:24:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
+synchronized(this){
 Arrays.sort(keys);
+}
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:24:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
+synchronized(this){
 count++;
+}
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:24:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+synchronized(this){
 count--;
+}
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:24:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,continentName,countryCode;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:24:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,continentName,countryCode;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:24:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
-return keys;
+return (int[])(keys);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:24:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+return null;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+return null;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:24:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+while(true){
+
+}
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:26:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+while(true){
+
+}
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:28:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,userEmail;x!=null;x=x.next,x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3912/pattern-ver1-serial/app.src.main.java.finalproject.ee461l.journey.JoinTrip.java-searchForUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:28:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,userEmail;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead;x!=null;x=x.next,x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3912/pattern-ver1-serial/app.src.main.java.finalproject.ee461l.journey.JoinTrip.java-searchForUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:28:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead;x!=null;x=x.next,x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,userEmail;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3912/pattern-ver1-serial/app.src.main.java.finalproject.ee461l.journey.JoinTrip.java-searchForUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:28:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+break;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+break;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:28:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead;x!=null;x=x.next,Charset.forName("UTF-8")){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:28:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead;x!=null;x=x.next,Charset.forName("UTF-8")){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:28:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
+if(keys!=null){
 Arrays.sort(keys);
+}
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:29:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
+next=this;
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4878/pattern-ver1-serial/app.src.main.java.com.trukr.shipper.activity.Notification.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:29:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
+if(x.type!=0){
 keys[count]=x.type;
+}
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:29:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+x.type=count;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:29:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+type=count;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:29:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+count=count;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:29:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+keys[count]=count;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:29:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
+count=count;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:29:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+count=count;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:29:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+count--;
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:29:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
+if(count==4){
+continue;
+}
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:29:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
+count--;
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:29:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+count++;
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:29:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
+count=1000;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:30:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+Arrays.sort(keys);
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/5055/pattern-ver1-serial/cli.src.main.java.com.vmware.bdd.cli.commands.ClusterCommands.java-getCluster.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:30:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
+Arrays.sort(keys);
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/5055/pattern-ver1-serial/cli.src.main.java.com.vmware.bdd.cli.commands.ClusterCommands.java-getCluster.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:30:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import javax.annotation.Nonnull;
+
+import javax.annotation.Nullable;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
-return keys;
+return (int[])keys.clone();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/4389/pattern-ver1-serial/src.main.java.net.steveperkins.fitnessjiffy.etl.model.Food.java-getLastUpdatedTime.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:30:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+for(PropListItem x=propListHead;x!=null;x=x.next){
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:30:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
+count--;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
-count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:30:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
+int a=0;
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:30:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+int a=0;
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:30:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
+int a=0;
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:30:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
+String OUTSTRING="";
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:30:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+String OUTSTRING="";
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:30:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
+String OUTSTRING="";
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:30:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
+try{
 Arrays.sort(keys);
+}finally{
+count++;
+}
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 1, INS : 0, DEL : 2
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:30:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
+try{
 Arrays.sort(keys);
+}finally{
+count--;
+}
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 1, INS : 0, DEL : 2
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:30:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
+int x=5;
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:30:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
+int propListHead=5;
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:30:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
+int next=5;
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:30:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:30:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:30:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:31:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
-keys[count]=x.type;
+x.type=count;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/697/pattern-ver1-serial/umldiag.java-setLineArrow.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:31:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+if(equals(count)){
+return null;
+}
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:31:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
+if(equals(count)){
+return null;
+}
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:31:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
+if(equals(count)){
+return null;
+}
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:31:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+}
+if(equals(count)){
+return null;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:31:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+int indexSelection=0;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:31:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+int indexSelection=0;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:31:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
+int indexSelection=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:31:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import java.util.Arrays;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
-keys[count]=x.type;
+keys[count-1]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:31:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
+int a=1;
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:31:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+int a=1;
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:31:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
+int a=1;
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:31:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
+String next="%#.&f";
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:31:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
+boolean b=true;
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:31:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+boolean b=true;
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:31:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
+boolean b=true;
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:31:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+if(keys==null){
+continue;
+}
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:31:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
+if(keys==null){
+return null;
+}
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:31:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+if(keys==null){
+return null;
+}
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:31:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
+if(count==0){
+return keys;
+}
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:31:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+}
+if(keys==null){
+return null;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:32:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
+if("&null".equals(count)){
+return null;
+}
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:32:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
+if("&null".equals(count)){
+return null;
+}
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:32:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+if("&null".equals(count)){
+return null;
+}
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:32:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
+if("&null".equals(keys)){
+return null;
+}
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:32:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
+if("&null".equals(keys)){
+return null;
+}
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:32:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+Arrays.sort(keys);
 count--;
 keys[count]=x.type;
 }
-Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:32:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
+Arrays.sort(keys);
 keys[count]=x.type;
 }
-Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:32:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
-}
 Arrays.sort(keys);
+}
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:32:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
+if(!keys.equals("")){
 Arrays.sort(keys);
+}
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:32:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+if(count<0){
+return null;
+}
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:32:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
+if(count<0){
+return null;
+}
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:32:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
+if(count<0){
+return null;
+}
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:32:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+}
+if(count<0){
+return null;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:32:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
+if(keys.equals("-1")){
+return null;
+}
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:32:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
+assert (keys!=null);
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:32:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+assert (keys!=null);
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:32:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+if(keys[count]==0){
+return null;
+}
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:32:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+}
+if(keys[count]==0){
+return null;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:32:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
+assert (count!=0);
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:33:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
+assert (keys!=new int[count]);
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:33:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+assert (x!=null);
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:33:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
+count++;
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+count++;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 2, DEL : 2
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:33:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
+count++;
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
+count++;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 2, DEL : 2
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:33:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+count--;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+count--;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 2, DEL : 2
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:33:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+count--;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+count--;
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 2, DEL : 2
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:33:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
-keys[count]=x.type;
+keys[count]=-1;
+keys[count]++;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:33:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
-keys[count]=x.type;
+keys[count]=-1;
 }
+keys[count]++;
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:33:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
+assert (keys!=null);
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:33:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+if((Thread.currentThread().interrupted())){
+return null;
+}
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:33:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
+if((Thread.currentThread().interrupted())){
+return null;
+}
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:33:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
+if((Thread.currentThread().interrupted())){
+return null;
+}
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:33:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+keys[count]=x.type;
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:33:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:33:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:33:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:33:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead;null!=x&&x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V43/1691/pattern-ver1-serial/src.main.java.net.imadz.lifecycle.meta.builder.impl.helpers.CallbackMethodConfigureScanner.java-evaluateObserverMethod.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:33:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead;null!=x&&x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V43/1691/pattern-ver1-serial/src.main.java.net.imadz.lifecycle.meta.builder.impl.helpers.CallbackMethodConfigureScanner.java-evaluateObserverMethod.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:34:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
+assert (count>=0):"Receive a negative tratment";
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:34:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+assert (count>=0):"Receive a negative tratment";
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:34:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
+assert (count>=0):"Receive a negative tratment";
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:34:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:34:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:34:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:34:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+assert (keys!=null):"Appointments day is not allowed to be null!";
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:34:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
+assert (keys!=null):"Appointments day is not allowed to be null!";
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:34:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+assert (count!=0):"Receive a size tratment";
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:34:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
+assert (count!=0):"Receive a size tratment";
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:34:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private int[] getSortedPropTypes(){
 int count=0;
+assert (count!=0):"Receive a size tratment";
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:34:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
+if(count>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:34:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+}
+if(count>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:34:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+if(count>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:34:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
+if(count>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:34:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+}
+if(keys==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:34:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+if(count<=0){
+count=1;
+}
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/2376/pattern-ver1-serial/src.br.com.siva.pinkmusic.list.RadioStationList.java-cancel.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:34:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+}
+if(count<=0){
+count=1;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/2376/pattern-ver1-serial/src.br.com.siva.pinkmusic.list.RadioStationList.java-cancel.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:34:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+if(keys[count]<0){
+keys[count]=0;
+}
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:35:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+}
+if(keys[count]<0){
+keys[count]=0;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:35:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
+if(count<=0){
+count=1;
+}
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:35:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
+if(count<=0){
+count=1;
+}
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:35:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+if(count==100){
+count=0;
+}
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/7421/pattern-ver1-serial/MyDate.java-increment.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:35:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+}
+if(count==100){
+count=0;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/7421/pattern-ver1-serial/MyDate.java-increment.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:35:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+if(keys[count]!=x.type){
 count--;
-keys[count]=x.type;
+}
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:35:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
+int[] t=keys;
+keys=null;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
-return keys;
+return t;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5100/pattern-ver1-serial/CityGenJava.src.gameObjects.player.Player.java-drop.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 1, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:35:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
+if(keys==null){
+throw new IllegalStateException("User isn't registered! "+count);
+}
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:35:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
+boolean succeeded=false;
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+succeeded=true;
+}
+if(!succeeded){
+return null;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:35:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+if(count==3){
+System.out.println("debug");
+}
 count--;
 keys[count]=x.type;
+if(count==3){
+System.out.println("debug");
+}
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:35:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
+if(count==3){
+System.out.println("debug");
+}
+if(count==3){
+System.out.println("debug");
+}
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:35:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
+if(count==3){
+System.out.println("debug");
+}
 count++;
+if(count==3){
+System.out.println("debug");
+}
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:35:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
-Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 8, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:35:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
+long startTime=System.currentTimeMillis();
 count++;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:35:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+long startTime=System.currentTimeMillis();
 count--;
 keys[count]=x.type;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:35:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
+long startTime=System.currentTimeMillis();
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:35:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
+keys[28]=(byte)0x88;
+keys[29]=0x58;
+keys[30]=0x01;
+keys[31]=0x00;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/2015/pattern-ver1-serial/src.info.dreamingfish123.wavetransdemo.MainActivity.java-writeWaveFile.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 17, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:35:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+keys[28]=(byte)0x88;
+keys[29]=0x58;
+keys[30]=0x01;
+keys[31]=0x00;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/2015/pattern-ver1-serial/src.info.dreamingfish123.wavetransdemo.MainActivity.java-writeWaveFile.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 17, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:36:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
+for(int i=0;i<4;i++){
+keys[i]=Math.min(1,Math.max(0,keys[i]));
+}
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/2980/pattern-ver1-serial/megamek.src.megamek.client.ui.swing.MiniMap.java-paintBVSection.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 0, INS : 20, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:36:05 CDT
--------------- END -----------------
Location : com.google.javascript.rhino.Node.toString:[872]#1.0
Compute Candidate : 2019.09.07 AD at 04:36:56 CDT - 2019.09.07 AD at 04:40:24 CDT , PNumber : 11327, CandNumber : 26 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return toString(false,true,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V13/6998/pattern-ver1-serial/api.src.main.java.org.ednovo.gooru.domain.service.ScollectionServiceImpl.java-createCollectionItem.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:40:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return toString(true,false,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V13/6998/pattern-ver1-serial/api.src.main.java.org.ednovo.gooru.domain.service.ScollectionServiceImpl.java-createCollectionItem.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return toString(true,true,false);
 }

PATTERN : /home/jiajun/GithubData/2015/V13/6998/pattern-ver1-serial/api.src.main.java.org.ednovo.gooru.domain.service.ScollectionServiceImpl.java-createCollectionItem.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:40:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
+this.toString();
 return toString(true,true,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:40:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return toString(false,false,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V20/505/pattern-ver1-serial/app.src.main.java.com.door43.translationstudio.core.ExportUsfm.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:40:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return toString(false,true,false);
 }

PATTERN : /home/jiajun/GithubData/2016/V20/505/pattern-ver1-serial/app.src.main.java.com.door43.translationstudio.core.ExportUsfm.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:40:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return toString(true,false,false);
 }

PATTERN : /home/jiajun/GithubData/2016/V20/505/pattern-ver1-serial/app.src.main.java.com.door43.translationstudio.core.ExportUsfm.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:40:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
+int a=0;
 return toString(true,true,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:40:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
+String OUTSTRING="";
 return toString(true,true,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:40:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
+int a=1;
 return toString(true,true,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:40:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
+boolean b=true;
 return toString(true,true,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:41:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return this.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6962/pattern-ver1-serial/CodenameOne.src.com.codename1.ui.Toolbar.java-constructSideNavigationComponent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:41:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:41:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return "";
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:41:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return toString(true,true,true).trim();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:41:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return new String(toString(true,true,true));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:41:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return (String)toString(true,true,true);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:41:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return toString(true,true,true).toLowerCase();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:41:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return toString(true,true,true).replaceAll("\r","");
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:41:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return (String)(toString(true,true,true));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:41:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return String.format("%s",toString(true,true,true));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:41:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return "FolderPersister for '"+this;
 }

PATTERN : /home/jiajun/GithubData/2016/V10/1833/pattern-ver1-serial/src.main.de.dal33t.powerfolder.disk.Folder.java-toString.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:41:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 @Override public String toString(){
-return toString(true,true,true);
+return toString(true,true,true)+".*";
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6165/pattern-ver1-serial/src.main.java.com.oneandone.network.snmpman.configuration.type.WildcardOID.java-toString.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:41:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return toString(true,true,true)==null?"":toString(true,true,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:41:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return toString(true,true,true)!=null?toString(true,true,true):new String();
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:41:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return toString(true,true,true)==null?new String():toString(true,true,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:41:51 CDT
--------------- END -----------------
Location : com.google.javascript.rhino.Node.toString:[881, 882, 883]#1.0
Compute Candidate : 2019.09.07 AD at 04:42:41 CDT - 2019.09.07 AD at 04:54:01 CDT , PNumber : 11330, CandNumber : 79 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-StringBuilder sb=new StringBuilder();
+ StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:54:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-StringBuilder sb=new StringBuilder();
+StringBuilder sb=new StringBuilder(null);
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/104/pattern-ver1-serial/cps.hu.bme.mit.inf.cps.patterns.src-gen.hu.bme.mit.inf.cps.patterns.AllApplicationInstanceIsRunningMatch.java-newEmptyMatch.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:54:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+if(printSource){
 toString(sb,printSource,printAnnotations,printType);
+}
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/3119/pattern-ver1-serial/X3-InteractiveMap_GUI.src.main.java.de.ncm.x3.iam.gui.component.universe.JSector.java-setHighlighted.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:54:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+if(printAnnotations){
 toString(sb,printSource,printAnnotations,printType);
+}
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/3119/pattern-ver1-serial/X3-InteractiveMap_GUI.src.main.java.de.ncm.x3.iam.gui.component.universe.JSector.java-setHighlighted.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:54:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+if(printType){
 toString(sb,printSource,printAnnotations,printType);
+}
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/3119/pattern-ver1-serial/X3-InteractiveMap_GUI.src.main.java.de.ncm.x3.iam.gui.component.universe.JSector.java-setHighlighted.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:54:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-StringBuilder sb=new StringBuilder();
+StringBuilder sb=new StringBuilder(1);
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3262/pattern-ver1-serial/app.src.main.java.com.playing.lokasee.activites.MainActivity.java-onClose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:54:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
+import java.io.UnsupportedEncodingException;
+
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-StringBuilder sb=new StringBuilder();
+StringBuilder sb=new StringBuilder("UTF-8");
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V37/5909/pattern-ver1-serial/platform.security.handler.security-handler-api.src.main.java.org.codice.ddf.security.handler.api.PKIAuthenticationToken.java-PKIAuthenticationToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:54:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-StringBuilder sb=new StringBuilder();
+StringBuilder sb=new StringBuilder(2);
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5794/pattern-ver1-serial/app.src.main.java.io.github.louistsaitszho.erg2.gui.HistoryAdapter.java-startDateTimeToString.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:54:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return null;
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:54:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return "";
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:54:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
+this.toString();
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:54:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return sb.toString().trim();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:54:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return new String(sb.toString());
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:54:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return (String)sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:54:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return sb.toString().toLowerCase();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:54:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+synchronized(this){
 toString(sb,printSource,printAnnotations,printType);
+}
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:54:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return (String)(sb.toString());
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:54:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
+synchronized(this){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
+}
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:55:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+sb.append("]");
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:55:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+sb.append("            scope.apply();\n");
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V37/4602/pattern-ver1-serial/layout.src.main.java.com.flarestar.drones.layout.directives.Click.java-afterViewCreated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:55:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+sb=sb;
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:55:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
-if(Token.printTrees){
+if(Token.printTrees&&printSource){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2749/pattern-ver1-serial/Stuyablo.java-combat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:55:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
-if(Token.printTrees){
+if(Token.printTrees&&printAnnotations){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2749/pattern-ver1-serial/Stuyablo.java-combat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:55:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
-if(Token.printTrees){
+if(Token.printTrees&&printType){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2749/pattern-ver1-serial/Stuyablo.java-combat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:55:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
+int a=0;
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:55:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
+String OUTSTRING="";
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:55:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+if(equals(sb)){
+return null;
+}
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:55:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+if(equals(printSource)){
+return null;
+}
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:55:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+if(equals(printAnnotations)){
+return null;
+}
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:55:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+if(equals(printType)){
+return null;
+}
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:55:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
+if(equals(printSource)){
+return null;
+}
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:55:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
+if(equals(printAnnotations)){
+return null;
+}
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:55:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
+if(equals(printType)){
+return null;
+}
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:55:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+sb.append(" & ");
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:55:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return "FolderPersister for '"+this;
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V10/1833/pattern-ver1-serial/src.main.de.dal33t.powerfolder.disk.Folder.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:55:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+sb.append("    }\n");
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:55:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
+int a=1;
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:55:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+sb.append(printSource);
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:56:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+sb.append(printAnnotations);
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:56:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+sb.append(printType);
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:56:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
+boolean b=true;
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:56:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return sb.toString()+".*";
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6165/pattern-ver1-serial/src.main.java.com.oneandone.network.snmpman.configuration.type.WildcardOID.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:56:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+if(sb==null){
+return "";
+}
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:56:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+if(sb==null){
+return null;
+}
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:56:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
+if(sb==null){
+return null;
+}
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:56:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+if("&null".equals(sb)){
+return null;
+}
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:56:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
+}
+if("&null".equals(printSource)){
+return null;
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:56:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+if("&null".equals(printSource)){
+return null;
+}
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:56:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
+}
+if("&null".equals(printAnnotations)){
+return null;
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:56:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+if("&null".equals(printAnnotations)){
+return null;
+}
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:56:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
+}
+if("&null".equals(printType)){
+return null;
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:56:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+if("&null".equals(printType)){
+return null;
+}
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:56:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+if(sb.equals("")){
+return "";
+}
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:56:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+if(sb.equals("-1")){
+return null;
+}
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:56:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
-if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+if(Token.printTrees){
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:56:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+assert (sb!=null);
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:57:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return sb.toString().replaceAll("\r","");
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:57:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return String.format("%s",sb.toString());
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:57:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+assert (sb!=new StringBuilder());
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:57:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+if(sb.equals(null)){
+return null;
+}
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:57:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
+if(sb.equals(null)){
+return null;
+}
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:57:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-StringBuilder sb=new StringBuilder();
+String indexClassList="com.servinglynk.hmis.warehouse.model.v2014.Client";
+StringBuilder sb=new StringBuilder(indexClassList);
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/910/pattern-ver1-serial/hmis-service-v2014.src.main.java.com.servinglynk.hmis.warehouse.service.impl.SearchServiceImpl.java-indexing.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:57:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
+String indexClassList="com.servinglynk.hmis.warehouse.model.v2014.Client";
 if(Token.printTrees){
-StringBuilder sb=new StringBuilder();
+StringBuilder sb=new StringBuilder(indexClassList);
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/910/pattern-ver1-serial/hmis-service-v2014.src.main.java.com.servinglynk.hmis.warehouse.service.impl.SearchServiceImpl.java-indexing.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:57:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
+if(sb.equals("655")){
+System.out.println();
+}
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:57:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+if(sb.equals("655")){
+System.out.println();
+}
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:57:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return sb.toString()==null?"":sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:57:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return sb.toString()!=null?sb.toString():new String();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:57:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return sb==null?null:sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4320/pattern-ver1-serial/src.main.java.org.jenkinsci.plugins.githubissues.GitHubIssueNotifier.java-getRepoForJob.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:57:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return sb.toString()==null?new String():sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:57:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
+if(sb!=null){
 return sb.toString();
+}else {
+return null;
+}
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V35/3589/pattern-ver1-serial/HermesBucarBala.app.src.main.java.com.laboratoriodesoftware2015.hermesbucarbala.presenter.DashboardPresenter.java-getListTabsById.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:57:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return sb!=null?sb.toString():null;
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/997/pattern-ver1-serial/src.main.java.bammerbom.ultimatecore.bukkit.r.java-getPermission.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:57:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+assert (sb!=null):"Appointments day is not allowed to be null!";
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:57:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
-return sb.toString();
+return sb!=null?sb.toString():"";
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3020/pattern-ver1-serial/src.main.java.com.karumi.reddo.task.GitHubRepositoryTask.java-execute.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:57:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
 toString(sb,printSource,printAnnotations,printType);
+if(sb==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:57:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+toString(sb,printSource,printAnnotations,printType);
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:57:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+sb.append(" (");
+sb.append(") ");
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:57:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+sb.append("\"category\" : [");
+sb.append("]");
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/1798/pattern-ver1-serial/src.main.java.com.github.jerdeb.daqvalidator.Validator.java-listCompliantCDM.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:58:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+sb.append("<table style=\"text-align: center;\" width=\"100%\" "+"height=\"100%\" border=\"0\" bordercolor=\"#000000\">");
+sb.append("</table>");
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5923/pattern-ver1-serial/photoweb.src.com.utils.web.GenerateHTML.java-genDayNavigate.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:58:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[875,886]
------------Candidate---------------
 public String toString(boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 StringBuilder sb=new StringBuilder();
+if(sb.toString().contains("E")&&sb.toString().charAt(sb.indexOf("E")+1)!='-'&&Integer.parseInt(sb.toString().substring(sb.indexOf("E")+1,sb.length()))<=15){
+return String.format("%.0f",Double.parseDouble(sb.toString().replace(' ','\0')));
+}
 toString(sb,printSource,printAnnotations,printType);
 return sb.toString();
 }
 return String.valueOf(type);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/476/pattern-ver1-serial/app.src.main.java.com.davidsgk.microcalc.MainActivity.java-Interpreter.pattern
MATCHLEVEL : ALL
ALL : 40, UPD : 0, INS : 40, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 04:58:08 CDT
--------------- END -----------------
Location : com.google.javascript.rhino.Node.toString:[895, 896, 897, 898, 899, 902, 903, 904, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 921, 925, 926, 927, 928, 929, 933, 934, 935, 936, 937, 938, 939, 940, 942, 978, 979, 980, 982, 986, 987, 991, 992, 1001, 900, 901, 905, 906, 907, 922, 923, 944, 945, 947, 948, 950, 952, 953, 955, 956, 958, 959, 961, 965, 967, 968, 970, 971, 974, 993, 994, 995, 996]#1.0
Compute Candidate : 2019.09.07 AD at 04:58:59 CDT - 2019.09.07 AD at 05:41:19 CDT , PNumber : 4202, CandNumber : 389 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+return ;
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+return ;
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
+return ;
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
+return ;
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+return ;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
+return ;
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
+return ;
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+return ;
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
+return ;
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/2057/pattern-ver1-serial/multiplication-game.Main.java-ollie.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
+return ;
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/2057/pattern-ver1-serial/multiplication-game.Main.java-ollie.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
+return ;
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/3473/pattern-ver1-serial/src.main.java.com.fabegabe.cmd.CCCommand.java-onCommand.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/1278/pattern-ver1-serial/tagstory.src.main.java.no.tagstory.StoryDetailActivity.java-hasPhoneRequirements.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3125/pattern-ver1-serial/given.src.banking.primitive.core.Savings.java-deposit.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+return ;
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3125/pattern-ver1-serial/given.src.banking.primitive.core.Savings.java-deposit.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
+return ;
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5432/pattern-ver1-serial/app.src.main.java.com.rrdevs.peerboard.DBCompare.java-authenticateLogin.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
+return ;
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5432/pattern-ver1-serial/app.src.main.java.com.rrdevs.peerboard.DBCompare.java-authenticateLogin.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
+ FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
-Object obj=x.objectValue;
+ Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+ int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type==0){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type==0){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
-if(obj!=null){
+if(obj==null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString==null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+long lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0;i<=keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
-value=obj.toString();
+value=toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/3325/pattern-ver1-serial/jtrim-gui.src.main.java.org.jtrim.swing.component.SimpleAsyncImageDisplay.java-setRotateInDegrees.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0;i>keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno==-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6722/pattern-ver1-serial/collections.queue.IntArrayQueue.java-peek.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type<=Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type<=Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+float lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6860/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.map.impl.eviction.MaxSizeChecker.java-isEvictablePerPartition.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
+break;
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2900/pattern-ver1-serial/BlueMesh.src.blue.mesh.ServerThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
+break;
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2900/pattern-ver1-serial/BlueMesh.src.blue.mesh.ServerThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0;i<keys.length;i--){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
-if(obj!=null){
+if(obj!=""){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V29/276/pattern-ver1-serial/src.edu.cpp.cs.cs141.final_project.User_Interface.TextUI.TextUserInterface.java-drawAlertText.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString!=""){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V29/276/pattern-ver1-serial/src.edu.cpp.cs.cs141.final_project.User_Interface.TextUI.TextUserInterface.java-drawAlertText.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type>=Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type>=Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+int type=keys[1];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type!=Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type!=Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+Integer type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+Integer lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
-if(printSource){
+if(true){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
-if(printAnnotations){
+if(true){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
-if(printSource){
+if(true){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
+case 203 :
+
+return ;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/4533/pattern-ver1-serial/src.com.orange.network.game.protocol.constants.GameConstantsProtos.java-valueOf.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+ final int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+ final int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
+ final FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
-Object obj=x.objectValue;
+ final Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.examples.ResourceListExample.java-printRecordings.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
+ final FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
+ final FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+ final int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+this.toString();
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+this.toString();
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+this.toString();
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+this.toString();
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
+this.toString();
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
+this.toString();
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
+this.toString();
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+this.toString();
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
+this.toString();
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+this.toString();
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append(getString().trim());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
-sb.append(" [source name: ");
+sb.append(" [source name: ".trim());
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
+sb.append("] [encoded source length: ".trim());
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
+sb.append("] [base line: ".trim());
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
+sb.append("] [end line: ".trim());
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
-sb.append(" [");
+sb.append(" [".trim());
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append(propToString(type).trim());
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
-sb.append(": ");
+sb.append(": ".trim());
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
-sb.append(value);
+sb.append(value.trim());
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.Iterator;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type==-1){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.Iterator;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type==-1){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+lineno++;
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+lineno++;
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
+type++;
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+type++;
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
-if(printSource){
+if(!printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
-if(printSource){
+if(!printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
-if(printType){
+if(!printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
-if(this instanceof StringNode){
+if(true){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
-if(this instanceof ScriptOrFnNode){
+if(true){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
+if(true){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
+i++;
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/868/pattern-ver1-serial/src.main.java.gcommon.objects.NumberFormatter.java-format.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+lineno--;
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append(sof.getEncodedSourceEnd()-2);
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
-if(obj!=null){
-value=obj.toString();
+if(first!=null){
+value=first.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/2709/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.expressions.Point2DExpression.java-getTablesInvolved.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
-String jsTypeString=jsType.toString();
+if(first!=null){
+String jsTypeString=first.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/2709/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.expressions.Point2DExpression.java-getTablesInvolved.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
 }
+if(sb==null){
+return ;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+if(sb==null){
+return ;
+}
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
+if(sb==null){
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(sb==null){
+return ;
+}
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+if(sb==null){
+return ;
+}
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
+if(sb==null){
+return ;
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
+if(sb==null){
+return ;
+}
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+if(sb==null){
+return ;
+}
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(sb==null){
+return ;
+}
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if(sb==null){
+return ;
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if(sb==null){
+return ;
+}
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+if(sb==null){
+return ;
+}
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
+if(sb==null){
+return ;
+}
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
+if(sb==null){
+return ;
+}
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
+if(sb==null){
+return ;
+}
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
+if(sb==null){
+return ;
+}
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+if(sb==null){
+return ;
+}
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+if(sb==null){
+return ;
+}
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
+if(sb==null){
+return ;
+}
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(x==null){
+return ;
+}
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
+if(keys==null){
+return ;
+}
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(sof==null){
+return ;
+}
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+if(fn==null){
+return ;
+}
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(sb!=null){
 sb.append(' ');
+}
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+if(getString()!=null){
 sb.append(getString());
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+if(first.getString()!=null){
 sb.append(first.getString());
+}
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
+if(fn.getFunctionName()!=null){
 sb.append(fn.getFunctionName());
+}
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+if(sb!=null){
 sb.append(getString());
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/3708/pattern-ver1-serial/mifosng-android.src.main.java.com.mifos.mifosxdroid.online.ClientListFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
+if(sb==null){
+return ;
+}
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+if(sb==null){
+return ;
+}
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
+if(sb==null){
+return ;
+}
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
+}
+if(sof==(ScriptOrFnNode)this){
+return ;
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(' '>0){
 sb.append(' ');
+}
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/1583/pattern-ver1-serial/core.src.main.java.tachyon.client.CountingWritableBlockChannel.java-write.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if("index".equals(sb)){
+return ;
+}
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if("index".equals(sb)){
+return ;
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if("index".equals(sb)){
+return ;
+}
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if("index".equals(printSource)){
+return ;
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+if("index".equals(sb)){
+return ;
+}
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
+if("index".equals(sb)){
+return ;
+}
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
+if("index".equals(sb)){
+return ;
+}
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
+if("index".equals(sb)){
+return ;
+}
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+if("index".equals(sb)){
+return ;
+}
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+if("index".equals(sb)){
+return ;
+}
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(sb.equals("TIME")){
+return ;
+}
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if(sb.equals("TIME")){
+return ;
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
+if(sb.equals("TIME")){
+return ;
+}
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if(sb.equals("TIME")){
+return ;
+}
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+if(sb.equals("TIME")){
+return ;
+}
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
+if(sb.equals("TIME")){
+return ;
+}
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
+if(sb.equals("TIME")){
+return ;
+}
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
+if(sb.equals("TIME")){
+return ;
+}
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
 }
+if("&null".equals(sb)){
+return ;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+if("&null".equals(sb)){
+return ;
+}
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
 }
+if("&null".equals(printSource)){
+return ;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
+if("&null".equals(sb)){
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if("&null".equals(sb)){
+return ;
+}
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+if("&null".equals(sb)){
+return ;
+}
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
+if("&null".equals(sb)){
+return ;
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
+if("&null".equals(sb)){
+return ;
+}
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
+if("&null".equals(printSource)){
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+if(sb.equals("DATETIME")){
+return ;
+}
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
 }
+if(sb.equals("DATETIME")){
+return ;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+if(sb.equals("DATETIME")){
+return ;
+}
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
+if(sb.equals("DATETIME")){
+return ;
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
+if(sb.equals("DATETIME")){
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(sb.equals("DATETIME")){
+return ;
+}
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+if(sb.equals("DATETIME")){
+return ;
+}
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
+if(sb.equals("DATETIME")){
+return ;
+}
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+if(sb.equals("DATETIME")){
+return ;
+}
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if(first==null){
+return ;
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2437/pattern-ver1-serial/app.src.main.java.org.gdg.frisbee.android.onboarding.FirstStartStep1Fragment.java-addChapters.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString.isEmpty()){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7829/pattern-ver1-serial/app.src.main.java.de.tum.in.tumcampusapp.activities.TransportationDetailsActivity.java-onLoadInBackground.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
+ final FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
-Object obj=x.objectValue;
+ final Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+ final int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append(Token.name(type).trim());
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+sb.append("]");
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append("]");
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
+sb.append("]");
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ @SuppressWarnings("UnusedAssignment") ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ @SuppressWarnings("UnusedAssignment") int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ @SuppressWarnings("UnusedAssignment") ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ @SuppressWarnings("UnusedAssignment") PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ @SuppressWarnings("UnusedAssignment") ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ @SuppressWarnings("UnusedAssignment") String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ @SuppressWarnings("UnusedAssignment") int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ @SuppressWarnings("UnusedAssignment") PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ @SuppressWarnings("UnusedAssignment") int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ @SuppressWarnings("UnusedAssignment") String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ @SuppressWarnings("UnusedAssignment") PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ @SuppressWarnings("UnusedAssignment") String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ @SuppressWarnings("UnusedAssignment") int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ @SuppressWarnings("UnusedAssignment") String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type+type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
+if(keys.equals("")){
+return ;
+}
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(x.equals("")){
+return ;
+}
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(sof.equals("")){
+return ;
+}
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+if(i==4){
+continue;
+}
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
-if(obj!=null){
+if(true){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
+if(true){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(true){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(true){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append("Error, "+getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4103/pattern-ver1-serial/src.recommendations.nodes.Product.java-Product.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-sb.append(first.getString());
+sb.append("Error, "+first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4103/pattern-ver1-serial/src.recommendations.nodes.Product.java-Product.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
+if(type<0){
+return ;
+}
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+if(type<0){
+return ;
+}
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append("https://myschool.ru.is/myschool/"+Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append("https://myschool.ru.is/myschool/"+getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
-sb.append(sof.getSourceName());
+sb.append("https://myschool.ru.is/myschool/"+sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
+sb.append("https://myschool.ru.is/myschool/"+sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
+sb.append("https://myschool.ru.is/myschool/"+sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append("https://myschool.ru.is/myschool/"+getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-sb.append(first.getString());
+sb.append("https://myschool.ru.is/myschool/"+first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
-sb.append(fn.getFunctionName());
+sb.append("https://myschool.ru.is/myschool/"+fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append("https://myschool.ru.is/myschool/"+propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
+Arrays.sort(keys);
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/5055/pattern-ver1-serial/cli.src.main.java.com.vmware.bdd.cli.commands.ClusterCommands.java-getCluster.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+Arrays.sort(keys);
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/5055/pattern-ver1-serial/cli.src.main.java.com.vmware.bdd.cli.commands.ClusterCommands.java-getCluster.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(x.equals("-1")){
+return ;
+}
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(sof.equals("-1")){
+return ;
+}
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+if(fn.equals("-1")){
+return ;
+}
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
+ final FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V37/6206/pattern-ver1-serial/ColFusionServerBLL.src.main.java.edu.pitt.sis.exp.colfusion.bll.BasicTableBL.java-getAttachmentList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString!=null||jsTypeString.isEmpty()){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/354/pattern-ver1-serial/hapi-fhir-base.src.main.java.ca.uhn.fhir.parser.XmlParser.java-encodeCompositeElementChildrenToStreamWriter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
+synchronized(this){
 value=obj.toString();
+}
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+sb.append(" [source name: ");
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+sb.append("] [encoded source length: ");
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+sb.append("] [base line: ");
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+sb.append("] [end line: ");
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+sb.append(']');
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+sb.append(' ');
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+sb.append(getDouble());
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
+sb.append(" [source name: ");
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
+sb.append("] [encoded source length: ");
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
+sb.append("] [base line: ");
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+sb.append(" [source name: ");
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+sb.append("] [encoded source length: ");
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+sb.append("] [base line: ");
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+sb.append(" [source name: ");
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+sb.append("] [encoded source length: ");
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+sb.append("] [base line: ");
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+sb.append(" [source name: ");
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
+sb.append(" [source name: ");
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+sb.append(" [source name: ");
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
+sb.append(" [source name: ");
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+sb.append(" [source name: ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+sb.append(" [source name: ");
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+sb.append("] [encoded source length: ");
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+sb.append(" [source name: ");
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append(" [source name: ");
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append("] [encoded source length: ");
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append("] [base line: ");
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append("] [end line: ");
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append(']');
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append(' ');
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append(getDouble());
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+sb.append(' ');
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+sb.append(" [source name: ");
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+sb.append("] [encoded source length: ");
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+sb.append("] [base line: ");
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+sb.append("] [end line: ");
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+sb.append(']');
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+sb.append(lineno);
 if(lineno!=-1){
 sb.append(' ');
-sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+sb.append(jsTypeString);
 if(jsTypeString!=null){
 sb.append(" : ");
-sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
-if(this instanceof StringNode){
 sb.append(' ');
+if(this instanceof StringNode){
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
-sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
+sb.append(' ');
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
+sb.append(getString());
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
+sb.append(getString());
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
+sb.append(' ');
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
+sb.append(' ');
 sb.append(Token.name(type));
 if(this instanceof StringNode){
-sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+sb.append(' ');
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
-sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
+sb.append(getString());
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+sb.append(getString());
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+sb.append(" [source name: ");
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
-sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+sb.append(" [source name: ");
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+sb.append(" [source name: ");
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+sb.append("] [encoded source length: ");
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+if(!getString().equals("")){
 sb.append(getString());
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+if(!first.getString().equals("")){
 sb.append(first.getString());
+}
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type==Token.FUNCTION||type==Long.MIN_VALUE){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno!=-1||lineno==Long.MIN_VALUE){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type==Token.NUMBER||type==Long.MIN_VALUE){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
+sb.append(" [source name: ");
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
+sb.append("] [encoded source length: ");
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
+sb.append("] [base line: ");
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
+sb.append("] [end line: ");
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
+sb.append(']');
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
+sb.append(' ');
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
-if(obj!=null){
+if(obj!=null||"查看红包".equals(obj)){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString!=null||"查看红包".equals(jsTypeString)){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
+if(jsType!=null||"查看红包".equals(jsType)){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type==Token.FUNCTION||"查看红包".equals(type)){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type==Token.FUNCTION||type==3){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno!=-1||lineno==3){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type==Token.NUMBER||type==3){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append(first.getString());
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+sb.append(sof.getSourceName());
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/293/pattern-ver1-serial/common.ganymedes01.aobd.recipes.RecipesHandler.java-craftingRecipes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString!=null||jsTypeString==""){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/7341/pattern-ver1-serial/log210_webproject_BDD.src.RechercheLivre.java-RechercheLivre.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
-if(obj!=null){
+if(obj!=null||obj==""){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/7341/pattern-ver1-serial/log210_webproject_BDD.src.RechercheLivre.java-RechercheLivre.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type<0||type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type<0||type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno<0||lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
+sb.append(first.getString());
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/2884/pattern-ver1-serial/src.edu.asu.laits.gui.nodeeditor.CalculationsPanelView.java-processNodeEquation.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
+sb.append(sof.getSourceName());
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/2664/pattern-ver1-serial/src.main.java.micdoodle8.mods.galacticraft.planets.asteroids.entities.EntityGrapple.java-EntityGrapple.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
+value=obj.toString();
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
+sb.append(sof.getSourceName());
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
+sb.append(sof.getSourceName());
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
+sb.append(sof.getBaseLineno());
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
+sb.append(sof.getEndLineno());
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
+value=obj.toString();
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+synchronized(this){
 sb.append(' ');
 sb.append(getString());
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+synchronized(this){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+synchronized(this){
 sb.append(' ');
 sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+synchronized(this){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(sb==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+if(sb==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if(sb==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if(" [source name: "==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if("] [encoded source length: "==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
+sb.append(Token.name(type));
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+sb.append(Token.name(type));
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append(Token.name(type));
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append(Token.name(type));
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+sb.append(Token.name(type));
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append(Token.name(type));
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
+sb.append(Token.name(type));
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+sb.append(Token.name(type));
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
+sb.append(Token.name(type));
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+sb.append(Token.name(type));
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
+sb.append(Token.name(type));
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+sb.append(Token.name(type));
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
+sb.append(Token.name(type));
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
-if(Token.printTrees){
 sb.append(Token.name(type));
+if(Token.printTrees){
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+sb.append(" (");
 sb.append(getString());
+sb.append(") ");
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append(" (");
+sb.append(") ");
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+sb.append(" (");
 sb.append(first.getString());
+sb.append(") ");
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append(" (");
+sb.append(") ");
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+sb.append(" (");
+sb.append(") ");
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+sb.append(" (");
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
+sb.append(") ");
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+sb.append(" (");
 sb.append(' ');
 sb.append(fn.getFunctionName());
+sb.append(") ");
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
+sb.append(" (");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
+sb.append(") ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
-sb.append(' ');
+if(sb!=null){
 sb.append(getString());
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5851/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.grid.GridMemberHandler.java-onTileRemoved.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(sb!=null){
 sb.append(' ');
-sb.append(getString());
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5851/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.grid.GridMemberHandler.java-onTileRemoved.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+sb.append(Token.name(type));
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/6439/pattern-ver1-serial/core.src.game.screen.battle.Battle.java-render.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+sb.append(Token.name(type));
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/6439/pattern-ver1-serial/core.src.game.screen.battle.Battle.java-render.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+sb.append(Token.name(type));
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/6439/pattern-ver1-serial/core.src.game.screen.battle.Battle.java-render.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
+sb.append(Token.name(type));
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/6439/pattern-ver1-serial/core.src.game.screen.battle.Battle.java-render.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+sb.append(Token.name(type));
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/6439/pattern-ver1-serial/core.src.game.screen.battle.Battle.java-render.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
+value=String.valueOf(x.intValue);
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
+value=String.valueOf(x.intValue);
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(sb!=null){
 sb.append(' ');
+}
+if(sb!=null){
 sb.append(getString());
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/1406/pattern-ver1-serial/src.com.netease.qa.emmagee.utils.TrafficInfo.java-getTrafficInfo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+synchronized(this){
 sb.append(' ');
 sb.append(first.getString());
+}
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+if(getString()!=null){
 sb.append(getString());
+}else {
+sb.append("");
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/6520/pattern-ver1-serial/src.main.java.org.metadatacenter.submission.biosample.core.BioSampleValidator.java-generateBioSampleSubmissionXML.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
+}
+if(x==null||value==null){
+return ;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3334/pattern-ver1-serial/src.org.nschmidt.ldparteditor.data.VM03Adjacency.java-linkedCommonFaces.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(x==null){
+throw new IllegalStateException("User isn't registered! "+type);
+}
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
+}
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
+synchronized(this){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
+}
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
+synchronized(this){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
-sb.append(fn.getFunctionName());
-}
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
-}
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 0, INS : 1, DEL : 14
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
-}
-}
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+}
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 0, INS : 1, DEL : 14
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString!=null&&jsTypeString.trim().length()==0){
+jsTypeString=null;
+}
+if(jsTypeString!=null||jsTypeString.trim().length()==0){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5053/pattern-ver1-serial/src.edu.clemson.lph.civet.prefs.CivetConfig.java-getEmailErrorsDirPath.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 7, INS : 12, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
-sb.append(' ');
-sb.append(getString());
+String jsTypeString=jsType.toString();
+if(jsTypeString!=null){
+sb.append(" : ");
+sb.append(jsTypeString);
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
-sb.append(" : ");
-sb.append(jsTypeString);
-}
+sb.append(' ');
+sb.append(getString());
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
+synchronized(this){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
+}
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 34, UPD : 34, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
+}
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 36, UPD : 0, INS : 1, DEL : 35
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
+synchronized(this){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
+}
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 52, UPD : 52, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
-}else {
-if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
-sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
-}
 }else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
-}
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 63, UPD : 0, INS : 0, DEL : 63
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
+if(this instanceof ScriptOrFnNode){
+ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
+}
+}else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
+}
+}
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 64, UPD : 0, INS : 1, DEL : 63
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+if(this instanceof ScriptOrFnNode){
+ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
+}
+}else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
+}
+}
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 64, UPD : 0, INS : 1, DEL : 63
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
+}else {
+if(this instanceof ScriptOrFnNode){
+ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
+}
 }else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
+}
+}
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 64, UPD : 0, INS : 1, DEL : 63
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-sb.append(first.getString());
-}else {
-if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
-sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
-}
 }else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
-}
-}
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4121/pattern-ver1-serial/main.plugins.org.talend.dataprofiler.core.src.org.talend.dataprofiler.core.ImageLib.java-getImageNameByRepositoryNode.pattern
MATCHLEVEL : ALL
ALL : 73, UPD : 0, INS : 0, DEL : 73
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
-}
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1742/pattern-ver1-serial/obdalib-protege41.src.main.java.it.unibz.krdb.obda.protege4.gui.action.R2RMLImportAction.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 73, UPD : 73, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-sb.append(first.getString());
-}else {
-if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
-sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
-}
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
-}
-}
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1742/pattern-ver1-serial/obdalib-protege41.src.main.java.it.unibz.krdb.obda.protege4.gui.action.R2RMLImportAction.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 73, UPD : 73, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
+}
+}
+}else {
+if(this instanceof ScriptOrFnNode){
+ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
 }
+}else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7797/pattern-ver1-serial/src.com.felhr.usbserial.UsbSerialDevice.java-createUsbSerialDevice.pattern
MATCHLEVEL : ALL
ALL : 73, UPD : 73, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
 }
 }
+}else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7797/pattern-ver1-serial/src.com.felhr.usbserial.UsbSerialDevice.java-createUsbSerialDevice.pattern
MATCHLEVEL : ALL
ALL : 73, UPD : 73, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
-if(this instanceof StringNode){
-sb.append(' ');
-sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-sb.append(first.getString());
-}else {
-if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
-sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
-}
-}else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
-}
-}
-}
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/3749/pattern-ver1-serial/src.main.java.me.chaopeng.utils.DirUtils.java-rm.pattern
MATCHLEVEL : ALL
ALL : 81, UPD : 0, INS : 0, DEL : 81
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_101_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
+}
+}
+}else {
+if(type==Token.FUNCTION){
+sb.append(' ');
+sb.append(first.getString());
+}else {
+if(this instanceof ScriptOrFnNode){
+ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
+}
+}else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7797/pattern-ver1-serial/src.com.felhr.usbserial.UsbSerialDevice.java-createUsbSerialDevice.pattern
MATCHLEVEL : ALL
ALL : 207, UPD : 207, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives]
---------START : 2019.09.07 AD at 00:40:35 CDT
---------TIME : 2019.09.07 AD at 05:41:19 CDT
--------------- END -----------------
Finish : closure-101 > patch : 0 | Start : Sat Sep 07 00:40:35 CDT 2019 | End : 2019.09.07 AD at 05:41:19 CDT
