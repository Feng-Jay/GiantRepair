Repair : closure_70
Current failed test : com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl | 2019.09.06 AD at 10:38:18 CDT
Location : com.google.javascript.jscomp.Scope.getInputName:[265, 268, 266]#1.0
Compute Candidate : 2019.09.06 AD at 10:40:04 CDT - 2019.09.06 AD at 10:45:20 CDT , PNumber : 11342, CandNumber : 64 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
-return "<non-file>";
+return null;
 }else {
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:45:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
-return "<non-file>";
+return "";
 }else {
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:45:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
-return "<non-file>";
+return getName();
 }else {
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/230/pattern-ver1-serial/src.main.java.org.rapla.entities.dynamictype.internal.ParsedText.java-getRepresentation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:45:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
 return "<non-file>";
 }else {
-return input.getName();
+return input.toString();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/7441/pattern-ver1-serial/HelloWorld.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:45:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
 return "<non-file>";
 }else {
-return input.getName();
+return this.input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/1924/pattern-ver1-serial/src.main.java.org.spongepowered.api.util.command.ImmutableCommandMapping.java-getCallable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:45:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
 return "<non-file>";
 }else {
-return input.getName();
+return this.getInputName();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6962/pattern-ver1-serial/CodenameOne.src.com.codename1.ui.Toolbar.java-constructSideNavigationComponent.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:45:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
-return "<non-file>";
+return this.getInputName();
 }else {
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6962/pattern-ver1-serial/CodenameOne.src.com.codename1.ui.Toolbar.java-constructSideNavigationComponent.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:45:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
 return "<non-file>";
 }else {
-return input.getName();
+return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:45:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
 return "<non-file>";
 }else {
-return input.getName();
+return "";
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:46:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
+this.getInputName();
 return "<non-file>";
 }else {
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:46:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
 return "<non-file>";
 }else {
+this.getInputName();
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:46:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
+this.getInputName();
 if(input==null){
 return "<non-file>";
 }else {
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:46:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
-return "<non-file>";
+return "<non-file>".trim();
 }else {
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:46:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
 return "<non-file>";
 }else {
-return input.getName();
+return input.getName().trim();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:46:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
 return "<non-file>";
 }else {
-return input.getName();
+return new String(input.getName());
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:46:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
-return "<non-file>";
+return new String("<non-file>");
 }else {
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:46:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
 return "<non-file>";
 }else {
-return input.getName();
+return (String)input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:46:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
-return "<non-file>";
+return "<non-file>".toLowerCase();
 }else {
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:46:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
 return "<non-file>";
 }else {
-return input.getName();
+return input.getName().toLowerCase();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:46:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
 return "<non-file>";
 }else {
-return input.getName();
+return (String)(input.getName());
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:46:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
-return "<non-file>";
+return (String)("<non-file>");
 }else {
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:46:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
-return "<non-file>";
+return this.name;
 }else {
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4887/pattern-ver1-serial/azure-mgmt-resources.src.main.java.com.microsoft.azure.management.resources.fluentcore.arm.models.implementation.ResourceImpl.java-name.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:47:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
 return "<non-file>";
 }else {
-return input.getName();
+return this.name;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/7728/pattern-ver1-serial/src.vault_database.Attribute.java-getName.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:47:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
+synchronized(this){
 if(input==null){
 return "<non-file>";
 }else {
 return input.getName();
+}
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:47:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
-if(input==null){
+if(input.equals(null)){
 return "<non-file>";
 }else {
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:47:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
+synchronized(this){
 return "<non-file>";
+}
 }else {
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:47:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
-if(input==null){
+if(true){
 return "<non-file>";
 }else {
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:47:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
 return "<non-file>";
 }else {
+int a=0;
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:47:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
+int a=0;
 return "<non-file>";
 }else {
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:47:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
+int a=0;
 if(input==null){
 return "<non-file>";
 }else {
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:47:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
 return "<non-file>";
 }else {
+String OUTSTRING="";
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:47:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
+String OUTSTRING="";
 return "<non-file>";
 }else {
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:47:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
+String OUTSTRING="";
 if(input==null){
 return "<non-file>";
 }else {
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:47:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
 return "<non-file>";
 }else {
-return input.getName();
+return "FolderPersister for '"+this;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V10/1833/pattern-ver1-serial/src.main.de.dal33t.powerfolder.disk.Folder.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:48:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
-return "<non-file>";
+return "FolderPersister for '"+this;
 }else {
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V10/1833/pattern-ver1-serial/src.main.de.dal33t.powerfolder.disk.Folder.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:48:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
 return "<non-file>";
 }else {
+int a=1;
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:48:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
+int a=1;
 return "<non-file>";
 }else {
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:48:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
+int a=1;
 if(input==null){
 return "<non-file>";
 }else {
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:48:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
 return "<non-file>";
 }else {
+boolean b=true;
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:48:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
+boolean b=true;
 return "<non-file>";
 }else {
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:48:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
+boolean b=true;
 if(input==null){
 return "<non-file>";
 }else {
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:48:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public String getInputName(){
 if(input==null){
 return "<non-file>";
 }else {
-return input.getName();
+return input.getName()+".*";
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6165/pattern-ver1-serial/src.main.java.com.oneandone.network.snmpman.configuration.type.WildcardOID.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:48:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
 return "<non-file>";
 }else {
+if(input==null){
+return null;
+}
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:48:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
+if(input==null){
+return null;
+}
 if(input==null){
 return "<non-file>";
 }else {
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:48:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
-return "<non-file>";
+return "<non-file>".replaceAll("\r","");
 }else {
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:48:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
 return "<non-file>";
 }else {
-return input.getName();
+return input.getName().replaceAll("\r","");
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:49:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
-return "<non-file>";
+return String.format("%s","<non-file>");
 }else {
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:49:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
 return "<non-file>";
 }else {
-return input.getName();
+return String.format("%s",input.getName());
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:49:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
-if(input==null){
+if(input==null||"查看红包".equals(input)){
 return "<non-file>";
 }else {
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:49:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
-return "<non-file>";
+return "<non-file>"==null?"":"<non-file>";
 }else {
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:49:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
 return "<non-file>";
 }else {
-return input.getName();
+return input.getName()==null?"":input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:49:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
 return "<non-file>";
 }else {
-return input.getName();
+return input.getName()!=null?input.getName():new String();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:49:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
-return "<non-file>";
+return "<non-file>"!=null?"<non-file>":new String();
 }else {
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:49:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
 return "<non-file>";
 }else {
-return input.getName();
+return input==null?null:input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4320/pattern-ver1-serial/src.main.java.org.jenkinsci.plugins.githubissues.GitHubIssueNotifier.java-getRepoForJob.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:49:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
-if(input==null){
+if(input==null||input==null){
 return "<non-file>";
 }else {
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:49:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
-return "<non-file>";
+return "<non-file>"==null?new String():"<non-file>";
 }else {
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:49:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
 return "<non-file>";
 }else {
-return input.getName();
+return input.getName()==null?new String():input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:49:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
 return "<non-file>";
 }else {
+if(input!=null){
 return input.getName();
+}else {
+return null;
+}
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V35/3589/pattern-ver1-serial/HermesBucarBala.app.src.main.java.com.laboratoriodesoftware2015.hermesbucarbala.presenter.DashboardPresenter.java-getListTabsById.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:49:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
 return "<non-file>";
 }else {
-return input.getName();
+return input!=null?input.getName():null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/997/pattern-ver1-serial/src.main.java.bammerbom.ultimatecore.bukkit.r.java-getPermission.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:50:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
 return "<non-file>";
 }else {
+if(input==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:50:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
+if(input==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(input==null){
 return "<non-file>";
 }else {
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:50:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
-if(input==null){
+if(input==null&&!input.equals("")){
 return "<non-file>";
 }else {
 return input.getName();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:50:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
 if(input==null){
 return "<non-file>";
 }else {
+if(input!=null){
 return input.getName();
+}
+return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/4738/pattern-ver1-serial/src.tonegod.gui.controls.lists.ComboBox.java-getListItems.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 2, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:50:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/Scope.java[264,269]
------------Candidate---------------
 public String getInputName(){
+if(input!=null){
 if(input==null){
 return "<non-file>";
 }else {
 return input.getName();
+}
+}
+if(input==null){
+return "<non-file>";
+}else {
+return null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/4738/pattern-ver1-serial/src.tonegod.gui.controls.lists.ComboBox.java-getListItems.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 2, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 10:50:27 CDT
--------------- END -----------------
Location : com.google.javascript.jscomp.TypeValidator.expectUndeclaredVariable:[552, 553, 549, 533, 508, 509, 519, 524, 562, 534, 535, 540, 541, 511, 512, 513, 515, 536, 537]#1.0
Compute Candidate : 2019.09.06 AD at 10:52:03 CDT - 2019.09.06 AD at 12:15:37 CDT , PNumber : 11415, CandNumber : 868 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:15:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:15:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
+return ;
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:15:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
+return ;
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:15:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:16:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
+return ;
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:16:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
+return ;
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:16:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:16:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
+return ;
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:16:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
+return ;
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:16:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V45/3473/pattern-ver1-serial/src.main.java.com.fabegabe.cmd.CCCommand.java-onCommand.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:16:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.util.Locale;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
-Preconditions.checkState(parent.getType()==Token.FUNCTION);
+Preconditions.checkState(parent.getType()==Token.FUNCTION,Locale.US);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2959/pattern-ver1-serial/lib.src.main.java.org.theta4j.Theta.java-getDateTime.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:16:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
+return ;
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:16:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
+return ;
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:16:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
+return ;
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:16:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+return ;
 }
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:16:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+return ;
 }
 }
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:17:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+return ;
 }
 }
 }
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:17:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.util.Locale;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
-Preconditions.checkState(parent.getType()==Token.FUNCTION);
+Preconditions.checkState(parent.getType()==Token.FUNCTION,Locale.ENGLISH);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/6693/pattern-ver1-serial/src.main.java.com.twilio.sdk.resource.InstanceResource.java-parseDate.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:17:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
+return ;
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:17:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
+return ;
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:17:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
-Preconditions.checkState(parent.getType()==Token.FUNCTION);
+Preconditions.checkState(parent.getType()==Token.FUNCTION,String.CASE_INSENSITIVE_ORDER);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/1813/pattern-ver1-serial/src.me.libraryaddict.Hungergames.Managers.KitManager.java-addKit.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:17:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
-JSType varType=var.getType();
+ JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:17:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
-JSDocInfo info=n.getJSDocInfo();
+ JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:17:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
-boolean allowDupe=false;
+ boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:17:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)&&!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:17:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(!(allowDupe&&var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:17:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
-if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+if(n.getType()==Token.GETPROP&&NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:17:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
-Preconditions.checkState(parent.getType()==Token.FUNCTION);
+Preconditions.checkState(parent.getType()==Token.FUNCTION,false);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2675/pattern-ver1-serial/core.org.eclipse.cdt.core.parser.org.eclipse.cdt.internal.core.dom.parser.cpp.CPPASTConditionalExpression.java-convertToMatch.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:17:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(varType==null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:18:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
-allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
+allowDupe=info==null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:18:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType==null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:18:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
-if(info==null){
+if(info!=null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:18:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
-Preconditions.checkState(parent.getType()==Token.FUNCTION);
+Preconditions.checkState(parent.getType()==Token.FUNCTION,0);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3557/pattern-ver1-serial/src.main.java.com.jetbrains.jetpad.vclang.term.expr.sort.Level.java-prettyPrint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:18:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,varType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/668/pattern-ver1-serial/src.jp.ac.aiit.jointry.controllers.MainController.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:18:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
-if(n.getFirstChild()!=null){
+if(n.getFirstChild()==null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/2545/pattern-ver1-serial/kennedy-langlotz.KLQ.src.com.klq.ast.ParseTreeConverter.java-visitUncondQuestion.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:18:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,n.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/79/pattern-ver1-serial/src.main.java.com.brxt.service.impl.ReportManagerImpl.java-getFinanceCheckList.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:18:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,parent.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/79/pattern-ver1-serial/src.main.java.com.brxt.service.impl.ReportManagerImpl.java-getFinanceCheckList.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:18:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,var.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/79/pattern-ver1-serial/src.main.java.com.brxt.service.impl.ReportManagerImpl.java-getFinanceCheckList.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:18:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,sourceName.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/79/pattern-ver1-serial/src.main.java.com.brxt.service.impl.ReportManagerImpl.java-getFinanceCheckList.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:18:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1862/pattern-ver1-serial/app.src.main.java.com.nmatte.mood.logbookitems.boolitems.BoolItemTableHelper.java-insertOrUpdate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:19:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
-if(var.input==null){
+if(var.input!=null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/6105/pattern-ver1-serial/src.main.java.com.chord4js.ServiceId.java-ServiceId.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:19:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),newType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/3430/pattern-ver1-serial/org.eclipse.jdt.core.compiler.org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.java-inferFunctionalInterfaceParameterization.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:19:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),n.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/3430/pattern-ver1-serial/org.eclipse.jdt.core.compiler.org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.java-inferFunctionalInterfaceParameterization.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:19:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),parent.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/3430/pattern-ver1-serial/org.eclipse.jdt.core.compiler.org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.java-inferFunctionalInterfaceParameterization.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:19:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),var.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/3430/pattern-ver1-serial/org.eclipse.jdt.core.compiler.org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.java-inferFunctionalInterfaceParameterization.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:19:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),sourceName.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/3430/pattern-ver1-serial/org.eclipse.jdt.core.compiler.org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.java-inferFunctionalInterfaceParameterization.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:19:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),variableName.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/3430/pattern-ver1-serial/org.eclipse.jdt.core.compiler.org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.java-inferFunctionalInterfaceParameterization.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:19:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(n.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/1694/pattern-ver1-serial/flinklink.src.main.java.eu.amidst.flinklink.core.learning.parametric.ParallelMaximumLikelihood2.java-updateModel.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:19:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(parent.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/1694/pattern-ver1-serial/flinklink.src.main.java.eu.amidst.flinklink.core.learning.parametric.ParallelMaximumLikelihood2.java-updateModel.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:19:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
-if(shouldReport){
+if(true){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:19:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
-Preconditions.checkState(parent.getType()==Token.FUNCTION);
+Preconditions.checkState(parent.getType()==Token.FUNCTION,varType);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/6746/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.vplexcontroller.VPlexDeviceController.java-deleteStorageView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:19:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
-if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+if(n.getType()==Token.GETPROP!=NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4891/pattern-ver1-serial/app.src.main.java.edu.temple.androidpermissions.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:19:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)!=!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4891/pattern-ver1-serial/app.src.main.java.edu.temple.androidpermissions.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:20:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
-Preconditions.checkState(parent.getType()==Token.FUNCTION);
+Preconditions.checkState(parent.getType()==Token.FUNCTION,"UTF-8");
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1349/pattern-ver1-serial/eu.scasefp7.eclipse.reqeditor.src.eu.scasefp7.eclipse.reqeditor.wizards.ImportRqsWizardPage.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:20:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
-Preconditions.checkState(parent.getType()==Token.FUNCTION);
+Preconditions.checkState(parent.getType()==Token.FUNCTION,new ArrayList<KeyBinding>());
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:20:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(varType!=null&&varType==typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/427/pattern-ver1-serial/softwaresystems.src.ss.week5.Board.java-isFull.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:20:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType==typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/427/pattern-ver1-serial/softwaresystems.src.ss.week5.Board.java-isFull.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:20:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
-Preconditions.checkState(parent.getType()==Token.FUNCTION);
+Preconditions.checkState(parent.getType()==Token.FUNCTION,2);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2170/pattern-ver1-serial/tool.jtag.src.main.java.nl.lxtreme.ols.tool.jtag.JTAGDataSet.java-reportJTAGTdiData.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:20:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(!(allowDupe||var.getParentNode().getType()!=Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V26/4543/pattern-ver1-serial/launcher.src.main.java.com.benny.openlauncher.widget.GridAppDrawer.java-readyForDrag.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:20:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
-if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+if(n.getType()!=Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V26/4543/pattern-ver1-serial/launcher.src.main.java.com.benny.openlauncher.widget.GridAppDrawer.java-readyForDrag.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:20:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
-if(parent.getType()==Token.VAR){
+if(parent.getType()!=Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V26/4543/pattern-ver1-serial/launcher.src.main.java.com.benny.openlauncher.widget.GridAppDrawer.java-readyForDrag.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:20:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
-Preconditions.checkState(parent.getType()==Token.FUNCTION);
+Preconditions.checkState(parent.getType()!=Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V26/4543/pattern-ver1-serial/launcher.src.main.java.com.benny.openlauncher.widget.GridAppDrawer.java-readyForDrag.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:20:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!n.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/2225/pattern-ver1-serial/src.main.java.com.openshift.internal.client.ApplicationResource.java-getGearGroup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:20:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!parent.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/2225/pattern-ver1-serial/src.main.java.com.openshift.internal.client.ApplicationResource.java-getGearGroup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:20:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!var.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/2225/pattern-ver1-serial/src.main.java.com.openshift.internal.client.ApplicationResource.java-getGearGroup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:20:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!sourceName.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/2225/pattern-ver1-serial/src.main.java.com.openshift.internal.client.ApplicationResource.java-getGearGroup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:20:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!variableName.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/2225/pattern-ver1-serial/src.main.java.com.openshift.internal.client.ApplicationResource.java-getGearGroup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:21:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!varType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/2225/pattern-ver1-serial/src.main.java.com.openshift.internal.client.ApplicationResource.java-getGearGroup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:21:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.toString(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/7441/pattern-ver1-serial/HelloWorld.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:21:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.toString()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/1640/pattern-ver1-serial/spring-social-vkontakte.src.main.java.org.springframework.social.vkontakte.api.impl.WallTemplate.java-getPost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:21:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(sourceName!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:21:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(variableName!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:21:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&sourceName!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:21:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&variableName!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:21:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(n!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:21:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(parent!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:21:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(var!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:21:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&n!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:21:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&parent!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:22:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&var!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:22:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
-allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
+allowDupe=info!=null&&info.getSuppressions().equals("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/3866/pattern-ver1-serial/Common.src.common.Mathematics.PostfixConverter.java-convertToPostfix.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:22:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
-boolean allowDupe=false;
+Boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/934/pattern-ver1-serial/mifosng-provider.src.main.java.org.mifosplatform.accounting.journalentry.serialization.JournalEntryCommandFromApiJsonDeserializer.java-commandFromApiJson.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:22:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
+n.setJSType(varType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7257/pattern-ver1-serial/src.gamemodel.SpecialWall.java-handleProjectileArrive.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:22:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
+n.setJSType(varType);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7257/pattern-ver1-serial/src.gamemodel.SpecialWall.java-handleProjectileArrive.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:22:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
+parent.setJSType(varType);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7257/pattern-ver1-serial/src.gamemodel.SpecialWall.java-handleProjectileArrive.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:22:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
+info=parent.getJSDocInfo();
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7257/pattern-ver1-serial/src.gamemodel.SpecialWall.java-handleProjectileArrive.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:22:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
-boolean allowDupe=false;
+ boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
-JSType varType=var.getType();
+ JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:22:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
-boolean allowDupe=false;
+ boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
-JSDocInfo info=n.getJSDocInfo();
+ JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:22:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+this.compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:22:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
-allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
+allowDupe=info!=null&&info.getSuppressions().contains("duplicate".trim());
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:22:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(varType!=null&&varType!=getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/6912/pattern-ver1-serial/PhoneArtShop.src.dbModel.ProductclasscolorlineDAO.java-findByExample.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:22:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(sourceName.isEmpty()){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:23:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(variableName.isEmpty()){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:23:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(sourceName.isEmpty()){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:23:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(variableName.isEmpty()){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:23:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(sourceName.isEmpty()){
+return ;
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:23:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(variableName.isEmpty()){
+return ;
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:23:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
-if(shouldReport){
+if(!shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:23:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
-n.getFirstChild().setJSType(varType);
+n.setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/6695/pattern-ver1-serial/src.main.java.i2p.bote.service.EmailChecker.java-checkForMail.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:23:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(!(allowDupe&&var.getParentNode().getType()==Token.EXPR_RESULT)&&!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:23:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
-if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+if(n.getType()==Token.GETPROP&&NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)&&!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:23:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
-if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+if(n.getType()==Token.GETPROP&&NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(!(allowDupe&&var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:23:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
+synchronized(this){
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
+}
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:23:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+synchronized(compiler){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:24:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
+synchronized(n){
 n.setJSType(varType);
+}
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:24:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
+synchronized(parent){
 parent.setJSType(varType);
+}
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/5664/pattern-ver1-serial/src.tr.broadcast.BroadcastManager.java-onClaimTokenReceive.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:24:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
-info=parent.getJSDocInfo();
+info=null;
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:24:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
-allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
+allowDupe=info!=null&&info.getSuppressions().contains(("duplicate").toLowerCase());
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:24:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!varType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,varType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/208/pattern-ver1-serial/src.main.java.eu.musesproject.server.dataminer.DataMiner.java-dataClassification.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:24:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!n.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,n.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/208/pattern-ver1-serial/src.main.java.eu.musesproject.server.dataminer.DataMiner.java-dataClassification.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:24:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!parent.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,parent.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/208/pattern-ver1-serial/src.main.java.eu.musesproject.server.dataminer.DataMiner.java-dataClassification.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:24:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!var.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,var.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/208/pattern-ver1-serial/src.main.java.eu.musesproject.server.dataminer.DataMiner.java-dataClassification.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:24:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
-Preconditions.checkState(parent.getType()==Token.FUNCTION);
+Preconditions.checkState(parent.getType()==Token.FUNCTION,null,null);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/2082/pattern-ver1-serial/interview_questions.trees_and_graphs.ValidateBST.java-checkBST.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:24:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
+synchronized(this){
 n.setJSType(varType);
+}
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:24:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
+synchronized(this){
 parent.setJSType(varType);
+}
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:24:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(equals(newType)){
+return ;
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:24:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(equals(newType)){
+return ;
+}
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:25:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(equals(var)){
+return ;
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:25:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
+if(equals(newType)){
+return ;
+}
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:25:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(equals(var)){
+return ;
+}
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:25:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
+if(equals(var)){
+return ;
+}
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:25:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
-if(n.getFirstChild()!=null){
+if(sourceName!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1150/pattern-ver1-serial/src.main.java.de.nedelosk.modularmachines.client.gui.GuiAssembler.java-onUpdate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:25:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
-if(n.getFirstChild()!=null){
+if(n!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1150/pattern-ver1-serial/src.main.java.de.nedelosk.modularmachines.client.gui.GuiAssembler.java-onUpdate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:25:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
-if(n.getFirstChild()!=null){
+if(parent!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1150/pattern-ver1-serial/src.main.java.de.nedelosk.modularmachines.client.gui.GuiAssembler.java-onUpdate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:25:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
-if(n.getFirstChild()!=null){
+if(var!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1150/pattern-ver1-serial/src.main.java.de.nedelosk.modularmachines.client.gui.GuiAssembler.java-onUpdate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:25:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
-if(n.getFirstChild()!=null){
+if(variableName!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1150/pattern-ver1-serial/src.main.java.de.nedelosk.modularmachines.client.gui.GuiAssembler.java-onUpdate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:25:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
-if(n.getFirstChild()!=null){
+if(newType!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1150/pattern-ver1-serial/src.main.java.de.nedelosk.modularmachines.client.gui.GuiAssembler.java-onUpdate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:25:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+while(true){
+
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:27:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+while(true){
+
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:29:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
+while(true){
+
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:31:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
+}
+while(true){
+
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:31:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
 }
+while(true){
+
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:33:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
+while(true){
+
+}
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:34:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
+while(true){
+
+}
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:34:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
+}
+while(true){
+
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:34:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
 }
 }
+while(true){
+
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:36:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
+while(true){
+
+}
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:36:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
-info=parent.getJSDocInfo();
+info=info;
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1577/pattern-ver1-serial/src.main.java.models.RenameFiles.java-replaceWeirdChar.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:36:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.format("%04d",var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/350/pattern-ver1-serial/src.main.java.jp.co.tabocom.teratermstation.model.TargetNode.java-sortChildren.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:36:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
+synchronized(this){
 if(info==null){
 info=parent.getJSDocInfo();
+}
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:36:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
+if(sourceName.isEmpty()){
+return ;
+}
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/6812/pattern-ver1-serial/src.main.java.wslf.homemoviebase.logic.Worker.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:36:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
+if(variableName.isEmpty()){
+return ;
+}
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/6812/pattern-ver1-serial/src.main.java.wslf.homemoviebase.logic.Worker.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:36:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
+if(sourceName.isEmpty()){
+return ;
+}
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/6812/pattern-ver1-serial/src.main.java.wslf.homemoviebase.logic.Worker.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:36:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
+if(variableName.isEmpty()){
+return ;
+}
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/6812/pattern-ver1-serial/src.main.java.wslf.homemoviebase.logic.Worker.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:36:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
-allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
+allowDupe=info!=null&&info.getSuppressions().contains(("duplicate").toUpperCase());
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:36:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(sourceName==null){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:36:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(variableName==null){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:37:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(n==null){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:37:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(var==null){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:37:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(newType==null){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:37:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+if(sourceName==null){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:37:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+if(variableName==null){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:37:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(varType==null){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:37:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+if(n==null){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:37:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+if(var==null){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:37:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(n==null){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:37:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(var==null){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:37:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(n==null){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:37:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(var==null){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:38:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(n==null){
+return ;
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:38:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(var==null){
+return ;
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:38:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
+if(n==null){
+return ;
+}
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:38:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
+if(parent==null){
+return ;
+}
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:38:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+if(n==null){
+return ;
+}
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:38:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+if(parent==null){
+return ;
+}
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:38:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
+if(info==null){
+return ;
+}
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:38:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
+if(varType==null){
+return ;
+}
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:38:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
-Preconditions.checkState(parent.getType()==Token.FUNCTION);
+Preconditions.checkState(parent.getType()==Token.FUNCTION,Charset.forName("UTF-8"));
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:38:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(compiler!=null){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:39:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
+if(n!=null){
 n.setJSType(varType);
+}
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:39:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString())!=null){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:39:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
+if(varType!=null){
 n.setJSType(varType);
+}
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:39:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(newType==null){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:39:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(varType==null){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:39:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(newType==null){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:39:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(varType==null){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:39:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(newType==null){
+return ;
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:39:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(varType==null){
+return ;
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:39:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
+if(allowDupe==false){
+return ;
+}
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:39:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
+}
+if(allowDupe==false){
+return ;
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:39:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
+if(varType==var.getType()){
+return ;
+}
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:39:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(sourceName==null){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:40:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(variableName==null){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:40:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
-if(info==null){
+if(info.equals(null)){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:40:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
-if(var.input==null){
+if(var.input.equals(null)){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:40:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
+if(parent!=null){
 parent.setJSType(varType);
+}
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/5324/pattern-ver1-serial/src.main.java.de.cismet.cids.custom.objecteditors.wrrl_db_mv.HydrologRouteEditor.java-sldZoomStateChanged.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:40:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
+}
+if(info==null){
+return ;
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/4291/pattern-ver1-serial/src.ar.edu.it.itba.pdc.Implementations.proxy.client.ProxyClientSelectorProtocol.java-handleWrite.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:40:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if("index".equals(sourceName)){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:40:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if("index".equals(variableName)){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:40:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if("index".equals(n)){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:40:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if("index".equals(var)){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:40:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if("index".equals(sourceName)){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:40:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if("index".equals(variableName)){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:40:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if("index".equals(newType)){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:41:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if("index".equals(sourceName)){
+return ;
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:41:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if("index".equals(variableName)){
+return ;
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:41:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if("index".equals(n)){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:41:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(sourceName.equals("TIME")){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:41:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(variableName.equals("TIME")){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:41:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(n.equals("TIME")){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:41:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(var.equals("TIME")){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:41:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(sourceName.equals("TIME")){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:41:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(variableName.equals("TIME")){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:41:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(newType.equals("TIME")){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:41:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(sourceName.equals("TIME")){
+return ;
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:41:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(variableName.equals("TIME")){
+return ;
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:41:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(n.equals("TIME")){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:42:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if("&null".equals(sourceName)){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:42:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if("&null".equals(variableName)){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:42:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if("&null".equals(n)){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:42:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if("&null".equals(var)){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:42:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if("&null".equals(newType)){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:42:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+if("&null".equals(sourceName)){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:42:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+if("&null".equals(variableName)){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:42:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
+if("&null".equals(sourceName)){
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:42:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
+if("&null".equals(variableName)){
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:42:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+if("&null".equals(n)){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:42:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(sourceName.equals("DATETIME")){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:42:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(variableName.equals("DATETIME")){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:42:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(n.equals("DATETIME")){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:43:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(var.equals("DATETIME")){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:43:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+if(sourceName.equals("DATETIME")){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:43:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+if(variableName.equals("DATETIME")){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:43:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(newType.equals("DATETIME")){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:43:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
+if(sourceName.equals("DATETIME")){
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:43:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
+if(variableName.equals("DATETIME")){
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:43:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+if(n.equals("DATETIME")){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:43:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(var.nameNode==null){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2437/pattern-ver1-serial/app.src.main.java.org.gdg.frisbee.android.onboarding.FirstStartStep1Fragment.java-addChapters.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:43:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(compiler==null){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2437/pattern-ver1-serial/app.src.main.java.org.gdg.frisbee.android.onboarding.FirstStartStep1Fragment.java-addChapters.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:43:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+newType=newType;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:43:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+varType=newType;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:43:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
+if(parent!=null){
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
+}
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4155/pattern-ver1-serial/Calendar.src.edu.wpi.cs.wpisuitetng.modules.calendar.view.AddEventPanel.java-populateEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:44:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
+if(varType.equals("")){
+return ;
+}
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:44:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
+if(info.equals("")){
+return ;
+}
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:44:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
-if(var.input==null){
+if(true){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:44:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
-if(info==null){
+if(true){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:44:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
-if(shouldReport){
+if(shouldReport&&allowDupe){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2749/pattern-ver1-serial/Stuyablo.java-combat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:44:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf("https://myschool.ru.is/myschool/"+var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:44:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+if(n!=null){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
+}
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/5761/pattern-ver1-serial/src.main.java.jp.sf.amateras.mirage.type.enumerate.EnumOneBasedOrdinalValueType.java-isSupport.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:44:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
+if(varType!=null){
 parent.setJSType(varType);
+}
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/7255/pattern-ver1-serial/parser.src.main.java.me.vertretungsplan.objects.Substitution.java-setTeacher.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:44:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
+if(info.equals("-1")){
+return ;
+}
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:44:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
+if(varType.equals("-1")){
+return ;
+}
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:44:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(sourceName.contains("deviantart.com")){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4166/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.ContentType.java-getImageType.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:44:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(variableName.contains("deviantart.com")){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4166/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.ContentType.java-getImageType.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:45:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+if(sourceName.contains("deviantart.com")){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4166/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.ContentType.java-getImageType.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:45:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+if(variableName.contains("deviantart.com")){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4166/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.ContentType.java-getImageType.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:45:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
+if(sourceName.contains("deviantart.com")){
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4166/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.ContentType.java-getImageType.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:45:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
+if(variableName.contains("deviantart.com")){
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4166/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.ContentType.java-getImageType.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:45:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()+" votes"),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2342/pattern-ver1-serial/app.src.main.java.com.example.abhishek.bookshareapp.ui.adapter.BooksAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:45:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()-1),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/4594/pattern-ver1-serial/EzSignin.app.src.main.java.signin.ez.ezsignin.MainActivity.java-populateFieldsWithRecord.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:45:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+int a=0;
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:45:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+int a=0;
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:45:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
+int a=0;
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:45:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+int a=0;
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:45:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+int a=0;
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:45:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
+int a=0;
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:45:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
+int a=0;
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:45:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
+int a=0;
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:46:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
+int a=0;
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:46:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+int a=0;
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:46:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf("There was a problem with the call to ManyWho: "+var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1227/pattern-ver1-serial/sdk-core.src.main.java.com.manywho.sdk.RunService.java-executePost.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:46:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
+if(n!=null){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
+}
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5018/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.placement.StoragePortsAllocator.java-getSwitchName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:46:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(n.equals(var)){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:46:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(var.equals(n)){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:46:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(n.equals(sourceName)){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:46:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(n.equals(variableName)){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:46:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(var.equals(sourceName)){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:46:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(var.equals(variableName)){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:46:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(sourceName.equals(n)){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:46:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(sourceName.equals(var)){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:46:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(variableName.equals(n)){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:47:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(variableName.equals(var)){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:47:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+String OUTSTRING="";
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:47:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+String OUTSTRING="";
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:47:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+String OUTSTRING="";
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:47:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
+String OUTSTRING="";
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:47:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+String OUTSTRING="";
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:47:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+String OUTSTRING="";
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:47:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
+String OUTSTRING="";
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:47:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
+String OUTSTRING="";
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:47:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
+String OUTSTRING="";
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:47:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
+String OUTSTRING="";
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:47:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()*1000),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/3175/pattern-ver1-serial/src.de.fuberlin.wiwiss.d2rq.server.D2RServer.java-describe.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:48:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
-if(shouldReport){
+if(allowDupe&&(shouldReport)){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/270/pattern-ver1-serial/modules.lang-painless.src.main.java.org.elasticsearch.painless.AnalyzerExternal.java-processExtvar.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:48:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
-if(var.input==null){
+if(allowDupe&&(var.input==null)){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/270/pattern-ver1-serial/modules.lang-painless.src.main.java.org.elasticsearch.painless.AnalyzerExternal.java-processExtvar.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(var==null){
+return ;
+}
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:48:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
+if(var==null){
+return ;
+}
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:48:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
-allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
+allowDupe=info!=null&&info.getSuppressions().contains(Strings.nullToEmpty("duplicate"));
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:48:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+int compiler=5;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:48:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+int JSError=5;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:48:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+int DUP_VAR_DECLARATION=5;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:48:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+int String=5;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:48:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
-if(shouldReport){
+if(shouldReport||allowDupe){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3215/pattern-ver1-serial/src.Output.java-writeAutoC.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:48:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
-if(var.input==null){
+if(var.input==null||allowDupe){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3215/pattern-ver1-serial/src.Output.java-writeAutoC.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:48:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(newType.equals(InputStream.class)){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:48:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(parent.equals(InputStream.class)){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:49:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(var.equals(InputStream.class)){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:49:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(newType.equals(InputStream.class)){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:49:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
+if(newType.equals(InputStream.class)){
+return ;
+}
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:49:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(newType.equals(InputStream.class)){
+return ;
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:49:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+if(newType.equals(InputStream.class)){
+return ;
+}
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:49:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(parent.equals(InputStream.class)){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:49:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(var.equals(InputStream.class)){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:49:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
+if(parent.equals(InputStream.class)){
+return ;
+}
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:49:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(sourceName.startsWith("-")){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:49:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(variableName.startsWith("-")){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:49:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(sourceName.startsWith("-")){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:49:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(variableName.startsWith("-")){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:49:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(sourceName.startsWith("-")){
+return ;
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:50:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(sourceName.startsWith("extern ")){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/100/pattern-ver1-serial/plugins.org.nitlanguage.ndt.src.org.nitlanguage.ndt.ui.docmodel.Declaration.java-removeModificatorKeyword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:50:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(variableName.startsWith("extern ")){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/100/pattern-ver1-serial/plugins.org.nitlanguage.ndt.src.org.nitlanguage.ndt.ui.docmodel.Declaration.java-removeModificatorKeyword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:50:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(sourceName.startsWith("extern ")){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/100/pattern-ver1-serial/plugins.org.nitlanguage.ndt.src.org.nitlanguage.ndt.ui.docmodel.Declaration.java-removeModificatorKeyword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:50:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(variableName.startsWith("extern ")){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/100/pattern-ver1-serial/plugins.org.nitlanguage.ndt.src.org.nitlanguage.ndt.ui.docmodel.Declaration.java-removeModificatorKeyword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:50:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(sourceName.startsWith("extern ")){
+return ;
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/100/pattern-ver1-serial/plugins.org.nitlanguage.ndt.src.org.nitlanguage.ndt.ui.docmodel.Declaration.java-removeModificatorKeyword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:50:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(variableName.startsWith("extern ")){
+return ;
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/100/pattern-ver1-serial/plugins.org.nitlanguage.ndt.src.org.nitlanguage.ndt.ui.docmodel.Declaration.java-removeModificatorKeyword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:50:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:50:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:50:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:50:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:50:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:50:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:51:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:51:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:51:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:51:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:51:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
+if(n.getFirstChild()!=null){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
+}
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/759/pattern-ver1-serial/src.com.herasymc.cmput301counter.CounterList.java-reset.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:51:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
+if(info==null){
 if(info==null){
 info=parent.getJSDocInfo();
+}
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/6222/pattern-ver1-serial/catroid.src.org.catrobat.catroid.io.PcConnectionManager.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:51:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+int indexSelection=0;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:51:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
+int indexSelection=0;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:51:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
+int indexSelection=0;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:51:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
+int indexSelection=0;
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:51:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
+int indexSelection=0;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:51:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
+int indexSelection=0;
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:52:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
+int indexSelection=0;
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:52:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
+int indexSelection=0;
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:52:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
+int indexSelection=0;
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:52:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
+int indexSelection=0;
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:52:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(var.getName().isEmpty()){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7204/pattern-ver1-serial/src.main.java.sg.edu.nus.cs2103t.omnitask.logic.DataImpl.java-addTask.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:52:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(sourceName.equals("setPackMode")){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:52:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf("PATH: \n"+var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/1966/pattern-ver1-serial/obdEnergy.src.main.java.com.example.obdenergy.obdenergy.MainActivity.java-onStop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:52:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(sourceName.startsWith("https")){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6342/pattern-ver1-serial/src.main.java.org.spo.fw.web.Lib_Utils.java-alterGotoUrl.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:52:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(variableName.startsWith("https")){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6342/pattern-ver1-serial/src.main.java.org.spo.fw.web.Lib_Utils.java-alterGotoUrl.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:52:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(sourceName.startsWith("https")){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6342/pattern-ver1-serial/src.main.java.org.spo.fw.web.Lib_Utils.java-alterGotoUrl.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:52:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(variableName.startsWith("https")){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6342/pattern-ver1-serial/src.main.java.org.spo.fw.web.Lib_Utils.java-alterGotoUrl.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:52:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(sourceName.startsWith("https")){
+return ;
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6342/pattern-ver1-serial/src.main.java.org.spo.fw.web.Lib_Utils.java-alterGotoUrl.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:52:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(variableName.startsWith("https")){
+return ;
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6342/pattern-ver1-serial/src.main.java.org.spo.fw.web.Lib_Utils.java-alterGotoUrl.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:53:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(String.valueOf(var.nameNode.getLineno())),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/4379/pattern-ver1-serial/src.main.java.st.alr.mqttitude.preferences.PreferencesBroker.java-onBindDialogView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:53:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+int a=1;
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:53:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+int a=1;
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:53:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
+int a=1;
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:53:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
+int a=1;
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:53:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
+int a=1;
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:53:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+int a=1;
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:53:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
+int a=1;
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:53:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+int a=1;
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:53:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
+int a=1;
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:53:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+int a=1;
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:53:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()+"/logout"),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/2012/pattern-ver1-serial/HTTPBank.src.ibm.controller.UserInfoChanger.java-doGet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:54:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf("\nDealer has: \n"+var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4064/pattern-ver1-serial/src.run.java-dealerScore.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:54:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(sourceName.equalsIgnoreCase("/")){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/3102/pattern-ver1-serial/src.main.java.com.github.kongchen.swagger.docgen.reader.AbstractReader.java-parseOperationPath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:54:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(variableName.equalsIgnoreCase("/")){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/3102/pattern-ver1-serial/src.main.java.com.github.kongchen.swagger.docgen.reader.AbstractReader.java-parseOperationPath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:54:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(sourceName.equalsIgnoreCase("/")){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/3102/pattern-ver1-serial/src.main.java.com.github.kongchen.swagger.docgen.reader.AbstractReader.java-parseOperationPath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:54:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(variableName.equalsIgnoreCase("/")){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/3102/pattern-ver1-serial/src.main.java.com.github.kongchen.swagger.docgen.reader.AbstractReader.java-parseOperationPath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:54:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(sourceName.equalsIgnoreCase("/")){
+return ;
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/3102/pattern-ver1-serial/src.main.java.com.github.kongchen.swagger.docgen.reader.AbstractReader.java-parseOperationPath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:54:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(variableName.equalsIgnoreCase("/")){
+return ;
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/3102/pattern-ver1-serial/src.main.java.com.github.kongchen.swagger.docgen.reader.AbstractReader.java-parseOperationPath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:54:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+String String="%#.&f";
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:54:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+boolean DUP_VAR_DECLARATION=true;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:54:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+boolean String=true;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:54:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+boolean JSError=true;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:54:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+boolean compiler=true;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:54:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+boolean b=true;
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:55:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+boolean b=true;
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:55:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+boolean b=true;
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:55:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
+boolean b=true;
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:55:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+boolean b=true;
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:55:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
+boolean b=true;
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:55:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
+boolean b=true;
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:55:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
+boolean b=true;
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:55:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
+boolean b=true;
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:55:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+boolean b=true;
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:55:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(sourceName.equalsIgnoreCase("")){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/3403/pattern-ver1-serial/src.Primitives.Stemmer.java-step4.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:55:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(variableName.equalsIgnoreCase("")){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/3403/pattern-ver1-serial/src.Primitives.Stemmer.java-step4.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:55:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(sourceName.equalsIgnoreCase("")){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/3403/pattern-ver1-serial/src.Primitives.Stemmer.java-step4.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:55:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(variableName.equalsIgnoreCase("")){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/3403/pattern-ver1-serial/src.Primitives.Stemmer.java-step4.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:56:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(sourceName.equalsIgnoreCase("")){
+return ;
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/3403/pattern-ver1-serial/src.Primitives.Stemmer.java-step4.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:56:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(sourceName.matches("[0-9]*")){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:56:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(variableName.matches("[0-9]*")){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:56:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(sourceName.matches("[0-9]*")){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:56:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(variableName.matches("[0-9]*")){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:56:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(sourceName.matches("[0-9]*")){
+return ;
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:56:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(variableName.matches("[0-9]*")){
+return ;
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:56:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!(newType.equals(varType))){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/5197/pattern-ver1-serial/src.main.java.com.example.pc.olx.User.UserManager.java-isLogin.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:56:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
-if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+if(n.getType()==Token.GETPROP-1||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/2784/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.server.rest.v1.TopicV1Factory.java-syncDBEntityWithRESTEntitySecondPass.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:56:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT-1)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/2784/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.server.rest.v1.TopicV1Factory.java-syncDBEntityWithRESTEntitySecondPass.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:56:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
-if(parent.getType()==Token.VAR){
+if(parent.getType()==Token.VAR-1){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/2784/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.server.rest.v1.TopicV1Factory.java-syncDBEntityWithRESTEntitySecondPass.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:56:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if((Thread.currentThread().interrupted())){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:56:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+if((Thread.currentThread().interrupted())){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:57:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
+if((Thread.currentThread().interrupted())){
+return ;
+}
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:57:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
+if((Thread.currentThread().interrupted())){
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:57:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
+if((Thread.currentThread().interrupted())){
+return ;
+}
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:57:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
+}
+if((Thread.currentThread().interrupted())){
+return ;
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:57:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
 }
+if((Thread.currentThread().interrupted())){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:57:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
+if((Thread.currentThread().interrupted())){
+return ;
+}
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:57:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
+if((Thread.currentThread().interrupted())){
+return ;
+}
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:57:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
+if((Thread.currentThread().interrupted())){
+return ;
+}
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:57:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
-if(n.getFirstChild()!=null){
+if(n.getFirstChild().equals(null)){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:57:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
+synchronized(this){
 n.getFirstChild().setJSType(varType);
+}
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:57:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
+synchronized(this){
 info=parent.getJSDocInfo();
+}
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:57:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
-n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
+n.setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:57:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
+parent.setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:58:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
-n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
+n.setJSType(varType);
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:58:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
-parent.setJSType(varType);
 }
+parent.setJSType(varType);
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:58:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
-n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
+n.setJSType(varType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:58:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
+parent.setJSType(varType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:58:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
-parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
+parent.setJSType(varType);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:58:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
+n.setJSType(varType);
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
-n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onOutput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:58:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
+parent.setJSType(varType);
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onOutput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:58:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+n.setJSType(varType);
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:58:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+parent.setJSType(varType);
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:58:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
-if(n.getFirstChild()!=null){
+if(true){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:58:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
-if(parent.getType()==Token.VAR){
+if(true){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:58:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(!JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()).equals("")){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:58:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
+if(!varType.equals("")){
 n.setJSType(varType);
+}
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:59:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
-n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
+n.setJSType(varType);
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:59:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
-n.setJSType(varType);
 if(parent.getType()==Token.VAR){
+n.setJSType(varType);
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:59:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
-n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
+n.setJSType(varType);
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:59:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
-if(n.getFirstChild()!=null){
+if(n.getFirstChild()!=null==false){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:59:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
-if(parent.getType()==Token.VAR){
+if(parent.getType()==Token.VAR==false){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:59:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
+parent.setJSType(varType);
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
-parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5250/pattern-ver1-serial/exportLibraries.vplex.src.main.java.com.emc.storageos.vplex.api.VPlexApiVirtualVolumeManager.java-updateVirtualVolumeInfoAfterExpansion.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:59:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
-if(var.input==null){
 n.setJSType(varType);
+if(var.input==null){
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5250/pattern-ver1-serial/exportLibraries.vplex.src.main.java.com.emc.storageos.vplex.api.VPlexApiVirtualVolumeManager.java-updateVirtualVolumeInfoAfterExpansion.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:59:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+parent.setJSType(varType);
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5250/pattern-ver1-serial/exportLibraries.vplex.src.main.java.com.emc.storageos.vplex.api.VPlexApiVirtualVolumeManager.java-updateVirtualVolumeInfoAfterExpansion.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:59:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+parent.setJSType(varType);
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
-parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5250/pattern-ver1-serial/exportLibraries.vplex.src.main.java.com.emc.storageos.vplex.api.VPlexApiVirtualVolumeManager.java-updateVirtualVolumeInfoAfterExpansion.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:59:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
-if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+if(n.getType()==Token.GETPROP||!NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6688/pattern-ver1-serial/src.MineralOre.java-update.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:59:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6688/pattern-ver1-serial/src.MineralOre.java-update.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 12:59:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
-if(parent.getType()==Token.VAR){
+if(parent.getType()==Token.VAR||parent.getType()==Long.MIN_VALUE){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:00:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
-Preconditions.checkState(parent.getType()==Token.FUNCTION);
+Preconditions.checkState(parent.getType()==Token.FUNCTION-1);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/4594/pattern-ver1-serial/EzSignin.app.src.main.java.signin.ez.ezsignin.MainActivity.java-populateFieldsWithRecord.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:00:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
+parent.setJSType(varType);
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3904/pattern-ver1-serial/src.heartbeat.TachySyringe.java-Use.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:00:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()*-1),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1084/pattern-ver1-serial/Bank.src.entities.Account.java-returnLoan.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:00:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
-Preconditions.checkState(parent.getType()==Token.FUNCTION);
+Preconditions.checkState(parent.getType()==Token.FUNCTION*-1);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1084/pattern-ver1-serial/Bank.src.entities.Account.java-returnLoan.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:00:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.text.ParseException;
+
+import java.math.BigDecimal;
+
+import java.text.NumberFormat;
+
+import java.math.RoundingMode;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(new BigDecimal(var.nameNode.getLineno()).setScale(2,RoundingMode.HALF_UP)),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/120/pattern-ver1-serial/src.main.java.sk.janobono.habox.sql.util.ItemsHelper.java-getItems.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:00:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
+n.setJSType(varType);
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:00:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
-n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
+n.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/3854/pattern-ver1-serial/NewIntro4.java-act.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:00:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
+parent.setJSType(varType);
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/1924/pattern-ver1-serial/src.gui.map.MapDrawerPanel.java-restoreSession.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:00:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
-Preconditions.checkState(parent.getType()==Token.FUNCTION);
+Preconditions.checkState(parent.getType()==Token.FUNCTION*1000);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/3175/pattern-ver1-serial/src.de.fuberlin.wiwiss.d2rq.server.D2RServer.java-describe.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:00:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
-n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
+n.setJSType(varType);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/3266/pattern-ver1-serial/src.lejosserver.TouchSensor.java-TouchSensor.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:00:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+assert (sourceName!=null);
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:00:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+assert (variableName!=null);
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:00:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+assert (n!=null);
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:01:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+assert (sourceName!=null);
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:01:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+assert (variableName!=null);
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:01:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+assert (sourceName!=null);
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:01:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+assert (variableName!=null);
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:01:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+assert (n!=null);
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:01:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+assert (n!=null);
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:01:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
+assert (n!=null);
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:01:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+assert (!sourceName.isEmpty());
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:01:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+assert (!variableName.isEmpty());
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:01:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
+assert (!sourceName.isEmpty());
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:01:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
+assert (!variableName.isEmpty());
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:01:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
+assert (!sourceName.isEmpty());
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:02:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
+assert (!variableName.isEmpty());
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:02:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
+try{
 n.setJSType(varType);
+}finally{
+parent.setJSType(varType);
+}
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:02:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
-if(parent.getType()==Token.VAR){
+if(Double.isNaN(parent.getType())){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:02:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
-if(parent.getType()==Token.VAR){
+if(parent.getType()==Token.VAR==true){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:02:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
-if(n.getFirstChild()!=null){
+if(n.getFirstChild()!=null==true){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:02:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(var!=null){
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:02:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(n!=null){
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:02:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(sourceName!=null){
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:02:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(var!=null){
+if(shouldReport){
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:02:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(var!=null){
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(shouldReport){
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+}
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:02:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(var!=null){
+if(var.input==null){
+n.setJSType(varType);
+if(parent.getType()==Token.VAR){
+if(n.getFirstChild()!=null){
+n.getFirstChild().setJSType(varType);
+}
+}else {
+Preconditions.checkState(parent.getType()==Token.FUNCTION);
+parent.setJSType(varType);
+}
+}else {
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(shouldReport){
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+}
+}
+}
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:02:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
+if(var!=null){
+boolean allowDupe=false;
+if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+JSDocInfo info=n.getJSDocInfo();
+if(info==null){
+info=parent.getJSDocInfo();
+}
+allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
+}
+JSType varType=var.getType();
+if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(var.input==null){
+n.setJSType(varType);
+if(parent.getType()==Token.VAR){
+if(n.getFirstChild()!=null){
+n.getFirstChild().setJSType(varType);
+}
+}else {
+Preconditions.checkState(parent.getType()==Token.FUNCTION);
+parent.setJSType(varType);
+}
+}else {
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(shouldReport){
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+}
+}
+}
+}
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:02:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(n!=null){
+if(shouldReport){
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:03:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
+n.setJSType(varType);
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2108/pattern-ver1-serial/pac4j-oauth.src.main.java.org.pac4j.oauth.client.BaseOAuth10Client.java-addAccessTokenToProfile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:03:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
+parent.setJSType(varType);
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2108/pattern-ver1-serial/pac4j-oauth.src.main.java.org.pac4j.oauth.client.BaseOAuth10Client.java-addAccessTokenToProfile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:03:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
+assert (allowDupe!=false);
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:03:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
+assert (info!=n.getJSDocInfo());
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:03:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
+assert (varType!=var.getType());
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:03:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+assert (varType!=null);
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:03:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+assert (var!=null);
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:03:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+assert (newType!=null);
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:03:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+assert (varType!=null);
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:03:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
+assert (varType!=null);
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:03:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
+assert (varType!=null);
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:03:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(n.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:03:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(var.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:04:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(n.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:04:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(var.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:04:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(n.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:04:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(var.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:04:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
+if(n.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:04:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
+if(parent.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:04:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+if(n.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:04:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+if(parent.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:04:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
-if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+if("Chrome".equals(n.getType())||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/4219/pattern-ver1-serial/src.browsermator.com.STAppController.java-itemStateChanged.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:04:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+parent.setJSType(varType);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4888/pattern-ver1-serial/core.src.main.java.com.digitalpebble.storm.crawler.bolt.JSoupParserBolt.java-toOutlinks.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:04:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
+parent.setJSType(varType);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4888/pattern-ver1-serial/core.src.main.java.com.digitalpebble.storm.crawler.bolt.JSoupParserBolt.java-toOutlinks.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:04:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
+parent.setJSType(varType);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4888/pattern-ver1-serial/core.src.main.java.com.digitalpebble.storm.crawler.bolt.JSoupParserBolt.java-toOutlinks.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:05:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
+n.setJSType(varType);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4888/pattern-ver1-serial/core.src.main.java.com.digitalpebble.storm.crawler.bolt.JSoupParserBolt.java-toOutlinks.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:05:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+assert (var!=null);
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/126/pattern-ver1-serial/main.table.org.gamegineer.table.core.src.org.gamegineer.table.core.ComponentPath.java-compareTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:05:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(sourceName.isEmpty()){
+System.out.println("Team has to have a name");
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:05:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(sourceName.isEmpty()){
+System.out.println("Team has to have a name");
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:05:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(sourceName.isEmpty()){
+System.out.println("Team has to have a name");
+return ;
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:05:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+assert (n!=null);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:05:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+assert (var!=null);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:05:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
+assert (n!=null);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:05:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
+assert (n!=null);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:05:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
+assert (n!=null);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
+assert (parent!=null);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:05:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
+assert (var!=null);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:06:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
+assert (n!=null);
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:06:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
+assert (parent!=null);
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:06:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
+assert (var!=null);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:06:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
+n.setJSType(varType);
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3760/pattern-ver1-serial/src.AlienEntryApplication.java-main.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:06:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
+n.setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3760/pattern-ver1-serial/src.AlienEntryApplication.java-main.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:06:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
+if(varType.equals("655")){
+System.out.println();
+}
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:06:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
+}
+if(info.equals("655")){
+System.out.println();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:06:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
+if(info.equals("655")){
+System.out.println();
+}
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:06:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
+if(!allowDupe){
+throw new IllegalStateException("マージ対象のファイルが一つも見つかりませんでした。");
+}
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/4688/pattern-ver1-serial/src.org.teachothers.fishwatchr.CommentList.java-merge.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:06:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
-allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
+allowDupe=info!=null&&info.getSuppressions()!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/947/pattern-ver1-serial/com.ge.research.sadl.jena-wrapper-for-sadl.src.main.java.com.ge.research.sadl.jena.reasoner.JenaReasonerPlugin.java-prepareSubjectPredicateObject.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:06:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
-if(info==null){
+if(info==null||"查看红包".equals(info)){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:06:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
-if(var.input==null){
+if(var.input==null||"查看红包".equals(var.input)){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:07:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
-if(n.getFirstChild()!=null){
+if(n.getFirstChild()!=null||"查看红包".equals(n.getFirstChild())){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:07:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
-if(parent.getType()==Token.VAR){
+if(parent.getType()==Token.VAR||"查看红包".equals(parent.getType())){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:07:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
-if(parent.getType()==Token.VAR){
+if(parent.getType()==Token.VAR||parent.getType()==3){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:07:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
-if(n.getFirstChild()!=null){
+if(n!=null&&n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/1720/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.block.XIVMaskingOrchestrator.java-exportGroupAddVolumes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:07:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
-if(parent.getType()==Token.VAR){
+if(parent!=null&&parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V15/6389/pattern-ver1-serial/src.org.ohmage.conditionevaluator.comparator.SingleChoiceDataPointComparator.java-lessThan.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:07:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(sourceName.isEmpty()){
+sourceName=null;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:07:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(variableName.isEmpty()){
+variableName=null;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:07:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+if(sourceName.isEmpty()){
+sourceName=null;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:07:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+if(variableName.isEmpty()){
+variableName=null;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:07:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
+if(sourceName.isEmpty()){
+sourceName=null;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:07:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
+if(variableName.isEmpty()){
+variableName=null;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:07:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
-if(parent.getType()==Token.VAR){
+if(parent.getType()<0||parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:08:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
-info=parent.getJSDocInfo();
 }
+info=parent.getJSDocInfo();
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:08:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
-n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
+n.getFirstChild().setJSType(varType);
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:08:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
+n.getFirstChild().setJSType(varType);
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:08:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
-if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+if(n.getType()==Token.GETPROP||n.equals("manufacturedOn")||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V37/509/pattern-ver1-serial/product-validation-system-war.src.main.java.com.pvs.web.freemarker.processors.ProductTemplateRegistrationProcessor.java-postHTML.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:08:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
+info=parent.getJSDocInfo();
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
+info=parent.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:08:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+n.getFirstChild().setJSType(varType);
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:08:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
+n.getFirstChild().setJSType(varType);
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:08:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
+n.getFirstChild().setJSType(varType);
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:08:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
+n.getFirstChild().setJSType(varType);
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:08:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
+n.getFirstChild().setJSType(varType);
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
-n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5250/pattern-ver1-serial/exportLibraries.vplex.src.main.java.com.emc.storageos.vplex.api.VPlexApiVirtualVolumeManager.java-updateVirtualVolumeInfoAfterExpansion.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:08:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
+n.getFirstChild().setJSType(varType);
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5250/pattern-ver1-serial/exportLibraries.vplex.src.main.java.com.emc.storageos.vplex.api.VPlexApiVirtualVolumeManager.java-updateVirtualVolumeInfoAfterExpansion.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:09:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
+n.getFirstChild().setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:09:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
+JSDocInfo info=n.getJSDocInfo();
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
-JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:09:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
-allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
+allowDupe=info!=null&&info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/106/pattern-ver1-serial/src.main.java.net.pms.dlna.RootFolder.java-getiTunesFolder.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:09:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
-info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
+info=parent.getJSDocInfo();
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:09:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
-if(parent.getType()==Token.VAR){
+if(parent.getType()==Token.VAR||parent.getType()==0){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:09:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(n.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:09:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(var.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:09:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(sourceName.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:09:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(variableName.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:09:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(newType.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:09:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+if(n.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:09:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+if(var.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:09:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(varType.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:10:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+if(sourceName.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:10:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+if(variableName.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:10:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
-if(parent.getType()==Token.VAR){
+if(parent.getType()==Token.VAR||parent.getType()>9){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:10:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:10:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:10:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:10:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:10:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:10:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:10:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:10:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:10:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:11:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:11:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
-if(info==null){
 info=parent.getJSDocInfo();
+if(info==null){
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2335/pattern-ver1-serial/app.src.main.java.swampthings.dems.LoginActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:11:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
-if(parent.getType()==Token.VAR){
+if(parent.getType()==Token.VAR&&parent.getType()<4000000){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:11:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
-if(info==null){
+if(info==null||info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:11:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
-if(var.input==null){
+if(var.input==null||var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:11:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
-if(n.getFirstChild()!=null){
+if(n.getFirstChild()!=null||n.getFirstChild()==null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:11:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode==null?null:var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/4299/pattern-ver1-serial/client.synapseJavaClient.src.main.java.org.sagebionetworks.client.SynapseClientImpl.java-uploadToS3FileHandle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:11:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
-if(parent.getType()==Token.VAR){
+if(parent.getType()==Token.VAR&&parent.getType()!=9999){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:11:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
-if(parent.getType()==Token.VAR){
+if(Token.VAR>0&&parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:11:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode!=null?var.nameNode.getLineno():null),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/4302/pattern-ver1-serial/src.com.floreantpos.model.KitchenTicket.java-fromTicket.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:11:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:11:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:12:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:12:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:12:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:12:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:12:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:12:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:12:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:12:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:12:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
-if(n.getFirstChild()!=null){
+if(n==null||n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/1012/pattern-ver1-serial/common.buildcraft.robotics.StationIndex.java-equals.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:12:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
-if(parent.getType()==Token.VAR){
+if(parent==null||parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/1012/pattern-ver1-serial/common.buildcraft.robotics.StationIndex.java-equals.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:12:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
+try{
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
+}finally{
+info=parent.getJSDocInfo();
+}
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/2377/pattern-ver1-serial/common.src.main.java.slash.common.io.Files.java-writeToTempFile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:12:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+n.getFirstChild().setJSType(varType);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:12:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+assert (n!=null):"Appointments day is not allowed to be null!";
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:13:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+assert (var!=null):"Appointments day is not allowed to be null!";
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:13:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+assert (n!=null):"Appointments day is not allowed to be null!";
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:13:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+assert (var!=null):"Appointments day is not allowed to be null!";
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:13:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
+assert (n!=null):"Appointments day is not allowed to be null!";
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:13:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
+assert (parent!=null):"Appointments day is not allowed to be null!";
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:13:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+assert (n!=null):"Appointments day is not allowed to be null!";
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:13:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+assert (var!=null):"Appointments day is not allowed to be null!";
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:13:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+assert (n!=null):"Appointments day is not allowed to be null!";
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:13:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+assert (parent!=null):"Appointments day is not allowed to be null!";
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:13:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(sourceName.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:13:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(variableName.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:13:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
-if(parent.getType()==Token.VAR){
+if(parent.getType()==Token.VAR||parent.getType()=='"'){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1758/pattern-ver1-serial/modules.ImportPlugin.src.main.java.org.gephi.io.importer.plugin.file.ImporterDOT.java-edgeAttributes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:13:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(newType==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:14:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(var==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:14:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(varType==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:14:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(compiler==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:14:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(var.nameNode==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:14:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString())==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:14:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
+if(!allowDupe){
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
+}
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/918/pattern-ver1-serial/src.com.isrtk.nihtfti.MainService.java-onStartCommand.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 2, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:14:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(variableName==null){
+return ;
+}
+if(sourceName==null){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:14:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(n==null){
+return ;
+}
+if(sourceName==null){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:14:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(var==null){
+return ;
+}
+if(sourceName==null){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:14:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(newType==null){
+return ;
+}
+if(sourceName==null){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:14:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(variableName==null){
+return ;
+}
+if(sourceName==null){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:14:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(n==null){
+return ;
+}
+if(sourceName==null){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:15:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(var==null){
+return ;
+}
+if(sourceName==null){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:15:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(newType==null){
+return ;
+}
+if(sourceName==null){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:15:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(variableName==null){
+return ;
+}
+if(sourceName==null){
+return ;
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:15:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(n==null){
+return ;
+}
+if(sourceName==null){
+return ;
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:15:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(sourceName.equals("CALL_RECEIVED_AT")){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(sourceName.equals("NAME")){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:15:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(variableName.equals("CALL_RECEIVED_AT")){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(variableName.equals("NAME")){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:15:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(n.equals("CALL_RECEIVED_AT")){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(n.equals("NAME")){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:15:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(var.equals("CALL_RECEIVED_AT")){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(var.equals("NAME")){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:15:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(sourceName.equals("CALL_RECEIVED_AT")){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+if(sourceName.equals("NAME")){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:15:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(variableName.equals("CALL_RECEIVED_AT")){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+if(variableName.equals("NAME")){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:15:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(newType.equals("CALL_RECEIVED_AT")){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(newType.equals("NAME")){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:15:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(sourceName.equals("CALL_RECEIVED_AT")){
+return ;
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
+if(sourceName.equals("NAME")){
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:15:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(variableName.equals("CALL_RECEIVED_AT")){
+return ;
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
+if(variableName.equals("NAME")){
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:16:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(n.equals("CALL_RECEIVED_AT")){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+if(n.equals("NAME")){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:16:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
-if(var.input==null){
+if(var.input==null&&!var.input.equals("")){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:16:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
-if(info==null){
+if(info==null&&!info.equals("")){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:16:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
-if(n.getFirstChild()!=null){
+if(n.getFirstChild()!=null&&!n.getFirstChild().equals("")){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:16:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
+if(n!=null){
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5497/pattern-ver1-serial/app.src.main.java.hm.orz.chaos114.android.tumekyouen.TitleActivity.java-afterViews.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:16:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
+if(parent!=null){
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5497/pattern-ver1-serial/app.src.main.java.hm.orz.chaos114.android.tumekyouen.TitleActivity.java-afterViews.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:16:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(sourceName.equals("INFO")){
+return ;
+}
+if(sourceName.equals("UNIT")){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:16:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(variableName.equals("INFO")){
+return ;
+}
+if(variableName.equals("UNIT")){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:16:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(n.equals("INFO")){
+return ;
+}
+if(n.equals("UNIT")){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:16:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(var.equals("INFO")){
+return ;
+}
+if(var.equals("UNIT")){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:16:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+if(sourceName.equals("INFO")){
+return ;
+}
+if(sourceName.equals("UNIT")){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:16:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+if(variableName.equals("INFO")){
+return ;
+}
+if(variableName.equals("UNIT")){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:16:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(newType.equals("INFO")){
+return ;
+}
+if(newType.equals("UNIT")){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:17:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+}
+if(sourceName.equals("INFO")){
+return ;
 }
+if(sourceName.equals("UNIT")){
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:17:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+}
+if(variableName.equals("INFO")){
+return ;
 }
+if(variableName.equals("UNIT")){
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:17:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+if(n.equals("INFO")){
+return ;
+}
+if(n.equals("UNIT")){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:17:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
+Preconditions.checkState(parent.getType()==Token.FUNCTION);
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:17:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
+Preconditions.checkState(parent.getType()==Token.FUNCTION);
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:17:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
+if(info!=parent.getJSDocInfo()){
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
+}
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:17:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+Preconditions.checkState(parent.getType()==Token.FUNCTION);
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:17:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
+if(parent!=null){
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
+}
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/64/pattern-ver1-serial/app.src.main.java.com.example.scame.lighttube.presentation.fragments.ChannelVideosFragment.java-onSaveInstanceState.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:17:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
+Preconditions.checkState(parent.getType()==Token.FUNCTION);
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:17:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
+Preconditions.checkState(parent.getType()==Token.FUNCTION);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/4848/pattern-ver1-serial/marketplace-frontend.src.main.java.org.xine.marketplace.frontend.views.controller.requisitions.RequisitionSaverBean.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:17:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
+Preconditions.checkState(parent.getType()==Token.FUNCTION);
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/4848/pattern-ver1-serial/marketplace-frontend.src.main.java.org.xine.marketplace.frontend.views.controller.requisitions.RequisitionSaverBean.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:17:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
+Preconditions.checkState(parent.getType()==Token.FUNCTION);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/3854/pattern-ver1-serial/NewIntro4.java-act.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:18:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
+try{
 n.setJSType(varType);
+}finally{
+Preconditions.checkState(parent.getType()==Token.FUNCTION);
+}
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 1, INS : 0, DEL : 6
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:18:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
-Preconditions.checkState(parent.getType()==Token.FUNCTION);
+try{
 parent.setJSType(varType);
+}finally{
+Preconditions.checkState(parent.getType()==Token.FUNCTION);
+}
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 1, INS : 0, DEL : 6
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:18:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
+if(n.getFirstChild()!=null){
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5497/pattern-ver1-serial/app.src.main.java.hm.orz.chaos114.android.tumekyouen.TitleActivity.java-afterViews.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:18:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
+if(info==null){
+throw new IllegalStateException("User isn't registered! "+n);
+}
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:18:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
+if(varType==null){
+throw new IllegalStateException("User isn't registered! "+var);
+}
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:18:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
+synchronized(this){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
+}
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:18:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
-allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
+allowDupe=allowDupe;
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:18:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(sourceName.startsWith("\r\n")){
+sourceName=sourceName.substring(2);
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:18:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(variableName.startsWith("\r\n")){
+variableName=variableName.substring(2);
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:18:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(sourceName.startsWith("\r\n")){
+sourceName=sourceName.substring(2);
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:18:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(variableName.startsWith("\r\n")){
+variableName=variableName.substring(2);
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:18:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(sourceName.startsWith("\r\n")){
+sourceName=sourceName.substring(2);
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:19:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(variableName.startsWith("\r\n")){
+variableName=variableName.substring(2);
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:19:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(sourceName.startsWith("/")){
+sourceName=sourceName.substring(1);
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:19:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(variableName.startsWith("/")){
+variableName=variableName.substring(1);
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:19:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+if(sourceName.startsWith("/")){
+sourceName=sourceName.substring(1);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:19:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+if(variableName.startsWith("/")){
+variableName=variableName.substring(1);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:19:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
+if(sourceName.startsWith("/")){
+sourceName=sourceName.substring(1);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:19:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
+if(variableName.startsWith("/")){
+variableName=variableName.substring(1);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:19:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
-allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
+allowDupe=false;
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2195/pattern-ver1-serial/src.main.java.ian.hu.webapp.session.FileSessionRepository.java-setStorageDirectory.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:19:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/703/pattern-ver1-serial/vipr-portal.portal.app.controllers.util.Models.java-canSelectTenantForVcenters.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:19:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if((allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/703/pattern-ver1-serial/vipr-portal.portal.app.controllers.util.Models.java-canSelectTenantForVcenters.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:19:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(varType.equals(null)&&varType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3979/pattern-ver1-serial/PrimaryHelper.java-run.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:19:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
-n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
+n.setJSType(varType);
+parent.setJSType(varType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:19:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
-n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
+parent.setJSType(varType);
+n.setJSType(varType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:20:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
+boolean succeeded=false;
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+succeeded=true;
+}
 }
 }
 }
+if(!succeeded){
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:20:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
+boolean succeeded=false;
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+succeeded=true;
 }
 }
 }
+if(!succeeded){
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:20:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(var.getParentNode().getType()==Token.EXPR_RESULT||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/4721/pattern-ver1-serial/plugins.eu.numberfour.n4js.xsemantics-gen.eu.numberfour.n4js.xsemantics.N4JSTypeSystem.java-applyRuleTypePropertyAccessExpression.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:20:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
-allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
+allowDupe=info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/5917/pattern-ver1-serial/kse.src.net.sf.keystore_explorer.gui.crypto.generalsubtree.JGeneralSubtrees.java-keyPressed.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:20:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
+if(info==null){
+info=parent.getJSDocInfo();
+}
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/3277/pattern-ver1-serial/core.src.main.java.org.infinispan.transaction.WriteSkewHelper.java-updateLocalModeCacheEntries.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:20:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(sourceName.length()==2){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+if(sourceName.length()==1){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6820/pattern-ver1-serial/src.main.java.org.asciidoc.intellij.actions.asciidoc.SimpleFormatAsciiDocAction.java-removeSymbol.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:20:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(variableName.length()==2){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+if(variableName.length()==1){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6820/pattern-ver1-serial/src.main.java.org.asciidoc.intellij.actions.asciidoc.SimpleFormatAsciiDocAction.java-removeSymbol.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:20:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(sourceName.length()==2){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
+if(sourceName.length()==1){
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6820/pattern-ver1-serial/src.main.java.org.asciidoc.intellij.actions.asciidoc.SimpleFormatAsciiDocAction.java-removeSymbol.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:20:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(variableName.length()==2){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
+if(variableName.length()==1){
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6820/pattern-ver1-serial/src.main.java.org.asciidoc.intellij.actions.asciidoc.SimpleFormatAsciiDocAction.java-removeSymbol.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:20:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(sourceName.length()==2){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
 }
+if(sourceName.length()==1){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6820/pattern-ver1-serial/src.main.java.org.asciidoc.intellij.actions.asciidoc.SimpleFormatAsciiDocAction.java-removeSymbol.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:20:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(variableName.length()==2){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
 }
+if(variableName.length()==1){
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6820/pattern-ver1-serial/src.main.java.org.asciidoc.intellij.actions.asciidoc.SimpleFormatAsciiDocAction.java-removeSymbol.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:20:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
+if(sourceName.length()==1){
+return ;
+}
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(sourceName.length()==2){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6820/pattern-ver1-serial/src.main.java.org.asciidoc.intellij.actions.asciidoc.SimpleFormatAsciiDocAction.java-removeSymbol.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:20:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
+if(variableName.length()==1){
+return ;
+}
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(variableName.length()==2){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6820/pattern-ver1-serial/src.main.java.org.asciidoc.intellij.actions.asciidoc.SimpleFormatAsciiDocAction.java-removeSymbol.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:21:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(sourceName.length()==2){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
+if(sourceName.length()==1){
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6820/pattern-ver1-serial/src.main.java.org.asciidoc.intellij.actions.asciidoc.SimpleFormatAsciiDocAction.java-removeSymbol.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:21:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(variableName.length()==2){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
+if(variableName.length()==1){
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6820/pattern-ver1-serial/src.main.java.org.asciidoc.intellij.actions.asciidoc.SimpleFormatAsciiDocAction.java-removeSymbol.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:21:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/6358/pattern-ver1-serial/src.main.java.com.builtbroken.icbm.content.ams.TileAMSClient.java-onPlayerRightClick.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:21:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
-if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)||"查看红包".equals(n.getType()==Token.GETPROP)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:21:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(n.getFirstChild()!=null){
+n.getFirstChild().setJSType(varType);
+}
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:21:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
-n.setJSType(varType);
-if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
+n.setJSType(varType);
+if(parent.getType()==Token.VAR){
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:21:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
-if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+if(n.getType()<0L||(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent))){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/110/pattern-ver1-serial/src.com.firebirdberlin.nightdream.ui.NightDreamUI.java-updateWeatherData.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:21:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
-if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+if(true){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:21:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
-if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)==false){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:21:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
-if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+if(NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/293/pattern-ver1-serial/src.snpsvm.app.CommandLineApp.java-main.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:21:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
-if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+if(allowDupe&&(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent))){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/270/pattern-ver1-serial/modules.lang-painless.src.main.java.org.elasticsearch.painless.AnalyzerExternal.java-processExtvar.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:21:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
-if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+if(n.getType()==Token.GETPROP){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/1184/pattern-ver1-serial/swagplash.src.main.java.com.github.albertosh.swagplash.actions.ApiBodyParamAction.java-call.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:21:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
-if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)==true){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:22:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(sourceName==null||n==null){
+throw new NullPointerException();
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:22:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(variableName==null||n==null){
+throw new NullPointerException();
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:22:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(var==null||n==null){
+throw new NullPointerException();
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:22:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(sourceName==null||n==null){
+throw new NullPointerException();
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:22:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(variableName==null||n==null){
+throw new NullPointerException();
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:22:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(sourceName==null||n==null){
+throw new NullPointerException();
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:22:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(variableName==null||n==null){
+throw new NullPointerException();
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:22:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(sourceName==null||n==null){
+throw new NullPointerException();
+}
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:22:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(variableName==null||n==null){
+throw new NullPointerException();
+}
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:22:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
+if(sourceName==null||n==null){
+throw new NullPointerException();
+}
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:22:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if((varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE))&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/4601/pattern-ver1-serial/core.src.by.matveev.rorty.entities.Robot.java-updateControlState.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:22:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(n.getFirstChild()!=null){
+n.getFirstChild().setJSType(varType);
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/2878/pattern-ver1-serial/src.main.java.de.webfilesys.FileLinkSelector.java-selectFiles.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:23:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+if(n.getFirstChild()!=null){
+n.getFirstChild().setJSType(varType);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/2878/pattern-ver1-serial/src.main.java.de.webfilesys.FileLinkSelector.java-selectFiles.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:23:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
-n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
+n.setJSType(varType);
+n.getFirstChild().setJSType(varType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 2, DEL : 7
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:23:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
+parent.setJSType(varType);
+n.getFirstChild().setJSType(varType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 2, DEL : 7
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:23:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
-n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
+n.getFirstChild().setJSType(varType);
+n.setJSType(varType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 2, DEL : 7
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:23:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
+n.getFirstChild().setJSType(varType);
+parent.setJSType(varType);
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 2, DEL : 7
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:23:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
-if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+if(n!=null&&(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent))){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V10/668/pattern-ver1-serial/opencga-catalog.src.main.java.org.opencb.opencga.catalog.models.Status.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:23:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(typeRegistry.getNativeType(UNKNOWN_TYPE)!=null&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V13/1987/pattern-ver1-serial/src.de.phbouillon.android.framework.impl.AndroidGame.java-onResume.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:23:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+n.getFirstChild().setJSType(varType);
+n.setJSType(varType);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1600/pattern-ver1-serial/src.main.java.org.cyberpwn.phantom.clust.ConfigurationHandler.java-fromMysql.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 2, DEL : 7
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:23:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(sourceName.endsWith("/")==false){
+sourceName=sourceName+"/";
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/627/pattern-ver1-serial/src.main.java.com.thunder.util.Util.java-restMap.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:23:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(variableName.endsWith("/")==false){
+variableName=variableName+"/";
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/627/pattern-ver1-serial/src.main.java.com.thunder.util.Util.java-restMap.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:23:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(n==null||var==null||newType==null){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:23:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(n==null||sourceName==null||newType==null){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:23:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(n==null||variableName==null||newType==null){
+return ;
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:24:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(n==null||var==null||newType==null){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:24:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(n==null||sourceName==null||newType==null){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:24:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(n==null||variableName==null||newType==null){
+return ;
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:24:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(n==null||var==null||newType==null){
+return ;
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:24:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(n==null||sourceName==null||newType==null){
+return ;
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:24:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(n==null||variableName==null||newType==null){
+return ;
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:24:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(n==null||parent==null||newType==null){
+return ;
+}
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:24:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
+allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 info=parent.getJSDocInfo();
 }
-allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 1, DEL : 10
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:24:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
-}
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
+}
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 1, DEL : 10
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:24:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
+allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7577/pattern-ver1-serial/networkmonitor.src.main.java.ca.rmen.android.networkmonitor.app.prefs.PreferencesCompat.java-setupActionBar.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 1, DEL : 10
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:24:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
+if(varType!=null){
+if(n!=null){
 n.setJSType(varType);
+}
+parent.setJSType(varType);
+}
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/7882/pattern-ver1-serial/RaspiMediaCenter.src.raspimediacenter.Logic.Utilities.ScraperUtils.java-scraperParseAlbum.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 8, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:24:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(variableName==null){
+variableName="20160101";
+}
+if(sourceName==null){
+sourceName="20200101";
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5352/pattern-ver1-serial/GitlabMonitor.src.main.java.org.gitmining.monitor.service.StudentService.java-getStudentEventItem.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:24:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+if(sourceName==null){
+sourceName="20160101";
+}
+if(variableName==null){
+variableName="20200101";
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5352/pattern-ver1-serial/GitlabMonitor.src.main.java.org.gitmining.monitor.service.StudentService.java-getStudentEventItem.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:25:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if((!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT))||(!newType.equals(varType))){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:25:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
-if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+if(n.getType()==Token.GETPROP){
 JSDocInfo info=n.getJSDocInfo();
-if(info==null){
+if(info==null&&NodeUtil.isObjectLitKey(n,parent)){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:25:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/6358/pattern-ver1-serial/src.main.java.com.builtbroken.icbm.content.ams.TileAMSClient.java-onPlayerRightClick.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:25:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)||"查看红包".equals(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT))){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:25:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(!!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:25:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/3312/pattern-ver1-serial/WWIDesigner.src.main.com.wwidesigner.note.view.FingeringPatternPanel.java-getData.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:25:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/933/pattern-ver1-serial/app.src.main.java.com.example.agrael.calculator.Utils.java-isOperator.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:25:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(true){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:25:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)==false){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:25:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V15/578/pattern-ver1-serial/src.com.android.mms.model.ImageModel.java-resizeMedia.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:25:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
-allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
+allowDupe=(info!=null)&&(info.getSuppressions().contains("duplicate"));
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(!((allowDupe)||(var.getParentNode().getType()==Token.EXPR_RESULT))||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:25:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(allowDupe&&(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType))){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/270/pattern-ver1-serial/modules.lang-painless.src.main.java.org.elasticsearch.painless.AnalyzerExternal.java-processExtvar.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:25:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)||allowDupe){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3215/pattern-ver1-serial/src.Output.java-writeAutoC.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:25:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)==true){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:26:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if((varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null)&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/4601/pattern-ver1-serial/core.src.by.matveev.rorty.entities.Robot.java-updateControlState.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:26:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+long startTime=System.currentTimeMillis();
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:26:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+long startTime=System.currentTimeMillis();
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:26:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+long startTime=System.currentTimeMillis();
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:26:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
+long startTime=System.currentTimeMillis();
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:26:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
+long startTime=System.currentTimeMillis();
 info=parent.getJSDocInfo();
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:26:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
+long startTime=System.currentTimeMillis();
 n.getFirstChild().setJSType(varType);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:26:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
+long startTime=System.currentTimeMillis();
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:26:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+long startTime=System.currentTimeMillis();
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:26:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
+long startTime=System.currentTimeMillis();
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:26:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+long startTime=System.currentTimeMillis();
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:26:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(!!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V35/7408/pattern-ver1-serial/src.main.java.com.joshuasnider.workspace.InternetIO.XKCDDebugger.java-printMissing.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:27:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/1959/pattern-ver1-serial/LowcostAvia.src.main.java.com.epam.lowcost.command.RegisterCommand.java-action.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:27:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/1959/pattern-ver1-serial/LowcostAvia.src.main.java.com.epam.lowcost.command.RegisterCommand.java-action.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:27:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
-n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/3556/pattern-ver1-serial/src.net.tootallnate.websocket.WebSocketClient.java-close.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 11, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:27:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
-Preconditions.checkState(parent.getType()==Token.FUNCTION);
+Preconditions.checkState((parent.getType())==(Token.FUNCTION));
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if((!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT))||(!newType.equals(varType))){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:27:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
-if(parent.getType()==Token.VAR){
+if((parent.getType())==(Token.VAR)){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if((!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT))||(!newType.equals(varType))){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:27:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
-if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+if((n.getType())==(Token.GETPROP)||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if((!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT))||(!newType.equals(varType))){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:27:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
-if(shouldReport){
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)){
+if(shouldReport&&!newType.equals(varType)){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 16, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:27:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+synchronized(this){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:27:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
-allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 8, INS : 0, DEL : 10
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:27:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)||"查看红包".equals(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:27:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+synchronized(this){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:27:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 0, INS : 1, DEL : 18
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:27:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 0, INS : 1, DEL : 18
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:28:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 0, INS : 1, DEL : 18
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:28:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/1014/pattern-ver1-serial/src.main.java.HxCKDMS.HxCEnchants.Handlers.EnchantHandlers.java-handleBootEnchant.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:28:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
-if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(shouldReport){
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 0, INS : 1, DEL : 18
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:28:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 0, INS : 1, DEL : 18
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:28:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(true){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:28:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)==false){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:28:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 0, INS : 1, DEL : 18
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:28:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 0, INS : 1, DEL : 18
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:28:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 0, INS : 1, DEL : 18
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:28:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
-allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
+allowDupe=(info!=null)&&(info.getSuppressions().contains("duplicate"));
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if((!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT))||(!newType.equals(varType))){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:28:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/5024/pattern-ver1-serial/src.org.exist.collections.Collection.java-getDocumentWithLock.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 0, INS : 1, DEL : 18
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:28:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
+}else {
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:29:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/4301/pattern-ver1-serial/api.src.main.java.com.abiquo.api.services.cloud.VirtualMachineService.java-changeVirtualMachineState.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 0, INS : 1, DEL : 18
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:29:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/4301/pattern-ver1-serial/api.src.main.java.com.abiquo.api.services.cloud.VirtualMachineService.java-changeVirtualMachineState.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 0, INS : 1, DEL : 18
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:29:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 0, INS : 1, DEL : 18
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:29:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(allowDupe&&(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE))){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/270/pattern-ver1-serial/modules.lang-painless.src.main.java.org.elasticsearch.painless.AnalyzerExternal.java-processExtvar.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:29:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)||allowDupe){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3215/pattern-ver1-serial/src.Output.java-writeAutoC.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:29:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
-if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
-}
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2729/pattern-ver1-serial/Spykes.CloudVision.app.src.main.java.inovation.lab.cloudvision.Speech.java-onInit.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:29:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)==true){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:29:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/69/pattern-ver1-serial/src.org.exoplatform.shareextension.AccountsFragment.java-onListItemClick.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:29:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/198/pattern-ver1-serial/src.com.bekvon.bukkit.residence.listeners.ResidencePlayerListener.java-onPlayerMove.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 0, INS : 1, DEL : 18
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:29:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/198/pattern-ver1-serial/src.com.bekvon.bukkit.residence.listeners.ResidencePlayerListener.java-onPlayerMove.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 0, INS : 1, DEL : 18
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:29:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 0, INS : 1, DEL : 18
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:29:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 0, INS : 1, DEL : 18
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:30:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 0, INS : 1, DEL : 18
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:30:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(shouldReport){
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
-if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
-}
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 0, INS : 1, DEL : 19
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:30:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 0, INS : 1, DEL : 19
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:30:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(shouldReport){
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 0, INS : 1, DEL : 19
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:30:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
+if(shouldReport){
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 0, INS : 1, DEL : 19
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:30:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
+if(shouldReport){
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 0, INS : 1, DEL : 19
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:30:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(shouldReport){
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 0, INS : 1, DEL : 19
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:30:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
+if(shouldReport){
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 0, INS : 1, DEL : 19
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:30:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
+if(shouldReport){
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 0, INS : 1, DEL : 19
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:30:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(shouldReport){
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 0, INS : 1, DEL : 19
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:30:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if((varType!=null)&&(varType!=typeRegistry.getNativeType(UNKNOWN_TYPE))&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if((!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT))||(!newType.equals(varType))){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 20, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:30:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
+if(allowDupe){
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/7446/pattern-ver1-serial/src.de.blau.android.Map.java-paintWay.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 1, INS : 0, DEL : 19
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
+synchronized(this){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
+}
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 21, UPD : 21, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:30:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
+if(parent.getType()==12){
+return ;
+}else {
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
+}
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4902/pattern-ver1-serial/app.src.main.java.com.cs180project.ucrclasses.BaseCalendarActivity.java-interpretTime.pattern
MATCHLEVEL : ALL
ALL : 21, UPD : 21, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:31:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
+if(var!=null){
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/258/pattern-ver1-serial/web.src.main.java.com.epam.freelancer.web.controller.UserController.java-addIsComplaintInOrderings.pattern
MATCHLEVEL : ALL
ALL : 22, UPD : 3, INS : 0, DEL : 19
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:31:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
-if(shouldReport){
+if(shouldReport&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 22, UPD : 22, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:31:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
-if(var.input==null){
+if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null){
+if(var.input==null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 22, UPD : 22, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:31:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+if(parent.getType()==Token.VAR){
+if(n.getFirstChild()!=null){
+n.getFirstChild().setJSType(varType);
+}
+}else {
+Preconditions.checkState(parent.getType()==Token.FUNCTION);
+parent.setJSType(varType);
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 22, UPD : 0, INS : 1, DEL : 21
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:31:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
-if(n.getFirstChild()!=null){
+if(n.getFirstChild()!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 23, UPD : 23, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:31:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+n.setJSType(varType);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1600/pattern-ver1-serial/src.main.java.org.cyberpwn.phantom.clust.ConfigurationHandler.java-fromMysql.pattern
MATCHLEVEL : ALL
ALL : 23, UPD : 0, INS : 2, DEL : 21
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:31:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+n.setJSType(varType);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1600/pattern-ver1-serial/src.main.java.org.cyberpwn.phantom.clust.ConfigurationHandler.java-fromMysql.pattern
MATCHLEVEL : ALL
ALL : 23, UPD : 0, INS : 2, DEL : 21
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:31:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
+synchronized(this){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
+}
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 24, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:31:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
+}else {
+Preconditions.checkState(parent.getType()==Token.FUNCTION);
+parent.setJSType(varType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1742/pattern-ver1-serial/obdalib-protege41.src.main.java.it.unibz.krdb.obda.protege4.gui.action.R2RMLImportAction.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 24, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:31:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
 }
+}else {
+if(n.getFirstChild()!=null){
+n.getFirstChild().setJSType(varType);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 24, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:31:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
+}else {
+n.getFirstChild().setJSType(varType);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 24, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:31:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
-n.setJSType(varType);
-if(parent.getType()==Token.VAR){
-if(n.getFirstChild()!=null){
-n.getFirstChild().setJSType(varType);
-}
-}else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
-}
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/556/pattern-ver1-serial/onebusaway-android.src.main.java.org.onebusaway.android.report.ui.ReportProblemFragmentBase.java-onLoadFinished.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 24, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:32:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
-n.setJSType(varType);
-if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
-}
-}else {
-Preconditions.checkState(parent.getType()==Token.FUNCTION);
-parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/3573/pattern-ver1-serial/src.com.claudiop.vendingmachine.VendingMachine.java-setPrice.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 24, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:32:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
+}else {
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1742/pattern-ver1-serial/obdalib-protege41.src.main.java.it.unibz.krdb.obda.protege4.gui.action.R2RMLImportAction.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 32, UPD : 32, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:32:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
-if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
-}
-}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1742/pattern-ver1-serial/obdalib-protege41.src.main.java.it.unibz.krdb.obda.protege4.gui.action.R2RMLImportAction.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 32, UPD : 32, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:32:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
 }
+}else {
+if(shouldReport){
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 32, UPD : 32, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:32:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
-}
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 32, UPD : 32, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:32:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
-if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 32, UPD : 32, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:32:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(shouldReport){
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 33, UPD : 0, INS : 1, DEL : 32
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:32:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(shouldReport){
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+}
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 33, UPD : 0, INS : 1, DEL : 32
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:32:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
-if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
-JSDocInfo info=n.getJSDocInfo();
-if(info==null){
-info=parent.getJSDocInfo();
-}
-allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
-}
+if(var!=null){
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/258/pattern-ver1-serial/web.src.main.java.com.epam.freelancer.web.controller.UserController.java-addIsComplaintInOrderings.pattern
MATCHLEVEL : ALL
ALL : 33, UPD : 3, INS : 0, DEL : 30
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:32:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(shouldReport){
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+}
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
-if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
-}
-}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/926/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.FileVirtualPoolService.java-prepareVirtualPool.pattern
MATCHLEVEL : ALL
ALL : 33, UPD : 0, INS : 1, DEL : 32
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:32:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
+}
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
-}
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/926/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.FileVirtualPoolService.java-prepareVirtualPool.pattern
MATCHLEVEL : ALL
ALL : 33, UPD : 0, INS : 1, DEL : 32
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:32:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(shouldReport){
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+}
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/926/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.FileVirtualPoolService.java-prepareVirtualPool.pattern
MATCHLEVEL : ALL
ALL : 33, UPD : 0, INS : 1, DEL : 32
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:33:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(shouldReport){
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+}
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2701/pattern-ver1-serial/src.main.java.pers.gwyog.gtveinlocator.items.ItemEliteVeinLocator.java-onItemRightClick.pattern
MATCHLEVEL : ALL
ALL : 33, UPD : 0, INS : 1, DEL : 32
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:33:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
+}
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(shouldReport){
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 33, UPD : 0, INS : 1, DEL : 32
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:33:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(shouldReport){
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+}
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 33, UPD : 0, INS : 1, DEL : 32
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:33:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
+}
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(shouldReport){
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 33, UPD : 0, INS : 1, DEL : 32
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:33:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(shouldReport){
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+}
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 33, UPD : 0, INS : 1, DEL : 32
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:33:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}else {
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(shouldReport){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
-}else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
-if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/3937/pattern-ver1-serial/src.Main.Analysis.java-calculatePrecisionRecall.pattern
MATCHLEVEL : ALL
ALL : 42, UPD : 42, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:33:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+synchronized(this){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 59, UPD : 59, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:33:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
-if(var.input==null){
-n.setJSType(varType);
-if(parent.getType()==Token.VAR){
-if(n.getFirstChild()!=null){
-n.getFirstChild().setJSType(varType);
-}
-}else {
-Preconditions.checkState(parent.getType()==Token.FUNCTION);
-parent.setJSType(varType);
-}
-}else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
-if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
-}
-}
-}
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4121/pattern-ver1-serial/main.plugins.org.talend.dataprofiler.core.src.org.talend.dataprofiler.core.ImageLib.java-getImageNameByRepositoryNode.pattern
MATCHLEVEL : ALL
ALL : 59, UPD : 0, INS : 0, DEL : 59
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:33:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+}
 }
+}else {
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(shouldReport){
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1742/pattern-ver1-serial/obdalib-protege41.src.main.java.it.unibz.krdb.obda.protege4.gui.action.R2RMLImportAction.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 59, UPD : 59, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:33:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
-if(var.input==null){
-n.setJSType(varType);
-if(parent.getType()==Token.VAR){
-if(n.getFirstChild()!=null){
-n.getFirstChild().setJSType(varType);
-}
-}else {
-Preconditions.checkState(parent.getType()==Token.FUNCTION);
-parent.setJSType(varType);
-}
-}else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
-}
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/3408/pattern-ver1-serial/COMP90015ChatClient.src.tiredale.client.ChatClientSocketThread.java-IdentityChangeResponse.pattern
MATCHLEVEL : ALL
ALL : 59, UPD : 59, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:33:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
-if(var.input==null){
-n.setJSType(varType);
-if(parent.getType()==Token.VAR){
-if(n.getFirstChild()!=null){
-n.getFirstChild().setJSType(varType);
-}
-}else {
-Preconditions.checkState(parent.getType()==Token.FUNCTION);
-parent.setJSType(varType);
-}
-}else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
-}
-}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3131/pattern-ver1-serial/src.cofh.tweak.asmhooks.render.RenderGlobal.java-markRenderers.pattern
MATCHLEVEL : ALL
ALL : 59, UPD : 59, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:33:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
-if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
-}
-}else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
-if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
-}
-}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3131/pattern-ver1-serial/src.cofh.tweak.asmhooks.render.RenderGlobal.java-markRenderers.pattern
MATCHLEVEL : ALL
ALL : 59, UPD : 59, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:33:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
-if(var.input==null){
-n.setJSType(varType);
-if(parent.getType()==Token.VAR){
-if(n.getFirstChild()!=null){
-n.getFirstChild().setJSType(varType);
-}
-}else {
-Preconditions.checkState(parent.getType()==Token.FUNCTION);
-parent.setJSType(varType);
-}
-}else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
-if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
-}
-}
-}
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2729/pattern-ver1-serial/Spykes.CloudVision.app.src.main.java.inovation.lab.cloudvision.Speech.java-onInit.pattern
MATCHLEVEL : ALL
ALL : 59, UPD : 59, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:34:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+}
 }
+}else {
+n.setJSType(varType);
+if(parent.getType()==Token.VAR){
+if(n.getFirstChild()!=null){
+n.getFirstChild().setJSType(varType);
 }
+}else {
+Preconditions.checkState(parent.getType()==Token.FUNCTION);
+parent.setJSType(varType);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2567/pattern-ver1-serial/bridge-impl.src.main.java.com.liferay.faces.bridge.internal.BridgePhaseBaseImpl.java-initBridgeRequestScope.pattern
MATCHLEVEL : ALL
ALL : 59, UPD : 59, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:34:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
-if(var.input==null){
-n.setJSType(varType);
-if(parent.getType()==Token.VAR){
-if(n.getFirstChild()!=null){
-n.getFirstChild().setJSType(varType);
-}
-}else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
-}
-}else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
-if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
-}
-}
-}
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/556/pattern-ver1-serial/onebusaway-android.src.main.java.org.onebusaway.android.report.ui.ReportProblemFragmentBase.java-onLoadFinished.pattern
MATCHLEVEL : ALL
ALL : 59, UPD : 59, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:34:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
-if(var.input==null){
-n.setJSType(varType);
-if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
-}
-}else {
-Preconditions.checkState(parent.getType()==Token.FUNCTION);
-parent.setJSType(varType);
-}
-}else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
-if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
-}
-}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/3573/pattern-ver1-serial/src.com.claudiop.vendingmachine.VendingMachine.java-setPrice.pattern
MATCHLEVEL : ALL
ALL : 59, UPD : 59, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:34:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
-if(var.input==null){
-n.setJSType(varType);
-if(parent.getType()==Token.VAR){
-if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
-}
-}else {
-Preconditions.checkState(parent.getType()==Token.FUNCTION);
-parent.setJSType(varType);
-}
-}else {
-if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
-if(shouldReport){
-compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
-}
-}
-}
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6802/pattern-ver1-serial/FtcRobotController.src.main.java.com.qualcomm.ftcrobotcontroller.opmodes.PacmanBotHardwareBase.java-checkUsers.pattern
MATCHLEVEL : ALL
ALL : 59, UPD : 59, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:34:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/TypeValidator.java[495,562]
------------Candidate---------------
 void expectUndeclaredVariable(String sourceName,Node n,Node parent,Var var,String variableName,JSType newType){
 boolean allowDupe=false;
 if(n.getType()==Token.GETPROP||NodeUtil.isObjectLitKey(n,parent)){
 JSDocInfo info=n.getJSDocInfo();
 if(info==null){
 info=parent.getJSDocInfo();
 }
 allowDupe=info!=null&&info.getSuppressions().contains("duplicate");
 }
 JSType varType=var.getType();
 if(varType!=null&&varType!=typeRegistry.getNativeType(UNKNOWN_TYPE)&&newType!=null&&newType!=typeRegistry.getNativeType(UNKNOWN_TYPE)){
+if(var.input==null){
+n.setJSType(varType);
+if(parent.getType()==Token.VAR){
+if(n.getFirstChild()!=null){
+n.getFirstChild().setJSType(varType);
+}
+}else {
+Preconditions.checkState(parent.getType()==Token.FUNCTION);
+parent.setJSType(varType);
+}
+}else {
+if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
+if(shouldReport){
 if(var.input==null){
 n.setJSType(varType);
 if(parent.getType()==Token.VAR){
 if(n.getFirstChild()!=null){
 n.getFirstChild().setJSType(varType);
 }
 }else {
 Preconditions.checkState(parent.getType()==Token.FUNCTION);
 parent.setJSType(varType);
 }
 }else {
 if(!(allowDupe||var.getParentNode().getType()==Token.EXPR_RESULT)||!newType.equals(varType)){
 if(shouldReport){
+compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
+}
+}
+}
 compiler.report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 60, UPD : 0, INS : 1, DEL : 59
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 13:34:27 CDT
--------------- END -----------------
Location : com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeExpression:[1662, 1652, 1653, 1666, 1667, 1668, 1671, 1677, 1663, 1641, 1664, 1658, 1659, 1669, 1670, 1672, 1673]#1.0
Compute Candidate : 2019.09.06 AD at 13:35:55 CDT - 2019.09.06 AD at 14:36:16 CDT , PNumber : 11443, CandNumber : 0 
Location : com.google.javascript.jscomp.ChainableReverseAbstractInterpreter.append:[79, 80, 81, 82]#1.0
Compute Candidate : 2019.09.06 AD at 14:37:40 CDT - 2019.09.06 AD at 14:43:32 CDT , PNumber : 11434, CandNumber : 96 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
+import java.util.Locale;
+
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
-Preconditions.checkArgument(lastLink.nextLink==null);
+Preconditions.checkArgument(lastLink.nextLink==null,Locale.US);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2959/pattern-ver1-serial/lib.src.main.java.org.theta4j.Theta.java-getDateTime.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:43:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
+import java.util.Locale;
+
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
-Preconditions.checkArgument(lastLink.nextLink==null);
+Preconditions.checkArgument(lastLink.nextLink==null,Locale.ENGLISH);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/6693/pattern-ver1-serial/src.main.java.com.twilio.sdk.resource.InstanceResource.java-parseDate.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:43:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
-Preconditions.checkArgument(lastLink.nextLink==null);
+Preconditions.checkArgument(lastLink.nextLink==null,String.CASE_INSENSITIVE_ORDER);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/1813/pattern-ver1-serial/src.me.libraryaddict.Hungergames.Managers.KitManager.java-addKit.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:43:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
-return lastLink;
+return this;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/2420/pattern-ver1-serial/Nian_Karl.QL.src.org.uva.ql.ast.value.Undefined.java-getValue.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:43:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
-Preconditions.checkArgument(lastLink.nextLink==null);
+Preconditions.checkArgument(lastLink.nextLink==null,false);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2675/pattern-ver1-serial/core.org.eclipse.cdt.core.parser.org.eclipse.cdt.internal.core.dom.parser.cpp.CPPASTConditionalExpression.java-convertToMatch.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:43:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
-this.nextLink=lastLink;
+this.nextLink=this;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/3216/pattern-ver1-serial/instagram_integration.app.src.main.java.com.hha.instagram_integration.Photo.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:44:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
-return lastLink;
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:44:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
-Preconditions.checkArgument(lastLink.nextLink==null);
+Preconditions.checkArgument(lastLink.nextLink==null,lastLink);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/1763/pattern-ver1-serial/MyApplication.app.src.main.java.com.gcode.notes.controllers.BaseController.java-setNewContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:44:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
-Preconditions.checkArgument(lastLink.nextLink==null);
+Preconditions.checkArgument(lastLink.nextLink==null,0);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3557/pattern-ver1-serial/src.main.java.com.jetbrains.jetpad.vclang.term.expr.sort.Level.java-prettyPrint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:44:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
-Preconditions.checkArgument(lastLink.nextLink==null);
+Preconditions.checkArgument(lastLink.nextLink==null,lastLink.firstLink);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/6746/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.vplexcontroller.VPlexDeviceController.java-deleteStorageView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:44:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
-Preconditions.checkArgument(lastLink.nextLink==null);
+Preconditions.checkArgument(lastLink.nextLink==null,this.nextLink);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/6746/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.vplexcontroller.VPlexDeviceController.java-deleteStorageView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:44:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
-Preconditions.checkArgument(lastLink.nextLink==null);
+Preconditions.checkArgument(lastLink.nextLink==null,"UTF-8");
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1349/pattern-ver1-serial/eu.scasefp7.eclipse.reqeditor.src.eu.scasefp7.eclipse.reqeditor.wizards.ImportRqsWizardPage.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:44:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
-Preconditions.checkArgument(lastLink.nextLink==null);
+Preconditions.checkArgument(lastLink.nextLink==null,new ArrayList<KeyBinding>());
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:44:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
-this.nextLink=lastLink;
+this.nextLink=null;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:44:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
-return lastLink;
+return this.nextLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6187/pattern-ver1-serial/device-manager.core.src.main.java.org.dc.bco.manager.device.core.AbstractDeviceFactory.java-newInstance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:44:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
-return lastLink;
+return lastLink.firstLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6187/pattern-ver1-serial/device-manager.core.src.main.java.org.dc.bco.manager.device.core.AbstractDeviceFactory.java-newInstance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:44:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
-Preconditions.checkArgument(lastLink.nextLink==null);
+Preconditions.checkArgument(lastLink.nextLink==null,2);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2170/pattern-ver1-serial/tool.jtag.src.main.java.nl.lxtreme.ols.tool.jtag.JTAGDataSet.java-reportJTAGTdiData.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:44:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
-Preconditions.checkArgument(lastLink.nextLink==null);
+Preconditions.checkArgument(this.nextLink.nextLink==null);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/4812/pattern-ver1-serial/src.org.rascalmpl.library.experiments.Compiler.RVM.Interpreter.Thrown.java-printStackTrace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:44:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
-Preconditions.checkArgument(lastLink.nextLink==null);
+Preconditions.checkArgument(lastLink.firstLink.nextLink==null);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/4812/pattern-ver1-serial/src.org.rascalmpl.library.experiments.Compiler.RVM.Interpreter.Thrown.java-printStackTrace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:45:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
-lastLink.firstLink=this.firstLink;
+this.nextLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/4812/pattern-ver1-serial/src.org.rascalmpl.library.experiments.Compiler.RVM.Interpreter.Thrown.java-printStackTrace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:45:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
-lastLink.firstLink=this.firstLink;
+lastLink.firstLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2427/pattern-ver1-serial/src.java.picard.analysis.oxidation.ArtifactCounter.java-getSummaryMetrics.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:45:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
-Preconditions.checkArgument(lastLink.nextLink==null);
+Preconditions.checkArgument(lastLink.nextLink==null,"path");
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/5783/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.persistence.data.MemoryDataView.java-createView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:45:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
-lastLink.firstLink=this.firstLink;
+lastLink.firstLink=this;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/3216/pattern-ver1-serial/instagram_integration.app.src.main.java.com.hha.instagram_integration.Photo.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:45:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
-lastLink.firstLink=this.firstLink;
+lastLink.firstLink=lastLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:45:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
+synchronized(this){
 this.nextLink=lastLink;
+}
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:45:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
+synchronized(this){
 lastLink.firstLink=this.firstLink;
+}
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:45:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
+append(lastLink);
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:45:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
-lastLink.firstLink=this.firstLink;
+lastLink.firstLink=null;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:45:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
-Preconditions.checkArgument(lastLink.nextLink==null);
+Preconditions.checkArgument(lastLink.nextLink==null,null,null);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/2082/pattern-ver1-serial/interview_questions.trees_and_graphs.ValidateBST.java-checkBST.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:45:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
+synchronized(this){
 Preconditions.checkArgument(lastLink.nextLink==null);
+}
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:45:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
-return lastLink;
+return (ChainableReverseAbstractInterpreter)(lastLink);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:45:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
-Preconditions.checkArgument(lastLink.nextLink==null);
+Preconditions.checkArgument(lastLink.nextLink==null,Charset.forName("UTF-8"));
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:46:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
+lastLink=this;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4878/pattern-ver1-serial/app.src.main.java.com.trukr.shipper.activity.Notification.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:46:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
+nextLink=this;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4878/pattern-ver1-serial/app.src.main.java.com.trukr.shipper.activity.Notification.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:46:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
+firstLink=this;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4878/pattern-ver1-serial/app.src.main.java.com.trukr.shipper.activity.Notification.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:46:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
+lastLink.nextLink=this;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4878/pattern-ver1-serial/app.src.main.java.com.trukr.shipper.activity.Notification.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:46:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
+lastLink.nextLink=lastLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:46:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
+lastLink=lastLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:46:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
+lastLink.firstLink=lastLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:46:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
+if(this.nextLink==null){
 this.nextLink=lastLink;
+}
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:46:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
+if(lastLink.firstLink==null){
 lastLink.firstLink=this.firstLink;
+}
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:46:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
+int a=0;
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:46:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
+String OUTSTRING="";
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:46:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
+if(lastLink!=null){
 this.nextLink=lastLink;
+}
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/663/pattern-ver1-serial/src.ceprei.appcrawler.config.FileAppCrawlerConfig.java-FileAppCrawlerConfig.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:46:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
+if(equals(lastLink)){
+return null;
+}
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:47:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
+if(equals(lastLink)){
+return null;
+}
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:47:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
+if(equals(lastLink)){
+return null;
+}
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:47:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
+if(equals(lastLink)){
+return null;
+}
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:47:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
+int indexSelection=0;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:47:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
+int a=1;
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:47:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
+String nextLink="%#.&f";
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:47:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
+String firstLink="%#.&f";
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:47:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
+boolean b=true;
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:47:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
+if(lastLink==null){
+return null;
+}
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:47:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
+if(lastLink==null){
+return null;
+}
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:47:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
+if(lastLink==null){
+return null;
+}
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:47:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
+if(lastLink==null){
+return null;
+}
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:48:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
+if("&null".equals(lastLink)){
+return null;
+}
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:48:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
+assert (lastLink!=null);
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:48:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
+if(lastLink!=null){
+Preconditions.checkArgument(lastLink.nextLink==null);
+this.nextLink=lastLink;
+lastLink.firstLink=this.firstLink;
+return lastLink;
+}
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:48:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
+assert (lastLink!=null);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:48:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
+if((Thread.currentThread().interrupted())){
+return null;
+}
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:48:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:48:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
+try{
 Preconditions.checkArgument(lastLink.nextLink==null);
+}finally{
 this.nextLink=lastLink;
+}
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:48:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
+try{
 Preconditions.checkArgument(lastLink.nextLink==null);
-this.nextLink=lastLink;
+}finally{
 lastLink.firstLink=this.firstLink;
+}
+this.nextLink=lastLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:48:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
-this.nextLink=lastLink;
+try{
 lastLink.firstLink=this.firstLink;
+}finally{
+this.nextLink=lastLink;
+}
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:48:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
+try{
 this.nextLink=lastLink;
+}finally{
 lastLink.firstLink=this.firstLink;
+}
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:48:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
+assert (lastLink!=null):"Appointments day is not allowed to be null!";
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:48:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
-Preconditions.checkArgument(lastLink.nextLink==null);
+try{
 this.nextLink=lastLink;
+}finally{
+Preconditions.checkArgument(lastLink.nextLink==null);
+}
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 1, INS : 0, DEL : 5
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:49:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
-Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
+try{
 lastLink.firstLink=this.firstLink;
+}finally{
+Preconditions.checkArgument(lastLink.nextLink==null);
+}
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 1, INS : 0, DEL : 5
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:49:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
+if(lastLink==null){
+lastLink=this.nextLink;
+}else {
 this.nextLink=lastLink;
+}
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3590/pattern-ver1-serial/src.main.java.ch.bfh.btx8081.w2015.blue.HealthVisApp.View.PatientDetailView.java-refreshView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:49:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
-this.nextLink=lastLink;
+if(this.nextLink!=lastLink){
 lastLink.firstLink=this.firstLink;
+}
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:49:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
+if(lastLink.firstLink!=this.firstLink){
 this.nextLink=lastLink;
-lastLink.firstLink=this.firstLink;
+}
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:49:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
+if(this.nextLink!=lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
-this.nextLink=lastLink;
+}
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:49:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
+if(lastLink.firstLink!=this.firstLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
+}
 this.nextLink=lastLink;
-lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:49:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
+ChainableReverseAbstractInterpreter t=lastLink;
+lastLink=null;
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
-return lastLink;
+return t;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5100/pattern-ver1-serial/CityGenJava.src.gameObjects.player.Player.java-drop.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 1, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:49:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
-this.nextLink=lastLink;
+if(lastLink.firstLink==null){
 lastLink.firstLink=this.firstLink;
+}
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/2963/pattern-ver1-serial/src.in.tamchow.fractal.fractals.complex.ComplexFractalGenerator.java-initFractal.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:49:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
+if(this.nextLink==null){
 this.nextLink=lastLink;
-lastLink.firstLink=this.firstLink;
+}
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/2963/pattern-ver1-serial/src.in.tamchow.fractal.fractals.complex.ComplexFractalGenerator.java-initFractal.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:49:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
-this.nextLink=lastLink;
+if(lastLink.firstLink!=null){
 lastLink.firstLink=this.firstLink;
+}
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/3931/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.fetch.OFetchHelper.java-fetchCollectionRidMap.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:49:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
+if(this.nextLink!=null){
 this.nextLink=lastLink;
-lastLink.firstLink=this.firstLink;
+}
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/3931/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.fetch.OFetchHelper.java-fetchCollectionRidMap.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:49:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
-Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
+if(lastLink.firstLink==null){
 lastLink.firstLink=this.firstLink;
+}
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/2963/pattern-ver1-serial/src.in.tamchow.fractal.fractals.complex.ComplexFractalGenerator.java-initFractal.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:50:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
-Preconditions.checkArgument(lastLink.nextLink==null);
+if(this.nextLink==null){
 this.nextLink=lastLink;
+}
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/2963/pattern-ver1-serial/src.in.tamchow.fractal.fractals.complex.ComplexFractalGenerator.java-initFractal.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:50:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
-Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
+if(lastLink.firstLink!=null){
 lastLink.firstLink=this.firstLink;
+}
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/3931/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.fetch.OFetchHelper.java-fetchCollectionRidMap.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:50:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
-Preconditions.checkArgument(lastLink.nextLink==null);
+if(this.nextLink!=null){
 this.nextLink=lastLink;
+}
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/3931/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.fetch.OFetchHelper.java-fetchCollectionRidMap.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:50:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
+try{
 Preconditions.checkArgument(lastLink.nextLink==null);
+}finally{
 this.nextLink=lastLink;
-lastLink.firstLink=this.firstLink;
+}
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2113/pattern-ver1-serial/src.main.java.hudson.plugins.perforce.QuickRestoreCall.java-call.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 1, INS : 0, DEL : 8
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:50:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
+try{
 Preconditions.checkArgument(lastLink.nextLink==null);
-this.nextLink=lastLink;
+}finally{
 lastLink.firstLink=this.firstLink;
+}
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2113/pattern-ver1-serial/src.main.java.hudson.plugins.perforce.QuickRestoreCall.java-call.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 1, INS : 0, DEL : 8
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:50:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
+for(int i=0;i<24;i++){
 Preconditions.checkArgument(lastLink.nextLink==null);
+}
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/7063/pattern-ver1-serial/src.application.rmi.Serveur.java-initalisationMain.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:50:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
+for(int i=0;i<24;i++){
 this.nextLink=lastLink;
+}
 lastLink.firstLink=this.firstLink;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/7063/pattern-ver1-serial/src.application.rmi.Serveur.java-initalisationMain.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:50:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
+for(int i=0;i<24;i++){
 lastLink.firstLink=this.firstLink;
+}
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/7063/pattern-ver1-serial/src.application.rmi.Serveur.java-initalisationMain.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:50:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
-Preconditions.checkArgument(lastLink.nextLink==null);
-this.nextLink=lastLink;
+try{
 lastLink.firstLink=this.firstLink;
+}finally{
+this.nextLink=lastLink;
+}
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2113/pattern-ver1-serial/src.main.java.hudson.plugins.perforce.QuickRestoreCall.java-call.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 1, INS : 0, DEL : 9
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:50:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
-Preconditions.checkArgument(lastLink.nextLink==null);
+try{
 this.nextLink=lastLink;
+}finally{
 lastLink.firstLink=this.firstLink;
+}
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2113/pattern-ver1-serial/src.main.java.hudson.plugins.perforce.QuickRestoreCall.java-call.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 1, INS : 0, DEL : 9
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:50:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
-Preconditions.checkArgument(lastLink.nextLink==null);
-this.nextLink=lastLink;
+try{
 lastLink.firstLink=this.firstLink;
+}finally{
+Preconditions.checkArgument(lastLink.nextLink==null);
+}
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2113/pattern-ver1-serial/src.main.java.hudson.plugins.perforce.QuickRestoreCall.java-call.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 1, INS : 0, DEL : 9
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:50:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
-Preconditions.checkArgument(lastLink.nextLink==null);
+try{
 this.nextLink=lastLink;
-lastLink.firstLink=this.firstLink;
+}finally{
+Preconditions.checkArgument(lastLink.nextLink==null);
+}
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2113/pattern-ver1-serial/src.main.java.hudson.plugins.perforce.QuickRestoreCall.java-call.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 1, INS : 0, DEL : 9
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:50:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
-Preconditions.checkArgument(lastLink.nextLink==null);
-this.nextLink=lastLink;
+if(lastLink.firstLink==null){
 lastLink.firstLink=this.firstLink;
+}
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4209/pattern-ver1-serial/app.src.main.java.com.example.sdp11.wmd.DataFragment.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 3, INS : 0, DEL : 9
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:51:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
-Preconditions.checkArgument(lastLink.nextLink==null);
+if(this.nextLink==null){
 this.nextLink=lastLink;
-lastLink.firstLink=this.firstLink;
+}
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4209/pattern-ver1-serial/app.src.main.java.com.example.sdp11.wmd.DataFragment.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 3, INS : 0, DEL : 9
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:51:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[69,83]
------------Candidate---------------
 ChainableReverseAbstractInterpreter append(ChainableReverseAbstractInterpreter lastLink){
+long startTime=System.currentTimeMillis();
 Preconditions.checkArgument(lastLink.nextLink==null);
 this.nextLink=lastLink;
 lastLink.firstLink=this.firstLink;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 return lastLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:51:15 CDT
--------------- END -----------------
Location : com.google.javascript.jscomp.ChainableReverseAbstractInterpreter.getFirst:[89]#1.0
Compute Candidate : 2019.09.06 AD at 14:52:35 CDT - 2019.09.06 AD at 14:55:51 CDT , PNumber : 11280, CandNumber : 10 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[85,90]
------------Candidate---------------
 ChainableReverseAbstractInterpreter getFirst(){
-return firstLink;
+return this;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/2420/pattern-ver1-serial/Nian_Karl.QL.src.org.uva.ql.ast.value.Undefined.java-getValue.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:55:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[85,90]
------------Candidate---------------
 ChainableReverseAbstractInterpreter getFirst(){
-return firstLink;
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:56:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[85,90]
------------Candidate---------------
 ChainableReverseAbstractInterpreter getFirst(){
-return firstLink;
+return this.firstLink;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/1924/pattern-ver1-serial/src.main.java.org.spongepowered.api.util.command.ImmutableCommandMapping.java-getCallable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:56:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[85,90]
------------Candidate---------------
 ChainableReverseAbstractInterpreter getFirst(){
-return firstLink;
+return this.getFirst();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6962/pattern-ver1-serial/CodenameOne.src.com.codename1.ui.Toolbar.java-constructSideNavigationComponent.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:56:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[85,90]
------------Candidate---------------
 ChainableReverseAbstractInterpreter getFirst(){
+this.getFirst();
 return firstLink;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:56:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[85,90]
------------Candidate---------------
 ChainableReverseAbstractInterpreter getFirst(){
-return firstLink;
+return (ChainableReverseAbstractInterpreter)(firstLink);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:56:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[85,90]
------------Candidate---------------
 ChainableReverseAbstractInterpreter getFirst(){
+int a=0;
 return firstLink;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:56:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[85,90]
------------Candidate---------------
 ChainableReverseAbstractInterpreter getFirst(){
+String OUTSTRING="";
 return firstLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:56:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[85,90]
------------Candidate---------------
 ChainableReverseAbstractInterpreter getFirst(){
+int a=1;
 return firstLink;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:56:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java[85,90]
------------Candidate---------------
 ChainableReverseAbstractInterpreter getFirst(){
+boolean b=true;
 return firstLink;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 14:56:40 CDT
--------------- END -----------------
Location : com.google.javascript.jscomp.ProcessClosurePrimitives.visit:[239, 240, 241, 244, 237, 227, 228, 171, 260, 173, 174, 175, 176, 177, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 202, 203, 204, 206, 207, 208, 209, 214, 215, 216, 217, 220, 231, 232, 242, 248, 249, 252, 256]#1.0
Compute Candidate : 2019.09.06 AD at 14:58:09 CDT - 2019.09.06 AD at 15:38:19 CDT , PNumber : 3383, CandNumber : 401 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
+return ;
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
+return ;
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
+return ;
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
+return ;
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
+return ;
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
+return ;
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
+return ;
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
+return ;
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
+return ;
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
+return ;
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/4522/pattern-ver1-serial/core.src.main.java.io.undertow.server.protocol.framed.AbstractFramedChannel.java-receive.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
+return ;
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/4522/pattern-ver1-serial/core.src.main.java.io.undertow.server.protocol.framed.AbstractFramedChannel.java-receive.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
+return ;
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/4522/pattern-ver1-serial/core.src.main.java.io.undertow.server.protocol.framed.AbstractFramedChannel.java-receive.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
+return ;
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/4522/pattern-ver1-serial/core.src.main.java.io.undertow.server.protocol.framed.AbstractFramedChannel.java-receive.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
+return ;
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/1695/pattern-ver1-serial/src.fr.project.bluechat.layout.activity.MainActivity.java-newName.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
+return ;
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/2057/pattern-ver1-serial/multiplication-game.Main.java-ollie.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
+return ;
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/2057/pattern-ver1-serial/multiplication-game.Main.java-ollie.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
+return ;
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/2057/pattern-ver1-serial/multiplication-game.Main.java-ollie.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
+return ;
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/1372/pattern-ver1-serial/src.CheatsPanel.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
+return ;
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/3473/pattern-ver1-serial/src.main.java.com.fabegabe.cmd.CCCommand.java-onCommand.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
+return ;
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/3473/pattern-ver1-serial/src.main.java.com.fabegabe.cmd.CCCommand.java-onCommand.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
+return ;
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3125/pattern-ver1-serial/given.src.banking.primitive.core.Savings.java-deposit.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
-String name=n.getFirstChild().getString();
+ String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
-ProvidedName pn=providedNames.get(name);
+ ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
-Node left=n.getFirstChild();
+ Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
-Node name=left.getFirstChild();
+ Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
-Node arg=left.getNext();
+ Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
-String methodName=name.getNext().getString();
+ String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
-CodingConvention convention=compiler.getCodingConvention();
+ CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
-int dot=arg.getString().indexOf('.');
+ int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
-List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
+ List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
-boolean isExpr=parent.getType()==Token.EXPR_RESULT;
+ boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
-compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
+compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name,null));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5281/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.adapters.MessageArrayAdapter.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
-if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
+if(n.getFirstChild().getType()==0&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
-boolean isExpr=parent.getType()==Token.EXPR_RESULT;
+boolean isExpr=parent.getType()==0;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
-if(left.getType()==Token.GETPROP){
+if(left.getType()==0){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
-if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
+if(name.getType()==0&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
-if(arg.getType()==Token.STRING){
+if(arg.getType()==0){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
-if(pn!=null){
+if(pn==null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
-if(typeDecls!=null){
+if(typeDecls==null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
-if("base".equals(methodName)){
+if("base".equalsIgnoreCase(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/1785/pattern-ver1-serial/src.edu.asu.laits.gui.menus.ModelMenu.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
-if("require".equals(methodName)){
+if("require".equalsIgnoreCase(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/1785/pattern-ver1-serial/src.edu.asu.laits.gui.menus.ModelMenu.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
-if("provide".equals(methodName)){
+if("provide".equalsIgnoreCase(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/1785/pattern-ver1-serial/src.edu.asu.laits.gui.menus.ModelMenu.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
-if("exportSymbol".equals(methodName)){
+if("exportSymbol".equalsIgnoreCase(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/1785/pattern-ver1-serial/src.edu.asu.laits.gui.menus.ModelMenu.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
-if("addDependency".equals(methodName)){
+if("addDependency".equalsIgnoreCase(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/1785/pattern-ver1-serial/src.edu.asu.laits.gui.menus.ModelMenu.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
-if("setCssNameMapping".equals(methodName)){
+if("setCssNameMapping".equalsIgnoreCase(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/1785/pattern-ver1-serial/src.edu.asu.laits.gui.menus.ModelMenu.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
-if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
+if(name.getType()==Token.NAME&&GOOG.equalsIgnoreCase(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/1785/pattern-ver1-serial/src.edu.asu.laits.gui.menus.ModelMenu.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
-if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
+if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equalsIgnoreCase(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/1785/pattern-ver1-serial/src.edu.asu.laits.gui.menus.ModelMenu.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
+default :
+
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7688/pattern-ver1-serial/cluster.src.main.java.io.servicefabric.cluster.ClusterMembership.java-processUpdates.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
+
+default :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/4453/pattern-ver1-serial/src.main.java.org.spongepowered.asm.mixin.transformer.MixinConfig.java-initialise.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
-int dot=arg.getString().indexOf('.');
+int dot=arg.getString().indexOf('.',0);
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3557/pattern-ver1-serial/src.main.java.com.jetbrains.jetpad.vclang.term.expr.sort.Level.java-prettyPrint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
+break;
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
+break;
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
+break;
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
+break;
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
+break;
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
+break;
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
+break;
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
+break;
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
+break;
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
-if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
+if(n.getFirstChild().getType()==Token.NAME&&parent.getType()==Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6722/pattern-ver1-serial/collections.queue.IntArrayQueue.java-peek.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
-if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
+if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()==Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6722/pattern-ver1-serial/collections.queue.IntArrayQueue.java-peek.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
+break;
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/1233/pattern-ver1-serial/crm.src.main.java.com.ogg.crm.ui.activity.CustomerPublicListActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
+break;
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/1233/pattern-ver1-serial/crm.src.main.java.com.ogg.crm.ui.activity.CustomerPublicListActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
-if(dot==-1){
+if(dot<=-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
-boolean isExpr=parent.getType()==Token.EXPR_RESULT;
+boolean isExpr=parent.getType()<=Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
-if(left.getType()==Token.GETPROP){
+if(left.getType()<=Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
-if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
+if(name.getType()<=Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
-if(arg.getType()==Token.STRING){
+if(arg.getType()<=Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
-if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
+if(n.getFirstChild().getType()<=Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
+break;
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/5737/pattern-ver1-serial/Android.EasyBudget.app.src.main.java.com.benoitletondor.easybudgetapp.view.main.ExpensesRecyclerViewAdapter.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
-String name=n.getFirstChild().getString();
+String name=parent.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/79/pattern-ver1-serial/src.main.java.com.brxt.service.impl.ReportManagerImpl.java-getFinanceCheckList.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
+break;
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2900/pattern-ver1-serial/BlueMesh.src.blue.mesh.ServerThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
+break;
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2900/pattern-ver1-serial/BlueMesh.src.blue.mesh.ServerThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
+break;
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2900/pattern-ver1-serial/BlueMesh.src.blue.mesh.ServerThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
+break;
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2900/pattern-ver1-serial/BlueMesh.src.blue.mesh.ServerThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
+break;
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2900/pattern-ver1-serial/BlueMesh.src.blue.mesh.ServerThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
+break;
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2027/pattern-ver1-serial/cong.Internet.BRITE.src.org.cong.complexNetwork.model.AB.java-getTargetNode.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
-compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
+compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name,""));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/979/pattern-ver1-serial/app.src.main.java.gbc.sa.vansales.activities.LoadRequestActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
-if(dot==-1){
+if(dot>=-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
-boolean isExpr=parent.getType()==Token.EXPR_RESULT;
+boolean isExpr=parent.getType()>=Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
-if(left.getType()==Token.GETPROP){
+if(left.getType()>=Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
-if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
+if(name.getType()>=Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
-if(arg.getType()==Token.STRING){
+if(arg.getType()>=Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
-if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
+if(n.getFirstChild().getType()>=Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
-int dot=arg.getString().indexOf('.');
+int dot=arg.getString().indexOf("",'.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1081/pattern-ver1-serial/src.main.java.edu.kit.ipd.crowdcontrol.objectservice.moneytransfer.MoneyTransferManager.java-sendNotification.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
-if(dot==-1){
+if(dot!=-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
-boolean isExpr=parent.getType()==Token.EXPR_RESULT;
+boolean isExpr=parent.getType()!=Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
-if(left.getType()==Token.GETPROP){
+if(left.getType()!=Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
-if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
+if(name.getType()!=Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
-if(arg.getType()==Token.STRING){
+if(arg.getType()!=Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
-if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
+if(n.getFirstChild().getType()!=Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
-int dot=arg.getString().indexOf('.');
+Integer dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
-String name=n.getFirstChild().getString();
+String name=n.getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5764/pattern-ver1-serial/SmartTrader.app.src.main.java.com.loveboyuan.smarttrader.InventoryActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
-String methodName=name.getNext().getString();
+String methodName=name.getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5764/pattern-ver1-serial/SmartTrader.app.src.main.java.com.loveboyuan.smarttrader.InventoryActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
-if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
+if(n.getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5764/pattern-ver1-serial/SmartTrader.app.src.main.java.com.loveboyuan.smarttrader.InventoryActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
-if(dot==-1){
+if(dot==0){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
-Node arg=left.getNext();
+ final Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
-String name=n.getFirstChild().getString();
+ final String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
-Node left=n.getFirstChild();
+ final Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
-String name=n.getFirstChild().getString();
+ final String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
-Node name=left.getFirstChild();
+ final Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
-String name=n.getFirstChild().getString();
+ final String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
-String name=n.getFirstChild().getString();
-ProvidedName pn=providedNames.get(name);
+ final String name=n.getFirstChild().getString();
+ final ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
-CodingConvention convention=compiler.getCodingConvention();
+ final CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
-String name=n.getFirstChild().getString();
+ final String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
-boolean isExpr=parent.getType()==Token.EXPR_RESULT;
+ final boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
-String name=n.getFirstChild().getString();
+ final String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
-List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
+ final List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
-String name=n.getFirstChild().getString();
+ final String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
-String methodName=name.getNext().getString();
+ final String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
-String name=n.getFirstChild().getString();
+ final String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
-Node left=n.getFirstChild();
+ final Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
-Node arg=left.getNext();
+ final Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5265/pattern-ver1-serial/src.main.java.org.lemming.modules.StoreLoader.java-addMetadata.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
-Node left=n.getFirstChild();
+ final Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
-Node name=left.getFirstChild();
+ final Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5265/pattern-ver1-serial/src.main.java.org.lemming.modules.StoreLoader.java-addMetadata.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
-CodingConvention convention=compiler.getCodingConvention();
-List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
+ final CodingConvention convention=compiler.getCodingConvention();
+ final List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5265/pattern-ver1-serial/src.main.java.org.lemming.modules.StoreLoader.java-addMetadata.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
-boolean isExpr=parent.getType()==Token.EXPR_RESULT;
+ final boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
-List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
+ final List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5265/pattern-ver1-serial/src.main.java.org.lemming.modules.StoreLoader.java-addMetadata.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
-boolean isExpr=parent.getType()==Token.EXPR_RESULT;
+ boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
-String name=n.getFirstChild().getString();
+ String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
-boolean isExpr=parent.getType()==Token.EXPR_RESULT;
+ boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
-ProvidedName pn=providedNames.get(name);
+ ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
-Node left=n.getFirstChild();
+ Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
-Node arg=left.getNext();
+ Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
-Node left=n.getFirstChild();
+ Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
-Node name=left.getFirstChild();
+ Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
-boolean isExpr=parent.getType()==Token.EXPR_RESULT;
+ boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
-Node arg=left.getNext();
+ Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
-boolean isExpr=parent.getType()==Token.EXPR_RESULT;
-Node left=n.getFirstChild();
+ boolean isExpr=parent.getType()==Token.EXPR_RESULT;
+ Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
-boolean isExpr=parent.getType()==Token.EXPR_RESULT;
+ boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
-Node name=left.getFirstChild();
+ Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
-boolean isExpr=parent.getType()==Token.EXPR_RESULT;
+ boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
-CodingConvention convention=compiler.getCodingConvention();
+ CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
-CodingConvention convention=compiler.getCodingConvention();
-List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
+ CodingConvention convention=compiler.getCodingConvention();
+ List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
-boolean isExpr=parent.getType()==Token.EXPR_RESULT;
+ boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
-String methodName=name.getNext().getString();
+ String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
-ProvidedName pn=providedNames.get(name);
+ProvidedName pn=this.providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
+
+default :
 
+break;
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V65/5242/pattern-ver1-serial/jcollada-schema-1.4.src.main.java.net.dryanhild.collada.schema14.parser.geometry.GeometryParser.java-parse.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
+break;
+default :
+
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/3593/pattern-ver1-serial/engine.src.main.java.org.terasology.entitySystem.event.internal.EventSystemImpl.java-networkReplicate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
-ProvidedName pn=providedNames.get(name);
+ProvidedName pn=providedNames.get(name.trim());
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
-if("base".equals(methodName)){
+if("base".equals(methodName.trim())){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
-if("require".equals(methodName)){
+if("require".equals(methodName.trim())){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
-if("provide".equals(methodName)){
+if("provide".equals(methodName.trim())){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
-if("exportSymbol".equals(methodName)){
+if("exportSymbol".equals(methodName.trim())){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
-if("addDependency".equals(methodName)){
+if("addDependency".equals(methodName.trim())){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
-compiler.getTypeRegistry().forwardDeclareType(typeDecl);
+compiler.getTypeRegistry().forwardDeclareType(typeDecl.trim());
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
-if("setCssNameMapping".equals(methodName)){
+if("setCssNameMapping".equals(methodName.trim())){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
-if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
+if(name.getType()==Token.NAME&&GOOG.equals(name.getString().trim())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
-exportedVariables.add(arg.getString());
+exportedVariables.add(arg.getString().trim());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
+if(name.isEmpty()){
+return ;
+}
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
+if(name.isEmpty()){
+return ;
+}
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
+if(typeDecl.isEmpty()){
+return ;
+}
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
+break;
+default :
+
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/1781/pattern-ver1-serial/src.com.sbezboro.standardplugin.listeners.PlayerInteractListener.java-onPlayerInteract.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
+import java.util.Iterator;
+
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
-boolean isExpr=parent.getType()==Token.EXPR_RESULT;
+boolean isExpr=parent.getType()==-1;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
+import java.util.Iterator;
+
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
-if(left.getType()==Token.GETPROP){
+if(left.getType()==-1){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
+import java.util.Iterator;
+
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
-if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
+if(name.getType()==-1&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
+import java.util.Iterator;
+
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
-if(arg.getType()==Token.STRING){
+if(arg.getType()==-1){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
+import java.util.Iterator;
+
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
-if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
+if(n.getFirstChild().getType()==-1&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
-if(!isExpr){
+if(!!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
-String name=n.getFirstChild().getString();
+String name=parent.getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/1694/pattern-ver1-serial/flinklink.src.main.java.eu.amidst.flinklink.core.learning.parametric.ParallelMaximumLikelihood2.java-updateModel.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
-if(!isExpr){
+if(true){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
+if(name==null){
+return ;
+}
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
+if(name==null){
+return ;
+}
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
+if(n==null){
+return ;
+}
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
+if(t==null){
+return ;
+}
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
+if(n==null){
+return ;
+}
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
+if(t==null){
+return ;
+}
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
+if(n==null){
+return ;
+}
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
+if(parent==null){
+return ;
+}
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
+if(n==null){
+return ;
+}
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
+if(name==null){
+return ;
+}
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
+if(n==null){
+return ;
+}
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
+if(n==null){
+return ;
+}
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
+if(n==null){
+return ;
+}
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
+if(n==null){
+return ;
+}
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
+if(typeDecl==null){
+return ;
+}
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
+if(n==null){
+return ;
+}
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
+if(n==null){
+return ;
+}
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
+if(pn==null){
+return ;
+}
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
+if(methodName==null){
+return ;
+}
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
+if(name==null){
+return ;
+}
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
+if(arg==null){
+return ;
+}
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/3545/pattern-ver1-serial/server.src.main.java.nl.inl.blacklab.server.requesthandlers.SearchParameters.java-docSortSettings.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
+if(compiler!=null){
 compiler.reportCodeChange();
+}
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/7075/pattern-ver1-serial/app.src.main.java.com.gustavoparreira.realtimetile.Player.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
+if(parent!=null){
 parent.replaceChild(n,Node.newNumber(0));
+}
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/7075/pattern-ver1-serial/app.src.main.java.com.gustavoparreira.realtimetile.Player.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
+if(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name)!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
+}
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
+if(arg.getString()!=null){
 exportedVariables.add(arg.getString());
+}
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
+if(arg.getString().substring(0,dot)!=null){
 exportedVariables.add(arg.getString().substring(0,dot));
+}
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
+if(compiler!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
+}
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/3708/pattern-ver1-serial/mifosng-android.src.main.java.com.mifos.mifosxdroid.online.ClientListFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
+if(exportedVariables!=null){
 exportedVariables.add(arg.getString());
+}
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/6565/pattern-ver1-serial/MarioAI.src.ch.idsia.agents.controllers.AdvancedMarioAIAgent.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
+if(n==null){
+return ;
+}
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
+if(providedNames==null){
+return ;
+}
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
+if(providedNames==null){
+return ;
+}
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
+if(n.getFirstChild()==null){
+return ;
+}
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
+if(n.getFirstChild()==null){
+return ;
+}
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
+if(t==null){
+return ;
+}
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
+if(name==n.getFirstChild().getString()){
+return ;
+}
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
+if(pn==providedNames.get(name)){
+return ;
+}
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
+}
 }
 }
 }
 }
 }
 }
 }
+if(name==left.getFirstChild()){
+return ;
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
+if(t==null){
+return ;
+}
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
-if(pn!=null){
+if(pn.equals(null)){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
+synchronized(this){
 processBaseClassCall(t,n);
+}
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
+synchronized(this){
 break;
+}
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
-if("base".equals(methodName)){
+if(!"base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
-if("require".equals(methodName)){
+if(!"require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
-if("provide".equals(methodName)){
+if(!"provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
-if("setCssNameMapping".equals(methodName)){
+if(!"setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
-if("exportSymbol".equals(methodName)){
+if(!"exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/1790/pattern-ver1-serial/src.main.java.syam.Honeychest.config.ConfigurationManager.java-checkver.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
-if("addDependency".equals(methodName)){
+if(!"addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/1790/pattern-ver1-serial/src.main.java.syam.Honeychest.config.ConfigurationManager.java-checkver.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
-if(typeDecls!=null){
+if(typeDecls!=null&&isExpr){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/727/pattern-ver1-serial/src.main.java.com.hearthsim.card.minion.Minion.java-summonMinion.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
+if("index".equals(name)){
+return ;
+}
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
+if("index".equals(name)){
+return ;
+}
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
+if("index".equals(n)){
+return ;
+}
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
+if("index".equals(t)){
+return ;
+}
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
+if("index".equals(n)){
+return ;
+}
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
+if("index".equals(t)){
+return ;
+}
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
+if("index".equals(pn)){
+return ;
+}
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
+if("index".equals(typeDecl)){
+return ;
+}
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
+if(name.equals("TIME")){
+return ;
+}
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
+if(name.equals("TIME")){
+return ;
+}
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
+if(n.equals("TIME")){
+return ;
+}
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
+if(t.equals("TIME")){
+return ;
+}
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
+if(n.equals("TIME")){
+return ;
+}
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
+if(t.equals("TIME")){
+return ;
+}
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
+if(pn.equals("TIME")){
+return ;
+}
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
+if(n.equals("TIME")){
+return ;
+}
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
+if("&null".equals(name)){
+return ;
+}
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
+if("&null".equals(n)){
+return ;
+}
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
+if("&null".equals(t)){
+return ;
+}
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
+if("&null".equals(n)){
+return ;
+}
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
+if("&null".equals(parent)){
+return ;
+}
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
+if("&null".equals(t)){
+return ;
+}
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
+if("&null".equals(n)){
+return ;
+}
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
+if("&null".equals(parent)){
+return ;
+}
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
+if(name.equals("DATETIME")){
+return ;
+}
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
+if(name.equals("DATETIME")){
+return ;
+}
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
+if(n.equals("DATETIME")){
+return ;
+}
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
+if(t.equals("DATETIME")){
+return ;
+}
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
+if(n.equals("DATETIME")){
+return ;
+}
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
+if(t.equals("DATETIME")){
+return ;
+}
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
+if(pn.equals("DATETIME")){
+return ;
+}
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
+}
 }
+if(n.equals("DATETIME")){
+return ;
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
+}
 }
+if(parent.equals("DATETIME")){
+return ;
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
+if(convention==null){
+return ;
+}
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4514/pattern-ver1-serial/src.main.java.com.muzima.service.HTMLFormObservationCreator.java-createObservation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
+compiler.reportCodeChange();
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
+compiler.reportCodeChange();
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
+if(typeDecls==null){
+return ;
+}
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/1529/pattern-ver1-serial/src.main.java.net.openhft.chronicle.core.io.IOTools.java-shallowDeleteDirWithFiles.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
+if(compiler==null){
+return ;
+}
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2437/pattern-ver1-serial/app.src.main.java.org.gdg.frisbee.android.onboarding.FirstStartStep1Fragment.java-addChapters.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
-boolean isExpr=parent.getType()==Token.EXPR_RESULT;
+ final boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
-Node arg=left.getNext();
+ final Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
-String name=n.getFirstChild().getString();
+ final String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
-boolean isExpr=parent.getType()==Token.EXPR_RESULT;
-Node left=n.getFirstChild();
+ final boolean isExpr=parent.getType()==Token.EXPR_RESULT;
+ final Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
-String name=n.getFirstChild().getString();
+ final String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
-boolean isExpr=parent.getType()==Token.EXPR_RESULT;
+ final boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
-Node name=left.getFirstChild();
+ final Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
-String name=n.getFirstChild().getString();
+ final String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
-boolean isExpr=parent.getType()==Token.EXPR_RESULT;
+ final boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
-String name=n.getFirstChild().getString();
-ProvidedName pn=providedNames.get(name);
+ final String name=n.getFirstChild().getString();
+ final ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
-boolean isExpr=parent.getType()==Token.EXPR_RESULT;
+ final boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
-CodingConvention convention=compiler.getCodingConvention();
+ final CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
-String name=n.getFirstChild().getString();
+ final String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
-if(typeDecls!=null){
+if(typeDecls.isEmpty()){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7829/pattern-ver1-serial/app.src.main.java.de.tum.in.tumcampusapp.activities.TransportationDetailsActivity.java-onLoadInBackground.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
-Node left=n.getFirstChild();
+ final Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
-Node arg=left.getNext();
+ final Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
-String name=n.getFirstChild().getString();
+ final String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
-Node left=n.getFirstChild();
+ final Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
-String name=n.getFirstChild().getString();
-ProvidedName pn=providedNames.get(name);
+ final String name=n.getFirstChild().getString();
+ final ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
-Node left=n.getFirstChild();
+ final Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
-CodingConvention convention=compiler.getCodingConvention();
+ final CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
-String name=n.getFirstChild().getString();
+ final String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
-Node left=n.getFirstChild();
+ final Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
-List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
+ final List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
-String name=n.getFirstChild().getString();
+ final String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
-Node arg=left.getNext();
+ final Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
-String name=n.getFirstChild().getString();
-ProvidedName pn=providedNames.get(name);
+ final String name=n.getFirstChild().getString();
+ final ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
+if(typeDecls!=null){
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
+}
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4703/pattern-ver1-serial/com.zuehlke.zfb.model.src.com.zuehlke.zfb.model.chart.ChartModel.java-changed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
-boolean isExpr=parent.getType()==Token.EXPR_RESULT;
-Node left=n.getFirstChild();
+ @SuppressWarnings("UnusedAssignment") boolean isExpr=parent.getType()==Token.EXPR_RESULT;
+ @SuppressWarnings("UnusedAssignment") Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
-String name=n.getFirstChild().getString();
+ @SuppressWarnings("UnusedAssignment") String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
-boolean isExpr=parent.getType()==Token.EXPR_RESULT;
+ @SuppressWarnings("UnusedAssignment") boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
-Node name=left.getFirstChild();
+ @SuppressWarnings("UnusedAssignment") Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
-Node arg=left.getNext();
+ @SuppressWarnings("UnusedAssignment") Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
+name=name;
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
+compiler.reportCodeChange();
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
-if(typeDecls!=null){
+if(isExpr&&(typeDecls!=null)){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V37/6893/pattern-ver1-serial/EliteEngine.src.entity.humans.HeavyAssault.java-updateDecisions.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
+name=name;
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
-Node name=left.getFirstChild();
+ final Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
-String name=n.getFirstChild().getString();
-ProvidedName pn=providedNames.get(name);
+ final String name=n.getFirstChild().getString();
+ final ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
+if(name.equals("")){
+return ;
+}
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
+if(pn.equals("")){
+return ;
+}
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
+if(name.equals("")){
+return ;
+}
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
+if("setCssNameMapping"!=null){
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
+}
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/4672/pattern-ver1-serial/main.src.main.java.com.example.wduello.collectionmanager.ItemListFragment.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
+if("base"!=null){
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
+}
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/4672/pattern-ver1-serial/main.src.main.java.com.example.wduello.collectionmanager.ItemListFragment.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
+compiler.reportCodeChange();
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
+compiler.reportCodeChange();
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
-if(pn!=null){
+if(true){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
-if(typeDecls!=null){
+if(true){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
-if("addDependency".equals(methodName)){
+if(true){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
-if("exportSymbol".equals(methodName)){
+if(true){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
-if("base".equals(methodName)){
+if(true){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
-if("require".equals(methodName)){
+if(true){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
-if("provide".equals(methodName)){
+if(true){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
-if("setCssNameMapping".equals(methodName)){
+if(true){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
-if("base".equals(methodName)){
+if("base".equals(methodName)&&isExpr){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2749/pattern-ver1-serial/Stuyablo.java-combat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
-if("require".equals(methodName)){
+if("require".equals(methodName)&&isExpr){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2749/pattern-ver1-serial/Stuyablo.java-combat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
-if(typeDecls!=null){
+if(typeDecls!=null||typeDecls.isEmpty()){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/354/pattern-ver1-serial/hapi-fhir-base.src.main.java.ca.uhn.fhir.parser.XmlParser.java-encodeCompositeElementChildrenToStreamWriter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
+synchronized(this){
 processRequireCall(t,n,parent);
+}
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
+synchronized(this){
 processSetCssNameMapping(t,n,parent);
+}
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
+synchronized(this){
 processProvideCall(t,n,parent);
+}
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
+processBaseClassCall(t,n);
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
+processBaseClassCall(t,n);
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
+processBaseClassCall(t,n);
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
+processBaseClassCall(t,n);
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
-processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
+processBaseClassCall(t,n);
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
-if("base".equals(methodName)){
 processBaseClassCall(t,n);
+if("base".equals(methodName)){
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
+processBaseClassCall(t,n);
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
-processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
+processBaseClassCall(t,n);
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
-processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
+processBaseClassCall(t,n);
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
-processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
+processBaseClassCall(t,n);
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
+processBaseClassCall(t,n);
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
-if(dot==-1){
+if(true){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
+if(!arg.getString().substring(0,dot).equals("")){
 exportedVariables.add(arg.getString().substring(0,dot));
+}
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
+if(!arg.getString().equals("")){
 exportedVariables.add(arg.getString());
+}
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
-if(pn!=null){
+if(pn!=null||"查看红包".equals(pn)){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
-if(typeDecls!=null){
+if(typeDecls!=null||"查看红包".equals(typeDecls)){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
-if(dot==-1){
+if(dot==-1||"查看红包".equals(dot)){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
-if(left.getType()==Token.GETPROP){
+if(left.getType()==Token.GETPROP||left.getType()==3){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
-if(dot==-1){
+if(dot==-1||dot==3){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
-if("base".equals(methodName)){
+if("base"!=null&&"base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7778/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.utils.attrmatchers.SoftLimitMatcher.java-matchStoragePoolsWithAttributeOn.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
-if("require".equals(methodName)){
+if("require"!=null&&"require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7778/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.utils.attrmatchers.SoftLimitMatcher.java-matchStoragePoolsWithAttributeOn.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
-if("provide".equals(methodName)){
+if("provide"!=null&&"provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7778/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.utils.attrmatchers.SoftLimitMatcher.java-matchStoragePoolsWithAttributeOn.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
-if("setCssNameMapping".equals(methodName)){
+if("setCssNameMapping"!=null&&"setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7778/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.utils.attrmatchers.SoftLimitMatcher.java-matchStoragePoolsWithAttributeOn.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
-if("exportSymbol".equals(methodName)){
+if("exportSymbol"!=null&&"exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7778/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.utils.attrmatchers.SoftLimitMatcher.java-matchStoragePoolsWithAttributeOn.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
-if("addDependency".equals(methodName)){
+if("addDependency"!=null&&"addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7778/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.utils.attrmatchers.SoftLimitMatcher.java-matchStoragePoolsWithAttributeOn.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
+processRequireCall(t,n,parent);
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
+processProvideCall(t,n,parent);
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
+processRequireCall(t,n,parent);
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
+processProvideCall(t,n,parent);
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
+exportedVariables.add(arg.getString());
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
+exportedVariables.add(arg.getString());
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
-if("base".equals(methodName)){
+if("base".equals(methodName)||"9".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5280/pattern-ver1-serial/onebusaway-twilio-webapp.src.main.java.org.onebusaway.twilio.actions.bookmarks.BookmarkStopAction.java-execute.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
-if("require".equals(methodName)){
+if("require".equals(methodName)||"9".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5280/pattern-ver1-serial/onebusaway-twilio-webapp.src.main.java.org.onebusaway.twilio.actions.bookmarks.BookmarkStopAction.java-execute.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
-if("provide".equals(methodName)){
+if("provide".equals(methodName)||"9".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5280/pattern-ver1-serial/onebusaway-twilio-webapp.src.main.java.org.onebusaway.twilio.actions.bookmarks.BookmarkStopAction.java-execute.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
-if("setCssNameMapping".equals(methodName)){
+if("setCssNameMapping".equals(methodName)||"9".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5280/pattern-ver1-serial/onebusaway-twilio-webapp.src.main.java.org.onebusaway.twilio.actions.bookmarks.BookmarkStopAction.java-execute.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
-if("exportSymbol".equals(methodName)){
+if("exportSymbol".equals(methodName)||"9".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5280/pattern-ver1-serial/onebusaway-twilio-webapp.src.main.java.org.onebusaway.twilio.actions.bookmarks.BookmarkStopAction.java-execute.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
-if("addDependency".equals(methodName)){
+if("addDependency".equals(methodName)||"9".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5280/pattern-ver1-serial/onebusaway-twilio-webapp.src.main.java.org.onebusaway.twilio.actions.bookmarks.BookmarkStopAction.java-execute.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
+handleCandidateProvideDefinition(t,n,parent);
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
+handleCandidateProvideDefinition(t,n,parent);
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
+handleCandidateProvideDefinition(t,n,parent);
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
+handleCandidateProvideDefinition(t,n,parent);
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
+handleCandidateProvideDefinition(t,n,parent);
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
+handleCandidateProvideDefinition(t,n,parent);
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
+handleCandidateProvideDefinition(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
+handleCandidateProvideDefinition(t,n,parent);
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
+handleCandidateProvideDefinition(t,n,parent);
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
+handleCandidateProvideDefinition(t,n,parent);
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
+processRequireCall(t,n,parent);
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
+processProvideCall(t,n,parent);
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
+handleTypedefDefinition(t,n,parent);
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
+processSetCssNameMapping(t,n,parent);
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
+trySimplifyNewDate(t,n,parent);
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
+if(name.isEmpty()){
+name=null;
+}
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
+if(name.isEmpty()){
+name=null;
+}
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
-if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
+if(parent!=null&&n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/3737/pattern-ver1-serial/src.com.ichi2.libanki.sync.RemoteMediaServer.java-addFiles.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
+processRequireCall(t,n,parent);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/293/pattern-ver1-serial/common.ganymedes01.aobd.recipes.RecipesHandler.java-craftingRecipes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
+processRequireCall(t,n,parent);
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/293/pattern-ver1-serial/common.ganymedes01.aobd.recipes.RecipesHandler.java-craftingRecipes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
+processRequireCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/293/pattern-ver1-serial/common.ganymedes01.aobd.recipes.RecipesHandler.java-craftingRecipes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
+processRequireCall(t,n,parent);
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/293/pattern-ver1-serial/common.ganymedes01.aobd.recipes.RecipesHandler.java-craftingRecipes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
+processRequireCall(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/293/pattern-ver1-serial/common.ganymedes01.aobd.recipes.RecipesHandler.java-craftingRecipes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
+processRequireCall(t,n,parent);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/293/pattern-ver1-serial/common.ganymedes01.aobd.recipes.RecipesHandler.java-craftingRecipes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
+processRequireCall(t,n,parent);
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/293/pattern-ver1-serial/common.ganymedes01.aobd.recipes.RecipesHandler.java-craftingRecipes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
-if(dot==-1){
+if(dot<0||dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
-if(left.getType()==Token.GETPROP){
+if(left.getType()<0||left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
+handleCandidateProvideDefinition(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
+handleCandidateProvideDefinition(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
+handleCandidateProvideDefinition(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
+handleCandidateProvideDefinition(t,n,parent);
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
+handleCandidateProvideDefinition(t,n,parent);
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
+handleCandidateProvideDefinition(t,n,parent);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
+handleCandidateProvideDefinition(t,n,parent);
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
+handleCandidateProvideDefinition(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
+processRequireCall(t,n,parent);
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
-processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
+processRequireCall(t,n,parent);
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
+processRequireCall(t,n,parent);
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
-processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
+processRequireCall(t,n,parent);
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
+processRequireCall(t,n,parent);
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
-processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
+processRequireCall(t,n,parent);
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
-processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
+processRequireCall(t,n,parent);
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
-processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
-if("require".equals(methodName)){
 processRequireCall(t,n,parent);
+if("require".equals(methodName)){
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
+processRequireCall(t,n,parent);
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
+processRequireCall(t,n,parent);
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
+processProvideCall(t,n,parent);
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
+handleTypedefDefinition(t,n,parent);
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
+handleCandidateProvideDefinition(t,n,parent);
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
-if("base".equals(methodName)){
+if("base"==null||"base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/4012/pattern-ver1-serial/core.core-impl.src.main.java.org.openbaton.nfvo.core.api.NetworkServiceRecordManagement.java-getVNFCI.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
-if("require".equals(methodName)){
+if("require"==null||"require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/4012/pattern-ver1-serial/core.core-impl.src.main.java.org.openbaton.nfvo.core.api.NetworkServiceRecordManagement.java-getVNFCI.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
-if("provide".equals(methodName)){
+if("provide"==null||"provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/4012/pattern-ver1-serial/core.core-impl.src.main.java.org.openbaton.nfvo.core.api.NetworkServiceRecordManagement.java-getVNFCI.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
-if("setCssNameMapping".equals(methodName)){
+if("setCssNameMapping"==null||"setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/4012/pattern-ver1-serial/core.core-impl.src.main.java.org.openbaton.nfvo.core.api.NetworkServiceRecordManagement.java-getVNFCI.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
-if("exportSymbol".equals(methodName)){
+if("exportSymbol"==null||"exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/4012/pattern-ver1-serial/core.core-impl.src.main.java.org.openbaton.nfvo.core.api.NetworkServiceRecordManagement.java-getVNFCI.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
-if("addDependency".equals(methodName)){
+if("addDependency"==null||"addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/4012/pattern-ver1-serial/core.core-impl.src.main.java.org.openbaton.nfvo.core.api.NetworkServiceRecordManagement.java-getVNFCI.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
-if(typeDecls!=null){
+if(typeDecls!=null||typeDecls.size()<1){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/967/pattern-ver1-serial/app.src.main.java.tv.rocketbeans.android.rbtvsendeplan.ReminderService.java-updateReminderDates.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
+if(n==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
+if(providedNames==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
+if(n.getFirstChild()==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
+if(t==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
+if(compiler==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
+if(t==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
+if(compiler==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
+if(name==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
+if(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name)==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
+if(name==null){
+name="";
+}
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/755/pattern-ver1-serial/src.org.simiancage.bukkit.messagechangerlite.MessageChangerLite.java-getMessage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
+if(name==null){
+name="";
+}
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/755/pattern-ver1-serial/src.org.simiancage.bukkit.messagechangerlite.MessageChangerLite.java-getMessage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
+if(name.equals("")){
+name="Manchester United FC";
+}
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4958/pattern-ver1-serial/FootballScores.app.src.main.java.barqsoft.footballscores.widget.ScoresWidgetIntentService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
+synchronized(this){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
+}
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
-if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
+if(!t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
-if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
+if(t!=null&&t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V15/6389/pattern-ver1-serial/src.org.ohmage.conditionevaluator.comparator.SingleChoiceDataPointComparator.java-lessThan.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
+parent.replaceChild(n,Node.newNumber(0));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
+parent.replaceChild(n,Node.newNumber(0));
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
+if(pn==null){
+throw new IllegalStateException("User isn't registered! "+name);
+}
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
+if(name==null){
+throw new IllegalStateException("User isn't registered! "+n);
+}
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
+if(arg==null){
+throw new IllegalStateException("User isn't registered! "+left);
+}
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
+compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
+exportedVariables.add(arg.getString().substring(0,dot));
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
+exportedVariables.add(arg.getString().substring(0,dot));
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
-if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
+if(parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/6358/pattern-ver1-serial/src.main.java.com.builtbroken.icbm.content.ams.TileAMSClient.java-onPlayerRightClick.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
+if(n==null||name==null||t==null){
+return ;
+}
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
+if(n==null||name==null||t==null){
+return ;
+}
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
-if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
+if(parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/6358/pattern-ver1-serial/src.main.java.com.builtbroken.icbm.content.ams.TileAMSClient.java-onPlayerRightClick.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
+if(dot==-1){
+exportedVariables.add(arg.getString());
+}else {
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
+exportedVariables.add(arg.getString().substring(0,dot));
+}
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 0, INS : 1, DEL : 15
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
+if(dot==-1){
+exportedVariables.add(arg.getString());
+}else {
+exportedVariables.add(arg.getString().substring(0,dot));
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
+}
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/1214/pattern-ver1-serial/src.main.java.cz.vutbr.web.domassign.SingleMapNodeData.java-toString.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 0, INS : 1, DEL : 15
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
+if(dot==-1){
+exportedVariables.add(arg.getString());
+}else {
+exportedVariables.add(arg.getString().substring(0,dot));
+}
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/1214/pattern-ver1-serial/src.main.java.cz.vutbr.web.domassign.SingleMapNodeData.java-toString.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 0, INS : 1, DEL : 15
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
+if(methodName!=null&&methodName.trim().length()==0){
+methodName=null;
+}
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
-if("setCssNameMapping".equals(methodName)){
+if("setCssNameMapping".equals(methodName)||methodName.trim().length()==0){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5053/pattern-ver1-serial/src.edu.clemson.lph.civet.prefs.CivetConfig.java-getEmailErrorsDirPath.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 7, INS : 12, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
+synchronized(this){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
+}
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 20, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
-if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
+if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/1014/pattern-ver1-serial/src.main.java.HxCKDMS.HxCEnchants.Handlers.EnchantHandlers.java-handleBootEnchant.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 20, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
+if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
+reportBadBaseClassUse(t,n,"May only be called directly.");
+}
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 25, UPD : 0, INS : 1, DEL : 24
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
+if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
+reportBadBaseClassUse(t,n,"May only be called directly.");
+}
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 25, UPD : 0, INS : 1, DEL : 24
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
-if(arg.getType()==Token.STRING){
-int dot=arg.getString().indexOf('.');
-if(dot==-1){
-exportedVariables.add(arg.getString());
-}else {
-exportedVariables.add(arg.getString().substring(0,dot));
-}
-}
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/4389/pattern-ver1-serial/app.src.main.java.com.gamble.unopp.GameScreenActivity.java-playCard.pattern
MATCHLEVEL : ALL
ALL : 25, UPD : 0, INS : 0, DEL : 25
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
+if(arg.getType()==Token.STRING){
+int dot=arg.getString().indexOf('.');
+if(dot==-1){
+exportedVariables.add(arg.getString());
+}else {
+exportedVariables.add(arg.getString().substring(0,dot));
+}
+}
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 26, UPD : 0, INS : 1, DEL : 25
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
+synchronized(this){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
+}
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 27, UPD : 27, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
+synchronized(this){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
+}
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 29, UPD : 29, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_70_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[169,260]
------------Candidate---------------
 @Override public void visit(NodeTraversal t,Node n,Node parent){
 switch (n.getType()){
 case Token.CALL :
 
 boolean isExpr=parent.getType()==Token.EXPR_RESULT;
 Node left=n.getFirstChild();
 if(left.getType()==Token.GETPROP){
+synchronized(this){
 Node name=left.getFirstChild();
 if(name.getType()==Token.NAME&&GOOG.equals(name.getString())){
 String methodName=name.getNext().getString();
 if("base".equals(methodName)){
 processBaseClassCall(t,n);
 }else {
 if(!isExpr){
 break;
 }else {
 if("require".equals(methodName)){
 processRequireCall(t,n,parent);
 }else {
 if("provide".equals(methodName)){
 processProvideCall(t,n,parent);
 }else {
 if("exportSymbol".equals(methodName)){
 Node arg=left.getNext();
 if(arg.getType()==Token.STRING){
 int dot=arg.getString().indexOf('.');
 if(dot==-1){
 exportedVariables.add(arg.getString());
 }else {
 exportedVariables.add(arg.getString().substring(0,dot));
 }
 }
 }else {
 if("addDependency".equals(methodName)){
 CodingConvention convention=compiler.getCodingConvention();
 List<String> typeDecls=convention.identifyTypeDeclarationCall(n);
 if(typeDecls!=null){
 for(String typeDecl : typeDecls){
 compiler.getTypeRegistry().forwardDeclareType(typeDecl);
 }
 }
 parent.replaceChild(n,Node.newNumber(0));
 compiler.reportCodeChange();
 }else {
 if("setCssNameMapping".equals(methodName)){
 processSetCssNameMapping(t,n,parent);
+}
 }
 }
 }
 }
 }
 }
 }
 }
 }
 break;
 case Token.ASSIGN :
 
 case Token.NAME :
 
 handleCandidateProvideDefinition(t,n,parent);
 break;
 case Token.EXPR_RESULT :
 
 handleTypedefDefinition(t,n,parent);
 break;
 case Token.FUNCTION :
 
 if(t.inGlobalScope()&&!NodeUtil.isFunctionExpression(n)){
 String name=n.getFirstChild().getString();
 ProvidedName pn=providedNames.get(name);
 if(pn!=null){
 compiler.report(t.makeError(n,FUNCTION_NAMESPACE_ERROR,name));
 }
 }
 break;
 case Token.NEW :
 
 trySimplifyNewDate(t,n,parent);
 break;
 case Token.GETPROP :
 
 if(n.getFirstChild().getType()==Token.NAME&&parent.getType()!=Token.CALL&&parent.getType()!=Token.ASSIGN&&"goog.base".equals(n.getQualifiedName())){
 reportBadBaseClassUse(t,n,"May only be called directly.");
 }
 break;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 109, UPD : 109, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl, com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13, com.google.javascript.jscomp.TypeCheckTest::testScoping12, com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateLocalVarDecl]
---------START : 2019.09.06 AD at 10:38:18 CDT
---------TIME : 2019.09.06 AD at 15:38:19 CDT
--------------- END -----------------
Current failed test : com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionArguments13 | 2019.09.06 AD at 15:38:19 CDT
Current failed test : com.google.javascript.jscomp.TypeCheckTest::testScoping12 | 2019.09.06 AD at 15:38:19 CDT
Current failed test : com.google.javascript.jscomp.TypeCheckTest::testDuplicateLocalVarDecl | 2019.09.06 AD at 15:38:20 CDT
Current failed test : com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments13 | 2019.09.06 AD at 15:38:20 CDT
Finish : closure-70 > patch : 0 | Start : Fri Sep 06 10:38:18 CDT 2019 | End : 2019.09.06 AD at 15:38:20 CDT
